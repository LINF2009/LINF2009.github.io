<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>markdown语法及网络的配置</title>
    <link href="/2023/11/08/markdown%E8%AF%AD%E6%B3%95%E5%8F%8A%E7%BD%91%E7%BB%9C%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/11/08/markdown%E8%AF%AD%E6%B3%95%E5%8F%8A%E7%BD%91%E7%BB%9C%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><h3 id="标题的大小"><a href="#标题的大小" class="headerlink" title="标题的大小"></a>标题的大小</h3><p>在Markdown语法中标题有6种大小并以#号作为区分，如： 一级标题就只有一个#，二级标题就有两个#号以此类推</p><h3 id="字体型号"><a href="#字体型号" class="headerlink" title="字体型号"></a>字体型号</h3><p>Markdown语法以字的左右两边的*号或_符号进行区分，其中两边各有一个为斜体——<em>斜体</em>，两边各有两个为粗体——<strong>粗体</strong> ，两边各有三个为粗斜体——<em><strong>粗斜体</strong></em> 。</p><h3 id="分格线"><a href="#分格线" class="headerlink" title="分格线"></a>分格线</h3><p>可以用三个或以上的***或___或在其中添加空格实现分格线。</p><hr><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>在文字两边各两个~~号生成删除线，<del>删除线</del>。</p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>可使用HTML的&lt;u&gt;标签实现下划线，<u>下划线</u></p><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>脚注使用[^github]打出，<a href="%E4%B8%80%E4%B8%AA%E5%BC%80%E6%BA%90%E7%9A%84%E4%BB%A3%E7%A0%81%E5%B9%B3%E5%8F%B0%E3%80%82">^github</a></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序列表和无序列表。</p><p><strong>无序列表</strong>使用星号(<em>****)、加号(<strong>+</strong>)或是减号(</em>*-**)作为列表标记，这些标记后面要添加一个空格，然后再填写内容： </p><ul><li>一</li><li>二</li></ul><p><strong>有序列表</strong>使用数字并加上 <strong>.</strong> 号来表示，如： </p><ol><li>F</li><li>S</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（**&#96;**），例如： </p><p><code>printf()</code> 函数</p><p>你也可以用 <strong>&#96;&#96;&#96;</strong> 包裹一段代码，并指定一种语言（也可以不指定）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c+">printf(&quot;这是一条语句。&quot;)；<br></code></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>可以使用[链接名](链接地址)或&lt;链接地址&gt;直接表示链接，如： </p><p><a href="https://www.baidu.com/">百度</a>或<a href="http://www.baidu.com/">http://www.baidu.com</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>可直接将图片托入Typora，再使用PicGo上传到github博客中。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgQQ%E6%88%AA%E5%9B%BE20231107200407.png"></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>使用|表头|表头|</p><p>​        |——|—–|</p><p>​         |        |      |</p><p>格式建立表格。</p><table><thead><tr><th>表头</th><th></th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="转义文字"><a href="#转义文字" class="headerlink" title="转义文字"></a>转义文字</h3><p>如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符： </p><p><strong>文本加粗</strong><br>** 正常显示星号 **</p><p>支持以下这些符号前面加上反斜杠来帮助插入普通的符号：  </p><p>\   反斜线<br>&#96;   反引号</p><ul><li><p>星号<br>_   下划线<br>{}  花括号<br>[]  方括号<br>()  小括号</p><p>#  井子号</p><p>+   加号</p><p>-    减号<br>.   英文句点<br>!   感叹号</p></li></ul><h3 id="PicGo的使用"><a href="#PicGo的使用" class="headerlink" title="PicGo的使用"></a>PicGo的使用</h3><p>配置PicGo</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgQQ%E6%88%AA%E5%9B%BE20231109093120.png" alt="QQ截图20231109093120"></p><p>其中图床配置名可以自由设置，设定仓库名必须配置“GitHub用户名\自己创建的库的名字”，设定分支名基本为main，设定Token需要打开github中的Settings，找到</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgscreenshot20231109.png" alt="screenshot20231109"></p><p>按如下操作： </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgscreenshot20231109%20(3).png" alt="screenshot20231109 (3)"></p><p>再选择无限时间，勾选repo。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgscreenshot20231109%20(5).png" alt="screenshot20231109 (5)"></p><hr><p>设定自定义域名格式（cdn）： <a href="https://cdn.jsdelivr.net/gh/%E4%BD%A0%E7%9A%84github%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BD%A0%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D@%E5%88%86%E6%94%AF%EF%BC%88%E4%B8%80%E8%88%AC%E4%B8%BAmain%EF%BC%89/">https://cdn.jsdelivr.net/gh/你的github用户名/你的仓库名@分支（一般为main）/</a></p><h1 id="网络的配置"><a href="#网络的配置" class="headerlink" title="网络的配置"></a>网络的配置</h1><h3 id="常见的网络拓扑结构"><a href="#常见的网络拓扑结构" class="headerlink" title="常见的网络拓扑结构"></a>常见的网络拓扑结构</h3><h3 id="1-总线型网络拓扑结构"><a href="#1-总线型网络拓扑结构" class="headerlink" title="1.总线型网络拓扑结构"></a>1.总线型网络拓扑结构</h3><p>总线型结构是将网络中的所有设备通过相应的硬件接口直接连接到公共总线上，结点之间按广播方式通信，一个结点发出的信息，总线上的其它结点均可“收听”到。 总线型结构就像一张树叶,有一条主干线,主干线上面由很多分支。总线型拓扑结构图如下: </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%80%BB%E7%BA%BF%E6%8B%93%E6%89%91.png" alt="总线拓扑"></p><p><strong>总线型拓扑结构的网络特点如下</strong>：</p><ul><li>结构简单，可扩充性好；</li><li>当需要增加节点时，只需要在总线上增加一个分支接口便可与分支节点相连，当总线负载不允许时还可以扩充总线；</li><li>使用的电缆少，且安装容易；</li><li>使用的设备相对简单，可靠性高；</li><li>维护难，分支节点故障查找难。</li></ul><p><strong>总线型拓扑结构的结构特点如下</strong>：</p><ul><li>组网费用低：从示意图可以这样的结构根本不需要另外的互联设备，是直接通过一条总线进行连接，所以组网费用较低；</li><li>这种网络因为各节点是共用总线带宽的，所以在传输速度上会随着接入网络的用户的增多而下降；</li><li>网络用户扩展较灵活：需要扩展用户时只需要添加一个接线器即可，但所能连接的用户数量有限；</li><li>维护较容易：单个节点失效不影响整个网络的正常通信。但是如果总线一断，则整个网络或者相应主干网段就断了。</li><li>这种网络拓扑结构的缺点是一次仅能一个端用户发送数据，其它端用户必须等待到获得发送权</li></ul><h3 id="2-星型网络拓扑结构"><a href="#2-星型网络拓扑结构" class="headerlink" title="2.星型网络拓扑结构"></a>2.星型网络拓扑结构</h3><p>星型结构是一种以中央节点为中心，把若干外围节点连接起来的辐射式互联结构。这种结构适用于局域网，特别是近年来连接的局域网大都采用这种连接方式。这种连接方式以双绞线或同轴电缆作连接线路。星型拓扑结构图如下: </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%98%9F%E5%9E%8B%E6%8B%93%E6%89%91.png" alt="星型拓扑"></p><p><strong>星型拓扑结构的结构特点如下</strong>：</p><ul><li>控制简单。任何一站点只和中央节点相连接，因而介质访问控制方法简单，致使访问协议也十分简单。易于网络监控和管理。</li><li>故障诊断和隔离容易。中央节点对连接线路可以逐一隔离进行故障检测和定位，单个连接点的故障只影响一个设备，不会影响全网。</li><li>方便服务。中央节点可以方便地对各个站点提供服务和网络重新配置。</li></ul><p>总的来说星型拓扑结构相对简单，便于管理，建网容易，是目前局域网普采用的一种拓扑结构。采用星型拓扑结构的局域网，一般使用双绞线或光纤作为传输介质，符合综合布线标准，能够满足多种宽带需求。</p><p>尽管物理星型拓扑的实施费用高于物理总线拓扑，然而星型拓扑的优势却使其物超所值。每台设备通过各自的线缆连接到中心设备，因此某根电缆出现问题时只会影响到那一台设备，而网络的其他组件依然可正常运行。这个优点极其重要，这也正是所有新设计的以太网都采用的物理星型拓扑的原因所在。</p><h3 id="3-环形网络拓扑结构"><a href="#3-环形网络拓扑结构" class="headerlink" title="3.环形网络拓扑结构"></a>3.环形网络拓扑结构</h3><p>环形结构各结点通过通信线路组成闭合回路，环中数据只能单向传输，信息在每台设备上的延时时间是固定的，特别适合实时控制的局域网系统。环形结构就如一串珍珠项链,环形结构上的每台计算机就是项链上的一个个珠子。环形拓扑结构图如下:</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%8E%AF%E5%BD%A2%E6%8B%93%E6%89%91.png" alt="环形拓扑"></p><p>实际上大多数情况下这种拓扑结构的网络不会是所有计算机真的要连接成物理上的环型，一般情况下，环的两端是通过一个阻抗匹配器来实现环的封闭的，因为在实际组网过程中因地理位置的限制不方便真的做到环的两端物理连接。</p><p><strong>环型拓扑结构的网络特点如下</strong>：</p><ul><li>信息流在网中是沿着固定方向流动的，两个节点仅有一条道路，故简化了路径选择的控制；</li><li>环路上各节点都是自主控制，故控制软件简单；</li><li>由于信息源在环路中是串行地穿过各个节点，当环中节点过多时，势必影响信息传输速率，使网络的响应时间延长；</li><li>环路是封闭的，不便于扩充；</li><li>可靠性低，一个节点故障，将会造成全网瘫痪；</li><li>维护难，对分支节点故障定位较难。</li></ul><p><strong>环型拓扑结构的结构特点如下</strong>：</p><ul><li>一般仅适用于IEEE 802.5的令牌网(Token ring network)，在这种网络中，”令牌”是在环型连接中依次传递。所用的传输介质一般是同轴电缆。</li><li>网络实现也非常简单，投资最小。可以从其网络结构示意图中看出，组成这个网络除了各工作站就是传输介质–同轴电缆，以及一些连接器材，没有价格昂贵的节点集中设备，如集线器和交换机。但也正因为这样，所以这种网络所能实现的功能最为简单，仅能当作一般的文件服务模式；</li><li>传输速度较快：在令牌网中允许有16Mbps的传输速度，它比普通的10Mbps以太网要快许多。当然随着以太网的广泛应用和以太网技术的发展，以太网的速度也得到了极大提高，目前普遍都能提供100Mbps的网速，远比16Mbps要高。</li><li>维护困难：从其网络结构可以看到，整个网络各节点间是直接串联，这样任何一个节点出了故障都会造成整个网络的中断、瘫痪，维护起来非常不便。另一方面因为同轴电缆所采用的是插针式的接触方式，所以非常容易造成接触不良，网络中断，而且这样查找起来非常困难，这一点相信维护过这种网络的人都会深有体会。</li><li>扩展性能差：也是因为它的环型结构，决定了它的扩展性能远不如星型结构的好，如果要新添加或移动节点，就必须中断整个网络，在环的两端作好连接器才能连接。</li></ul><h3 id="4-树型网络拓扑结构"><a href="#4-树型网络拓扑结构" class="headerlink" title="4.树型网络拓扑结构"></a>4.树型网络拓扑结构</h3><p>树型拓扑结构是一种层次结构，结点按层次连结，信息交换主要在上下结点之间进行，相邻结点或同层结点之间一般不进行数据交换。树型拓扑结构是就是数据结构中的树。树型拓扑结构图如下:</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%A0%91%E5%BD%A2%E6%8B%93%E6%89%91.png" alt="树形拓扑"></p><p><strong>树形拓扑结构的网络特点如下：</strong></p><ul><li>网络结构简单，便于管理；</li><li>控制简单，建网容易；</li><li>网络延迟时间较短，误码率较低；</li><li>网络共享能力较差；</li><li>通信线路利用率不高；</li><li>中央结点负荷太重。</li></ul><p><strong>树型拓扑结构的结构特点如下</strong>：</p><ul><li>易于扩充。树形结构可以延伸出很多分支和子分支，这些新节点和新分支都能容易地加入网内。</li><li>故障隔离较容易。如果某一分支的节点或线路发生故障，很容易将故障分支与整个系统隔离开来。</li><li>各个节点对根节点的依赖性太大。如果根发生故障，则全网不能正常工作。</li></ul><h3 id="5-网状网络拓扑结构"><a href="#5-网状网络拓扑结构" class="headerlink" title="5.网状网络拓扑结构"></a>5.网状网络拓扑结构</h3><p>网络拓扑结构又称作无规则结构，结点之间的联结是任意的，没有规律。网状拓扑结构图如下:</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%BD%91%E7%8A%B6%E6%8B%93%E6%89%91.png" alt="网状拓扑"></p><p><strong>网状网络拓扑结构的结构特点如下：</strong></p><ul><li>网络可靠性高，一般通信子网中任意两个节点交换机之间，存在着两条或两条以上的通信路径，这样，当一条路径发生故障时，还可以通过另一条路径把信息送至节点交换机。</li><li>网络可组建成各种形状，采用多种通信信道，多种传输速率。</li><li>网内节点共享资源容易。</li><li>可改善线路的信息流量分配。</li><li>可选择最佳路径，传输延迟小。</li></ul><p>网状形网是广域网中最常采用的一种网络形式，是典型的点到点结构。在网状拓扑结构中，网络的每台设备之间均有点到点的链路连接，这种连接不经济，只有每个站点都要频繁发送信息时才使用这种方法。它的安装也复杂，但系统可靠性高，容错能力强。有时也称为分布式结构。</p><h3 id="6-混合网络型拓扑结构"><a href="#6-混合网络型拓扑结构" class="headerlink" title="6.混合网络型拓扑结构"></a>6.混合网络型拓扑结构</h3><p>混合型网络拓扑结构就是指同时使用上面的5种网络拓扑结构种两种或两种以上的网络拓扑结构。</p><p>这种网络拓扑结构是由星型结构和总线型结构的网络结合在一起的网络结构，这样的拓扑结构更能满足较大网络的拓展，解决星型网络在传输距离上的局限，而同时又解决了总线型网络在连接用户数量的限制。这种网络拓扑结构同时兼顾了星型网与总线型网络的优点，在缺点方面得到了一定的弥补。</p><p><strong>混合型网络拓扑结构的结构特点如下：</strong></p><ul><li>应用广泛</li></ul><p>这主要是因它解决了星型和总线型拓扑结构的不足，满足了大公司组网的实际需求。目前在一些智能化的信息大厦中的应用非常普遍。在一幢大厦中，各楼层间采用光纤作为总线传输介质，一方面可以保证网络传输距离，另一方面，光纤的传输性能要远好于同轴电缆， 所以，在传输性能上也给予了充分保证。当然投资成本会有较大增加，在一些较小建筑物中 也可以采用同轴电缆作为总线传输介质。各楼层内部仍普遍采用使用双绞线星型以太网。</p><ul><li>扩展灵活</li></ul><p>这主要是继承了星型拓扑结构的优点。但由于仍采用广播式的消息传送方式，所以在总 线长度和节点数量上也会受到限制，不过在局域网中的影响并不是很大。</p><ul><li>性能差</li></ul><p>因为其骨干网段(总线段)采用总线网络连接方式，所以各楼层和各建筑物之间的网络 互联性能较差，仍局限于最高1 6Mbps的速率。另外，这种结构网络具有总线型网络结构的 弱点，网络速率会随着用户的增多而下降。当然在采用光纤作为传输介质的混合型网络中， 这些影响还是比较小的。</p><ul><li>较难维护</li></ul><p>这主要受到总线型网络拓扑结构的制约，如果总线断，则整个网络也就瘫痪了，但是如果是分支网段出了故障，则不影响整个网络的正常运作。再一个就是整个网络非常复杂，维 护起来不容易。</p><p>三层结构模型：接入层、汇聚层、核心层</p><p>出口路器</p><p>族心尽</p><p>汇聚层</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%BD%91%E7%BB%9C%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png" alt="网络的层次结构"></p><p>接入层、汇聚层、核心层</p><p>接入层：无线网络发射器，AP（提供接入网络的接口）</p><p>汇聚层：楼层交换机、建筑物交换机（汇聚接入层设备）</p><p>核心层：核心交换机（数据高速转发）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>配置虚拟机和使用GitHub写博客</title>
    <link href="/2023/11/07/2023-11-7-%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E4%BD%BF%E7%94%A8GitHub%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/11/07/2023-11-7-%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E4%BD%BF%E7%94%A8GitHub%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="配置虚拟机"><a href="#配置虚拟机" class="headerlink" title="配置虚拟机"></a>配置虚拟机</h3><p>先下载软件__VMware__（此软件是用于使用虚拟机），再将win10的虚拟机<u>（Win10_1903_V2_Chinese(Simplified)_x64.iso）</u></p><p>配置在VMware中。启动虚拟机看是否成功安装。  </p><h3 id="使用GitHub写博客"><a href="#使用GitHub写博客" class="headerlink" title="使用GitHub写博客"></a>使用GitHub写博客</h3><p>下载git、node和Typota三个软件，其中git进行GitHub中博客相关操作，Typota进行编写博客操作。下面进行博客的创建： </p><ol><li>在本地找个目录放博客源文件，路径不要有中文。</li><li>在选定的目录中，右键Git Bash Here，使用npm命令安装Hexo，输入：</li></ol><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>-g hexo-cli <br>hexo init <span class="hljs-keyword">blog </span><br>cd <span class="hljs-keyword">blog </span><br>hexo g <br></code></pre></td></tr></table></figure><p>创建博客。</p><ol start="3"><li>再进行ssh密钥的配置，使用语句cd ~&#x2F;.ssh用于检查本机是否有ssh密钥（如果提示：No such file or directory 说明你是第一次使用git）。</li><li>使用语句’ssh-keygen -t rsa -C “邮件地址”’，然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：写一个ssh密钥的标题，再将“C: \Users\当前用户名.ssh\id_rsa.pub”中的内容复制到key中。</li><li>完成以上操作后测试ssh连接是否成功，使用’ssh -T <a href="mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#116;&#x68;&#x75;&#x62;&#46;&#x63;&#x6f;&#x6d;">&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#116;&#x68;&#x75;&#x62;&#46;&#x63;&#x6f;&#x6d;</a>‘（邮箱地址不用改），如果提示Are you sure you want to continue connecting (yes&#x2F;no)?，输入yes，提示“Hi LINF2009! You’ve successfully authenticated, but GitHub does not provide shell access.”则连接成功。最后在选中的位置(blog目录下)打开cmd，输入’npm install hexo-deployer-git –save’，再在上一个Git Bash Here还需要继续配置</li></ol><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> –<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> “xxx”<span class="hljs-comment">// 你的github用户名，非昵称</span><br>git <span class="hljs-keyword">config</span> –<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> “xxx@qq<span class="hljs-variable">.com</span>“<span class="hljs-comment">// 填写你的github注册邮箱</span><br></code></pre></td></tr></table></figure><ol start="6"><li>在GitHub上建立一个存储库，命名为github的用户名.github.io（必须与自己github注册用户名一致，因为Github 仅能使用一个同名仓库的代码托管一个静态站点），编辑_config.yml文件，在最后改成这样</li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span> <br><span class="hljs-symbol">type:</span> git<br><span class="hljs-symbol">repository:</span> git@github.com:xxx/xxx.github.io.git<br><span class="hljs-symbol">branch:</span> main<br></code></pre></td></tr></table></figure><p>最后上传。</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>x</title>
    <link href="/2023/11/07/x/"/>
    <url>/2023/11/07/x/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/07/hello-world/"/>
    <url>/2023/11/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
